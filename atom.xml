<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vue实验室</title>
  
  <subtitle>专注于Vue相关知识的学习和分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://violetjack.github.io/"/>
  <updated>2018-03-07T02:03:20.107Z</updated>
  <id>https://violetjack.github.io/</id>
  
  <author>
    <name>VioletJack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js 源码学习八 —— HTML解析细节学习</title>
    <link href="https://violetjack.github.io/2018/03/04/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%20%E2%80%94%E2%80%94%20HTML%E8%A7%A3%E6%9E%90%E7%BB%86%E8%8A%82%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/03/04/Vue.js源码学习八 —— HTML解析细节学习/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-07T02:03:20.107Z</updated>
    
    <content type="html"><![CDATA[<p>从上一篇博客中，我们知道了template编译的整体逻辑和template编译后用在了哪里。本文着重讲下HTML的解析过程。</p><h1 id="parse-方法"><a href="#parse-方法" class="headerlink" title="parse 方法"></a>parse 方法</h1><p>所有解析的起点就在 parse 方法中，parse方法最终将返回为一个 AST 语法树元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  warn = options.warn || baseWarn</span><br><span class="line"></span><br><span class="line">  platformIsPreTag = options.isPreTag || no</span><br><span class="line">  platformMustUseProp = options.mustUseProp || no</span><br><span class="line">  platformGetTagNamespace = options.getTagNamespace || no</span><br><span class="line"></span><br><span class="line">  transforms = pluckModuleFunction(options.modules, <span class="string">'transformNode'</span>)</span><br><span class="line">  preTransforms = pluckModuleFunction(options.modules, <span class="string">'preTransformNode'</span>)</span><br><span class="line">  postTransforms = pluckModuleFunction(options.modules, <span class="string">'postTransformNode'</span>)</span><br><span class="line"></span><br><span class="line">  delimiters = options.delimiters</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">const</span> preserveWhitespace = options.preserveWhitespace !== <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> root</span><br><span class="line">  <span class="keyword">let</span> currentParent</span><br><span class="line">  <span class="keyword">let</span> inVPre = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> inPre = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> warned = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">warnOnce</span>(<span class="params">msg</span>)</span>&#123;...&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeElement</span>(<span class="params">element</span>)</span>&#123;...&#125;</span><br><span class="line">  parseHTML(...)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，除了 <code>parseHTML</code>  方法外，其他都是定义变量、方法的行为。因此只需深入看 parseHTML 行为就好。<br>于是我们在 <code>src/core/compiler/parser/html-parser.js</code> 文件中找到 parseHTML 方法。</p><h1 id="parseHTML-中的几个方法"><a href="#parseHTML-中的几个方法" class="headerlink" title="parseHTML 中的几个方法"></a>parseHTML 中的几个方法</h1><p>在源码中可以看到，parseHTML 中有四个方法，我们来一一解读。</p><h2 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推进。向前推进n个字符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">advance</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  index += n</span><br><span class="line">  html = html.substring(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将index的值向后移动n位，然后从第n个字符开始截取 HTML 内容字符串。</p><h1 id="parseStartTag"><a href="#parseStartTag" class="headerlink" title="parseStartTag"></a>parseStartTag</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析开始标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseStartTag</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> start = html.match(startTagOpen)</span><br><span class="line">  <span class="keyword">if</span> (start) &#123;</span><br><span class="line">    <span class="keyword">const</span> match = &#123;</span><br><span class="line">      tagName: start[<span class="number">1</span>],</span><br><span class="line">      attrs: [],</span><br><span class="line">      start: index</span><br><span class="line">    &#125;</span><br><span class="line">    advance(start[<span class="number">0</span>].length)</span><br><span class="line">    <span class="keyword">let</span> end, attr</span><br><span class="line">    <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(attribute))) &#123;</span><br><span class="line">      advance(attr[<span class="number">0</span>].length)</span><br><span class="line">      match.attrs.push(attr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end) &#123;</span><br><span class="line">      match.unarySlash = end[<span class="number">1</span>]</span><br><span class="line">      advance(end[<span class="number">0</span>].length)</span><br><span class="line">      match.end = index</span><br><span class="line">      <span class="keyword">return</span> match</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法使用正则匹配获取HTML开始标签，并且将开始标签中的属性都保存到一个数组中。最终返回标签结果：标签名、标签属性和标签起始结束位置。例如标签为 <code>&lt;button v-on:click=&quot;hey&quot;&gt;</code> 返回结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">" v-on:click='hey'"</span>,</span><br><span class="line">            <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="string">"="</span>,</span><br><span class="line">            <span class="string">"hey"</span>,</span><br><span class="line">            <span class="string">"undefined"</span>,</span><br><span class="line">            <span class="string">"undefined"</span>,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"end"</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">"tagName"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"unarySlash"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="handleStartTag"><a href="#handleStartTag" class="headerlink" title="handleStartTag"></a>handleStartTag</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理开始标签，将开始标签中的属性提取出来。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleStartTag</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagName = match.tagName</span><br><span class="line">  <span class="keyword">const</span> unarySlash = match.unarySlash</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析结束标签</span></span><br><span class="line">  <span class="keyword">if</span> (expectHTML) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastTag === <span class="string">'p'</span> &amp;&amp; isNonPhrasingTag(tagName)) &#123;</span><br><span class="line">      parseEndTag(lastTag)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canBeLeftOpenTag(tagName) &amp;&amp; lastTag === tagName) &#123;</span><br><span class="line">      parseEndTag(tagName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unary = isUnaryTag(tagName) || !!unarySlash</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析开始标签的属性名和属性值</span></span><br><span class="line">  <span class="keyword">const</span> l = match.attrs.length</span><br><span class="line">  <span class="keyword">const</span> attrs = <span class="keyword">new</span> <span class="built_in">Array</span>(l)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = match.attrs[i]</span><br><span class="line">    <span class="comment">// hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778</span></span><br><span class="line">    <span class="keyword">if</span> (IS_REGEX_CAPTURING_BROKEN &amp;&amp; args[<span class="number">0</span>].indexOf(<span class="string">'""'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">3</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">3</span>] &#125;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">4</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">4</span>] &#125;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">5</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">5</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> value = args[<span class="number">3</span>] || args[<span class="number">4</span>] || args[<span class="number">5</span>] || <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> shouldDecodeNewlines = tagName === <span class="string">'a'</span> &amp;&amp; args[<span class="number">1</span>] === <span class="string">'href'</span></span><br><span class="line">      ? options.shouldDecodeNewlinesForHref</span><br><span class="line">      : options.shouldDecodeNewlines</span><br><span class="line">    attrs[i] = &#123;</span><br><span class="line">      name: args[<span class="number">1</span>],</span><br><span class="line">      value: decodeAttr(value, shouldDecodeNewlines)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将标签及其属性推如堆栈中</span></span><br><span class="line">  <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">    stack.push(&#123; <span class="attr">tag</span>: tagName, <span class="attr">lowerCasedTag</span>: tagName.toLowerCase(), <span class="attr">attrs</span>: attrs &#125;)</span><br><span class="line">    lastTag = tagName</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发 options.start 方法。</span></span><br><span class="line">  <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">    options.start(tagName, attrs, unary, match.start, match.end)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于处理开始标签。如果是可以直接结束的标签，直接解析结束标签；然后遍历查找属性的属性值 value 传入数组；将开始标签的标签名、小写标签名、属性值传入堆栈中；将当前标签变为最后标签；最后触发 options.start 方法。<br>最后推入堆栈的数据如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"lowerCasedTag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"hey"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="parseEndTag"><a href="#parseEndTag" class="headerlink" title="parseEndTag"></a>parseEndTag</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析结束TAG</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseEndTag</span> (<span class="params">tagName, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pos, lowerCasedTagName</span><br><span class="line">  <span class="keyword">if</span> (start == <span class="literal">null</span>) start = index</span><br><span class="line">  <span class="keyword">if</span> (end == <span class="literal">null</span>) end = index</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">    lowerCasedTagName = tagName.toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到同类的开始 TAG 在堆栈中的位置</span></span><br><span class="line">  <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">    <span class="keyword">for</span> (pos = stack.length - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; pos--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (stack[pos].lowerCasedTag === lowerCasedTagName) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If no tag name is provided, clean shop</span></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对堆栈中的大于等于 pos 的开始标签使用 options.end 方法。</span></span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Close all the open elements, up the stack</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = stack.length - <span class="number">1</span>; i &gt;= pos; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">        (i &gt; pos || !tagName) &amp;&amp;</span><br><span class="line">        options.warn</span><br><span class="line">      ) &#123;</span><br><span class="line">        options.warn(</span><br><span class="line">          <span class="string">`tag &lt;<span class="subst">$&#123;stack[i].tag&#125;</span>&gt; has no matching end tag.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (options.end) &#123;</span><br><span class="line">        options.end(stack[i].tag, start, end)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the open elements from the stack</span></span><br><span class="line">    <span class="comment">// 从栈中移除元素，并标记为 lastTag</span></span><br><span class="line">    stack.length = pos</span><br><span class="line">    lastTag = pos &amp;&amp; stack[pos - <span class="number">1</span>].tag</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">'br'</span>) &#123;</span><br><span class="line">    <span class="comment">// 回车标签</span></span><br><span class="line">    <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">      options.start(tagName, [], <span class="literal">true</span>, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">'p'</span>) &#123;</span><br><span class="line">    <span class="comment">// 段落标签</span></span><br><span class="line">    <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">      options.start(tagName, [], <span class="literal">false</span>, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.end) &#123;</span><br><span class="line">      options.end(tagName, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析结束标签。先是获取开始结束位置、小写标签名；然后遍历堆栈找到同类开始 TAG 的位置；对找到的 TAG 位置后的所有标签都执行 options.end 方法；将 pos 后的所有标签从堆栈中移除，并修改最后标签为当前堆栈最后一个标签的标签名；如果是br标签，执行 option.start 方法；如果是 p 标签，执行 options.start 和options.end 方法。（最后两个操作让我猜想 start 和 end 方法用于标签的开始和结束行为中。）</p><h1 id="parseHTML-的整体逻辑"><a href="#parseHTML-的整体逻辑" class="headerlink" title="parseHTML 的整体逻辑"></a>parseHTML 的整体逻辑</h1><p>之前所说的 options.start 等方法，其实在 parseHTML 的传参中传入的 start、end、chars、comment 这四个方法，这些方法会在parseHTML 方法特定的地方被使用，而这些方法中的逻辑下一节再讲。<br>这里先来看看在 parseHTML 方法的整体逻辑：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/html-parser.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parseHTML</span> (<span class="params">html, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">const</span> expectHTML = options.expectHTML</span><br><span class="line">  <span class="keyword">const</span> isUnaryTag = options.isUnaryTag || no</span><br><span class="line">  <span class="keyword">const</span> canBeLeftOpenTag = options.canBeLeftOpenTag || no</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> last, lastTag</span><br><span class="line">  <span class="keyword">while</span> (html) &#123;</span><br><span class="line">    last = html</span><br><span class="line">    <span class="comment">// 如果没有lastTag，并确保我们不是在一个纯文本内容元素中：script、style、textarea</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTag || !isPlainTextElement(lastTag)) &#123;</span><br><span class="line">      <span class="comment">// 文本结束，通过&lt;查找。</span></span><br><span class="line">      <span class="keyword">let</span> textEnd = html.indexOf(<span class="string">'&lt;'</span>)</span><br><span class="line">      <span class="comment">// 文本结束位置在第一个字符，即第一个标签为&lt;</span></span><br><span class="line">      <span class="keyword">if</span> (textEnd === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 注释匹配</span></span><br><span class="line">        <span class="keyword">if</span> (comment.test(html)) &#123;</span><br><span class="line">          <span class="keyword">const</span> commentEnd = html.indexOf(<span class="string">'--&gt;'</span>)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (commentEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果需要保留注释，执行 option.comment 方法</span></span><br><span class="line">            <span class="keyword">if</span> (options.shouldKeepComment) &#123;</span><br><span class="line">              options.comment(html.substring(<span class="number">4</span>, commentEnd))</span><br><span class="line">            &#125;</span><br><span class="line">            advance(commentEnd + <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment</span></span><br><span class="line">        <span class="comment">// 条件注释</span></span><br><span class="line">        <span class="keyword">if</span> (conditionalComment.test(html)) &#123;</span><br><span class="line">          <span class="keyword">const</span> conditionalEnd = html.indexOf(<span class="string">']&gt;'</span>)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (conditionalEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            advance(conditionalEnd + <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Doctype:</span></span><br><span class="line">        <span class="keyword">const</span> doctypeMatch = html.match(doctype)</span><br><span class="line">        <span class="keyword">if</span> (doctypeMatch) &#123;</span><br><span class="line">          advance(doctypeMatch[<span class="number">0</span>].length)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End tag: 结束标签</span></span><br><span class="line">        <span class="keyword">const</span> endTagMatch = html.match(endTag)</span><br><span class="line">        <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">          <span class="keyword">const</span> curIndex = index</span><br><span class="line">          advance(endTagMatch[<span class="number">0</span>].length)</span><br><span class="line">          <span class="comment">// 解析结束标签</span></span><br><span class="line">          parseEndTag(endTagMatch[<span class="number">1</span>], curIndex, index)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start tag: 开始标签</span></span><br><span class="line">        <span class="keyword">const</span> startTagMatch = parseStartTag()</span><br><span class="line">        <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">          handleStartTag(startTagMatch)</span><br><span class="line">          <span class="keyword">if</span> (shouldIgnoreFirstNewline(lastTag, html)) &#123;</span><br><span class="line">            advance(<span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// &lt; 标签位置大于等于0，即标签中有内容</span></span><br><span class="line">      <span class="keyword">let</span> text, rest, next</span><br><span class="line">      <span class="keyword">if</span> (textEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 截取从 0 - textEnd 的字符串</span></span><br><span class="line">        rest = html.slice(textEnd)</span><br><span class="line">        <span class="comment">// 获取在普通字符串中的&lt;字符，而不是开始标签、结束标签、注释、条件注释</span></span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">          !endTag.test(rest) &amp;&amp;</span><br><span class="line">          !startTagOpen.test(rest) &amp;&amp;</span><br><span class="line">          !comment.test(rest) &amp;&amp;</span><br><span class="line">          !conditionalComment.test(rest)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// &lt; in plain text, be forgiving and treat it as text</span></span><br><span class="line">          next = rest.indexOf(<span class="string">'&lt;'</span>, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span> (next &lt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">          textEnd += next</span><br><span class="line">          rest = html.slice(textEnd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终截取字符串内容</span></span><br><span class="line">        text = html.substring(<span class="number">0</span>, textEnd)</span><br><span class="line">        advance(textEnd)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (textEnd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        text = html</span><br><span class="line">        html = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 绘制文本内容，使用 options.char 方法。</span></span><br><span class="line">      <span class="keyword">if</span> (options.chars &amp;&amp; text) &#123;</span><br><span class="line">        options.chars(text)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果lastTag 为 script、style、textarea</span></span><br><span class="line">      <span class="keyword">let</span> endTagLength = <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> stackedTag = lastTag.toLowerCase()</span><br><span class="line">      <span class="keyword">const</span> reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'([\\s\\S]*?)(&lt;/'</span> + stackedTag + <span class="string">'[^&gt;]*&gt;)'</span>, <span class="string">'i'</span>))</span><br><span class="line">      <span class="keyword">const</span> rest = html.replace(reStackedTag, <span class="function"><span class="keyword">function</span> (<span class="params">all, text, endTag</span>) </span>&#123;</span><br><span class="line">        endTagLength = endTag.length</span><br><span class="line">        <span class="keyword">if</span> (!isPlainTextElement(stackedTag) &amp;&amp; stackedTag !== <span class="string">'noscript'</span>) &#123;</span><br><span class="line">          text = text</span><br><span class="line">            .replace(<span class="regexp">/&lt;!\--([\s\S]*?)--&gt;/g</span>, <span class="string">'$1'</span>) <span class="comment">// &lt;!--xxx--&gt; </span></span><br><span class="line">            .replace(<span class="regexp">/&lt;!\[CDATA\[([\s\S]*?)]]&gt;/g</span>, <span class="string">'$1'</span>) <span class="comment">//&lt;!CDATAxxx&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldIgnoreFirstNewline(stackedTag, text)) &#123;</span><br><span class="line">          text = text.slice(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理文本内容，并使用 options.char 方法。</span></span><br><span class="line">        <span class="keyword">if</span> (options.chars) &#123;</span><br><span class="line">          options.chars(text)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">      &#125;)</span><br><span class="line">      index += html.length - rest.length</span><br><span class="line">      html = rest</span><br><span class="line">      <span class="comment">// 解析结束tag</span></span><br><span class="line">      parseEndTag(stackedTag, index - endTagLength, index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// html文本到最后</span></span><br><span class="line">    <span class="keyword">if</span> (html === last) &#123;</span><br><span class="line">      <span class="comment">// 执行 options.chars</span></span><br><span class="line">      options.chars &amp;&amp; options.chars(html)</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !stack.length &amp;&amp; options.warn) &#123;</span><br><span class="line">        options.warn(<span class="string">`Mal-formatted tag at end of template: "<span class="subst">$&#123;html&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清理所有残留标签</span></span><br><span class="line">  parseEndTag()</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的解析都写在注释里面了。<br>其实就是利用正则循环处理 html 文本内容，最后使用 advance 方法来截取后一段 html 文本。在解析过程中执行了 options 中的一些方法。<br>下面我们来看看传入的方法都做了些什么？</p><h1 id="parseHTML-传参的几个方法"><a href="#parseHTML-传参的几个方法" class="headerlink" title="parseHTML 传参的几个方法"></a>parseHTML 传参的几个方法</h1><h2 id="warn"><a href="#warn" class="headerlink" title="warn"></a>warn</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/index.js</span></span><br><span class="line">warn = options.warn || baseWarn</span><br></pre></td></tr></table></figure><p>如果options中有 warn 方法，使用该方法。否则调用 baseWarn 方法。</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">start (tag, attrs, unary) &#123;</span><br><span class="line">  <span class="comment">// 确定命名空间</span></span><br><span class="line">  <span class="keyword">const</span> ns = (currentParent &amp;&amp; currentParent.ns) || platformGetTagNamespace(tag)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 IE 的 SVG bug</span></span><br><span class="line">  <span class="keyword">if</span> (isIE &amp;&amp; ns === <span class="string">'svg'</span>) &#123;</span><br><span class="line">    attrs = guardIESVGBug(attrs)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取AST元素</span></span><br><span class="line">  <span class="keyword">let</span> element: ASTElement = createASTElement(tag, attrs, currentParent)</span><br><span class="line">  <span class="keyword">if</span> (ns) &#123;</span><br><span class="line">    element.ns = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isForbiddenTag(element) &amp;&amp; !isServerRendering()) &#123;</span><br><span class="line">    element.forbidden = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历执行 preTransforms 方法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; preTransforms.length; i++) &#123;</span><br><span class="line">    element = preTransforms[i](element, options) || element</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理各种方法</span></span><br><span class="line">  <span class="keyword">if</span> (!inVPre) &#123;</span><br><span class="line">    <span class="comment">// v-pre</span></span><br><span class="line">    processPre(element)</span><br><span class="line">    <span class="keyword">if</span> (element.pre) &#123;</span><br><span class="line">      inVPre = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (platformIsPreTag(element.tag)) &#123;</span><br><span class="line">    inPre = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inVPre) &#123;</span><br><span class="line">    <span class="comment">// 处理原始属性</span></span><br><span class="line">    processRawAttrs(element)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!element.processed) &#123;</span><br><span class="line">    <span class="comment">// v-for v-if v-once</span></span><br><span class="line">    processFor(element)</span><br><span class="line">    processIf(element)</span><br><span class="line">    processOnce(element)</span><br><span class="line">    <span class="comment">// 元素填充？</span></span><br><span class="line">    processElement(element, options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查根节点约束</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkRootConstraints</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.tag === <span class="string">'slot'</span> || el.tag === <span class="string">'template'</span>) &#123;</span><br><span class="line">        warnOnce(</span><br><span class="line">          <span class="string">`Cannot use &lt;<span class="subst">$&#123;el.tag&#125;</span>&gt; as component root element because it may `</span> +</span><br><span class="line">          <span class="string">'contain multiple nodes.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (el.attrsMap.hasOwnProperty(<span class="string">'v-for'</span>)) &#123;</span><br><span class="line">        warnOnce(</span><br><span class="line">          <span class="string">'Cannot use v-for on stateful component root element because '</span> +</span><br><span class="line">          <span class="string">'it renders multiple elements.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 语法树树管理</span></span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="comment">// 无root</span></span><br><span class="line">    root = element</span><br><span class="line">    checkRootConstraints(root)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!stack.length) &#123;</span><br><span class="line">    <span class="comment">// 允许有 v-if, v-else-if 和 v-else 的根元素</span></span><br><span class="line">    <span class="keyword">if</span> (root.if &amp;&amp; (element.elseif || element.else)) &#123;</span><br><span class="line">      checkRootConstraints(element)</span><br><span class="line">      <span class="comment">// 添加 if 条件</span></span><br><span class="line">      addIfCondition(root, &#123;</span><br><span class="line">        exp: element.elseif,</span><br><span class="line">        block: element</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warnOnce(</span><br><span class="line">        <span class="string">`Component template should contain exactly one root element. `</span> +</span><br><span class="line">        <span class="string">`If you are using v-if on multiple elements, `</span> +</span><br><span class="line">        <span class="string">`use v-else-if to chain them instead.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (currentParent &amp;&amp; !element.forbidden) &#123;</span><br><span class="line">    <span class="comment">// v-else-if v-else</span></span><br><span class="line">    <span class="keyword">if</span> (element.elseif || element.else) &#123;</span><br><span class="line">      <span class="comment">// 处理 if 条件</span></span><br><span class="line">      processIfConditions(element, currentParent)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.slotScope) &#123; <span class="comment">// slot-scope</span></span><br><span class="line">      currentParent.plain = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">const</span> name = element.slotTarget || <span class="string">'"default"'</span></span><br><span class="line">      ;(currentParent.scopedSlots || (currentParent.scopedSlots = &#123;&#125;))[name] = element</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将元素插入 children 数组中</span></span><br><span class="line">      currentParent.children.push(element)</span><br><span class="line">      element.parent = currentParent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">    currentParent = element</span><br><span class="line">    stack.push(element)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭元素</span></span><br><span class="line">    closeElement(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其实start方法就是处理 element 元素的过程。确定命名空间；创建AST元素 element；执行预处理；定义root；处理各类 v- 标签的逻辑；最后更新 root、currentParent、stack 的结果。<br>其中关键点在于 createASTElement 方法。可以看到该方法传递了 tag、attrs和currentParent。其中前两个参数是不是很熟悉？就是我们在 parseHTML 的 handleStartTag 方法中传给堆栈数组中的数据对象。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"lowerCasedTag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"hey"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终通过 createASTElement 方法定义了一个新的 AST 对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AST元素</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  attrs: Array&lt;Attr&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent: ASTElement | void</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="number">1</span>,</span><br><span class="line">    tag,</span><br><span class="line">    attrsList: attrs,</span><br><span class="line">    attrsMap: makeAttrsMap(attrs),</span><br><span class="line">    parent,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">end () &#123;</span><br><span class="line">  <span class="comment">// 删除尾随空格</span></span><br><span class="line">  <span class="keyword">const</span> element = stack[stack.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> lastNode = element.children[element.children.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (lastNode &amp;&amp; lastNode.type === <span class="number">3</span> &amp;&amp; lastNode.text === <span class="string">' '</span> &amp;&amp; !inPre) &#123;</span><br><span class="line">    element.children.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 退栈</span></span><br><span class="line">  stack.length -= <span class="number">1</span></span><br><span class="line">  currentParent = stack[stack.length - <span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 关闭元素</span></span><br><span class="line">  closeElement(element)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>end方法就很简单了，就是一个清理结束的过程。<br>从这里可以看到，stack中存的是个有序的数组，数组最后一个值永远是父级元素；currentParent表示当前的父级元素。其实也很好理解，收集HTML元素的时候是从最外层元素向内收集的，处理HTML内容的时候是从最内部元素向外处理的。所以，当最内部元素处理完后，将元素从对线中移除，开始处理当前最内部的元素。</p><h2 id="chars"><a href="#chars" class="headerlink" title="chars"></a>chars</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">chars (text: string) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!currentParent) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// IE textarea placeholder bug</span></span><br><span class="line">  <span class="keyword">if</span> (isIE &amp;&amp;</span><br><span class="line">    currentParent.tag === <span class="string">'textarea'</span> &amp;&amp;</span><br><span class="line">    currentParent.attrsMap.placeholder === text</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取元素 children</span></span><br><span class="line">  <span class="keyword">const</span> children = currentParent.children</span><br><span class="line">  <span class="comment">// 获取文本内容</span></span><br><span class="line">  text = inPre || text.trim()</span><br><span class="line">    ? isTextTag(currentParent) ? text : decodeHTMLCached(text)</span><br><span class="line">    <span class="comment">// only preserve whitespace if its not right after a starting tag</span></span><br><span class="line">    : preserveWhitespace &amp;&amp; children.length ? <span class="string">' '</span> : <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (text) &#123;</span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="comment">// inVPre 是判断 v-pre 的</span></span><br><span class="line">    <span class="keyword">if</span> (!inVPre &amp;&amp; text !== <span class="string">' '</span> &amp;&amp; (res = parseText(text, delimiters))) &#123;</span><br><span class="line">      <span class="comment">// 表达式，会转为 _s(message) 表达式</span></span><br><span class="line">      children.push(&#123;</span><br><span class="line">        type: <span class="number">2</span>,</span><br><span class="line">        expression: res.expression,</span><br><span class="line">        tokens: res.tokens,</span><br><span class="line">        text</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text !== <span class="string">' '</span> || !children.length || children[children.length - <span class="number">1</span>].text !== <span class="string">' '</span>) &#123;</span><br><span class="line">      <span class="comment">// 纯文本内容</span></span><br><span class="line">      children.push(&#123;</span><br><span class="line">        type: <span class="number">3</span>,</span><br><span class="line">        text</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>chars方法用来处理非HTML标签的文本。如果是表达式，通过 parseText 方法解析文本内容并传递给当前元素的 children；如果是普通文本直接传递给当前元素的 children。</p><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">comment (text: string) &#123;</span><br><span class="line">  currentParent.children.push(&#123;</span><br><span class="line">    type: <span class="number">3</span>,</span><br><span class="line">    text,</span><br><span class="line">    isComment: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>comment方法用来保存需要保存在语法树中的注释。它与保存普通文本类似，只是多了 <code>isComment: true</code>。</p><h1 id="生成语法树"><a href="#生成语法树" class="headerlink" title="生成语法树"></a>生成语法树</h1><p>我这里写了个demo，并且抓取了AST元素最后生成结果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hey<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- this is vue parse demo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"hey"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">"Hey Vue.js"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                hey() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.message = <span class="string">"Hey Button"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/1987062-d7068bf059b179ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AST对象"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后整理理一下思路:</p><ul><li>parseHTML 中的方法用于处理HTML开始和结束标签。</li><li>parseHTML 方法的整体逻辑是用正则判断各种情况，进行不同的处理。其中调用到了 options 中的自定义方法。</li><li>options 中的自定义方法用于处理AST语法树，最终返回出整个AST语法树对象。</li></ul><p>可以这么说，parseHTML 方法中仅仅是使用正则解析 HTML 的行为，options 中的方法则用于自定义方法和处理 AST 语法树对象。</p><p>OK！HTML的解析部分就讲解完啦~配合着之前的那篇<a href="https://www.jianshu.com/p/0734cc319aa3" target="_blank" rel="noopener">学习Vue中那些正则表达式</a>，顺着我的思路，相信一定可以顺利GET解析过程的。</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从上一篇博客中，我们知道了template编译的整体逻辑和template编译后用在了哪里。本文着重讲下HTML的解析过程。&lt;/p&gt;
&lt;h1 id=&quot;parse-方法&quot;&gt;&lt;a href=&quot;#parse-方法&quot; class=&quot;headerlink&quot; title=&quot;parse 
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习七 —— template 解析过程学习</title>
    <link href="https://violetjack.github.io/2018/03/04/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%20%E2%80%94%E2%80%94%20template%20%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/03/04/Vue.js源码学习七 —— template 解析过程学习/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-07T02:02:05.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这次，来学习下Vue是如何解析HTML代码的。</p></blockquote><h1 id="template-解析用在哪"><a href="#template-解析用在哪" class="headerlink" title="template 解析用在哪"></a>template 解析用在哪</h1><p>从之前学习 Render 的过程中我们知道，template 的编译在 <code>$mount</code> 方法中出现过。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/entry-runtime-with-compiler.js</span></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          <span class="comment">// 首字母为#号，看作是ID。</span></span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        <span class="comment">// 为真实 DOM，直接获取html</span></span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      <span class="comment">// 获取 HTML</span></span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">// 进行编译并赋值给 vm.$options</span></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>)</span><br><span class="line">      <span class="comment">// 渲染函数</span></span><br><span class="line">      options.render = render</span><br><span class="line">      <span class="comment">// 静态渲染方法</span></span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实以上代码总结起来就4步：</p><ol><li>获取el元素。</li><li>判断el是否为body或者html。</li><li>为$options编译render函数。</li><li>执行之前的mount函数。</li></ol><p>关键在于第三步，编译 render 函数上。先获取 template，即获取HTML内容，然后执行 compileToFunctions 来编译，最后将 render 和 staticRenderFns 传给 vm.$options 对象。<br>顺便看看这两个方法都用在哪里？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render-helpers/render-static.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderStatic</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  index: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  isInFor: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cached = <span class="keyword">this</span>._staticTrees || (<span class="keyword">this</span>._staticTrees = [])</span><br><span class="line">  <span class="keyword">let</span> tree = cached[index]</span><br><span class="line">  <span class="keyword">if</span> (tree &amp;&amp; !isInFor) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// otherwise, render a fresh tree.</span></span><br><span class="line">  tree = cached[index] = <span class="keyword">this</span>.$options.staticRenderFns[index].call(</span><br><span class="line">    <span class="keyword">this</span>._renderProxy,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">this</span> </span><br><span class="line">  )</span><br><span class="line">  markStatic(tree, <span class="string">`__static__<span class="subst">$&#123;index&#125;</span>`</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，template 编译生成的方法都用在了渲染行为中。</p><h1 id="编译-template-的整体逻辑"><a href="#编译-template-的整体逻辑" class="headerlink" title="编译 template 的整体逻辑"></a>编译 template 的整体逻辑</h1><p>下面我们顺着编译代码往下找。在 mount 方法中执行了 <code>compileToFunctions</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">  shouldDecodeNewlines,</span><br><span class="line">  shouldDecodeNewlinesForHref,</span><br><span class="line"> delimiters: options.delimiters,</span><br><span class="line"> comments: options.comments</span><br><span class="line">&#125;, <span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></p><p>找到方法的所在之处：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/compiler/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; compile, compileToFunctions &#125; = createCompiler(baseOptions)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCompiler = createCompilerCreator(<span class="function"><span class="keyword">function</span> <span class="title">baseCompile</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">CompiledResult</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将template转为AST语法树对象</span></span><br><span class="line">  <span class="keyword">const</span> ast = parse(template.trim(), options)</span><br><span class="line">  <span class="keyword">if</span> (options.optimize !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 优化</span></span><br><span class="line">    optimize(ast, options)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成渲染代码</span></span><br><span class="line">  <span class="keyword">const</span> code = generate(ast, options)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ast,</span><br><span class="line">    render: code.render,</span><br><span class="line">    staticRenderFns: code.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>先看里面的 baseCompile 方法，其作用为将 HTML 字符串转为 AST 抽象语法树对象，并进行优化，最后生成渲染代码。返回值中 render 为渲染字符串，staticRenderFns 为渲染字符串数组。<br>之后再来看看 createCompilerCreator 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/create-compiler.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompilerCreator</span> (<span class="params">baseCompile: Function</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompiler</span> (<span class="params">baseOptions: CompilerOptions</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compile</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">      options?: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>): <span class="title">CompiledResult</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> finalOptions = <span class="built_in">Object</span>.create(baseOptions)</span><br><span class="line">      <span class="keyword">const</span> errors = []</span><br><span class="line">      <span class="keyword">const</span> tips = []</span><br><span class="line">      finalOptions.warn = <span class="function">(<span class="params">msg, tip</span>) =&gt;</span> &#123;</span><br><span class="line">        (tip ? tips : errors).push(msg)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (options) &#123;</span><br><span class="line">        <span class="comment">// merge custom modules</span></span><br><span class="line">        <span class="keyword">if</span> (options.modules) &#123;</span><br><span class="line">          finalOptions.modules =</span><br><span class="line">            (baseOptions.modules || []).concat(options.modules)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// merge custom directives</span></span><br><span class="line">        <span class="keyword">if</span> (options.directives) &#123;</span><br><span class="line">          finalOptions.directives = extend(</span><br><span class="line">            <span class="built_in">Object</span>.create(baseOptions.directives || <span class="literal">null</span>),</span><br><span class="line">            options.directives</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// copy other options</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">          <span class="keyword">if</span> (key !== <span class="string">'modules'</span> &amp;&amp; key !== <span class="string">'directives'</span>) &#123;</span><br><span class="line">            finalOptions[key] = options[key]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 执行传入的编译方法，并返回结果对象</span></span><br><span class="line">      <span class="keyword">const</span> compiled = baseCompile(template, finalOptions)</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        errors.push.apply(errors, detectErrors(compiled.ast))</span><br><span class="line">      &#125;</span><br><span class="line">      compiled.errors = errors</span><br><span class="line">      compiled.tips = tips</span><br><span class="line">      <span class="keyword">return</span> compiled</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      compile,</span><br><span class="line">      compileToFunctions: createCompileToFunctionFn(compile)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>来看 compile 方法：合并 option 配置参数，然后执行外部传入的 baseCompile 方法，返回方法执行的返回结果。最终返回 <code>{ compile, compileToFunctions }</code>，<br>createCompileToFunctionFn 代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompileToFunctionFn</span> (<span class="params">compile: Function</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义缓存</span></span><br><span class="line">  <span class="keyword">const</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToFunctions</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">    options?: CompilerOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">CompiledFunctionResult</span> </span>&#123;</span><br><span class="line">    options = extend(&#123;&#125;, options)</span><br><span class="line">    <span class="keyword">const</span> warn = options.warn || baseWarn</span><br><span class="line">    <span class="keyword">delete</span> options.warn</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确认缓存，有缓存直接返回</span></span><br><span class="line">    <span class="keyword">const</span> key = options.delimiters</span><br><span class="line">      ? <span class="built_in">String</span>(options.delimiters) + template</span><br><span class="line">      : template</span><br><span class="line">    <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compile</span></span><br><span class="line">    <span class="keyword">const</span> compiled = compile(template, options)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// turn code into functions</span></span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> fnGenErrors = []</span><br><span class="line">    <span class="comment">// 生成 render 和 staticRenderFns 方法</span></span><br><span class="line">    res.render = createFunction(compiled.render, fnGenErrors)</span><br><span class="line">    res.staticRenderFns = compiled.staticRenderFns.map(<span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> createFunction(code, fnGenErrors)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 返回方法并缓存</span></span><br><span class="line">    <span class="keyword">return</span> (cache[key] = res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就找到了我们在 mount 方法中看到的 render 和 staticRenderFns 方法了。createCompileToFunctionFn 方法其实就是将传入的 render 和 staticRenderFns 字符串转为真实方法。</p><p>至此，捋一下思路：<br>template的编译用于render渲染行为中，所以template最后生成渲染函数。<br>template 的解析过程中</p><ul><li>通过 baseCompile 方法进行编译；</li><li>通过 createCompilerCreator 中的 compile 方法合并配置参数并返回 baseCompile 方法执行结果；</li><li>createCompilerCreator 返回 compile 方法和 compileToFunctions 方法；</li><li>compileToFunctions 方法用于将方法字符串生成真实方法。</li></ul><p>其实 <code>const { compile, compileToFunctions } = createCompiler(baseOptions)</code> 就是 createCompilerCreator 的返回结果。所以，在 mount 中使用的 compileToFunctions 方法就是 createCompileToFunctionFn 方法生成的。</p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-61c14118fb4d28d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="逻辑图"></p><h1 id="baseCompile"><a href="#baseCompile" class="headerlink" title="baseCompile"></a>baseCompile</h1><p>整体思路滤清了，来看看关键的 baseCompile 方法。该方法进行了三步操作：</p><ul><li>parse 将HTML解析为 AST 元素。</li><li>optimize 渲染优化。</li><li>generate 解析成基本的 render 函数。</li></ul><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>先来讲讲AST抽象语法树。维基百科的解释是：</p><blockquote><p>在计算机科学中，抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。</p></blockquote><p>parse 方法的最终目的就是将 template 解析为 AST 元素对象。在 parse 解析方法中，用到了大量的正则。正则的具体用法之前写过一篇文章：<a href="https://www.jianshu.com/p/0734cc319aa3" target="_blank" rel="noopener">一起来理解正则表达式</a>。代码量很多，考虑了各种解析的情况。这里不赘述太多，找一条主线来学习，其他内容我将在<a href="https://github.com/violetjack/VueStudyDemos/tree/master/VueCodes/vue" target="_blank" rel="noopener">项目</a>中注释。</p><p>来看看 parse 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义了各种参数和方法</span></span><br><span class="line">  parseHTML(template, &#123;</span><br><span class="line">    warn,</span><br><span class="line">    expectHTML: options.expectHTML,</span><br><span class="line">    isUnaryTag: options.isUnaryTag,</span><br><span class="line">    canBeLeftOpenTag: options.canBeLeftOpenTag,</span><br><span class="line">    shouldDecodeNewlines: options.shouldDecodeNewlines,</span><br><span class="line">    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,</span><br><span class="line">    shouldKeepComment: options.comments,</span><br><span class="line">    start (tag, attrs, unary) &#123;&#125;,</span><br><span class="line">    end () &#123;&#125;</span><br><span class="line">    chars (text: string) &#123;&#125;,</span><br><span class="line">    comment (text: string) &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上 parse 就是 parseHTML 的过程，最后返回AST元素对象。其中，传入的 options 配置对象中，start、end、chars、comment方法都会在 parseHTML 方法中用到。其实类似于生命周期钩子，在某个阶段执行。<br>parseHTML 方法是正则解析HTML的过程，这部分我将在之后的博客中单独说下，也可以看项目的注释，将不定时更新项目注释。</p><h2 id="optimize"><a href="#optimize" class="headerlink" title="optimize"></a>optimize</h2><p>该方法只是做了些标记静态节点的行为，目的是为了在重新渲染时不重复渲染静态节点，以达到性能优化的目的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">optimize</span> (<span class="params">root: ?ASTElement, options: CompilerOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span></span><br><span class="line">  isStaticKey = genStaticKeysCached(options.staticKeys || <span class="string">''</span>)</span><br><span class="line">  isPlatformReservedTag = options.isReservedTag || no</span><br><span class="line">  <span class="comment">// 标记所有非静态节点</span></span><br><span class="line">  markStatic(root)</span><br><span class="line">  <span class="comment">// 标记静态根节点</span></span><br><span class="line">  markStaticRoots(root, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>generate 方法用于将 AST 元素生成 render 渲染字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  ast: ASTElement | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">CodegenResult</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="keyword">new</span> CodegenState(options)</span><br><span class="line">  <span class="keyword">const</span> code = ast ? genElement(ast, state) : <span class="string">'_c("div")'</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    render: <span class="string">`with(this)&#123;return <span class="subst">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class="line">    staticRenderFns: state.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后生成如下这样的渲染字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with(this)&#123;return _c(&apos;div&apos;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&apos;button&apos;,&#123;on:&#123;&quot;click&quot;:hey&#125;&#125;,[_v(_s(message))])])&#125;</span><br></pre></td></tr></table></figure></p><p>其中的 _c _v _s 等方法在哪里呢~这个我们之前说起过:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line"><span class="comment">// 创建vnode元素</span></span><br><span class="line">vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// src/core/instance/render-helper/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">installRenderHelpers</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">  target._o = markOnce</span><br><span class="line">  target._n = toNumber</span><br><span class="line">  target._s = toString</span><br><span class="line">  target._l = renderList</span><br><span class="line">  target._t = renderSlot</span><br><span class="line">  target._q = looseEqual</span><br><span class="line">  target._i = looseIndexOf</span><br><span class="line">  target._m = renderStatic</span><br><span class="line">  target._f = resolveFilter</span><br><span class="line">  target._k = checkKeyCodes</span><br><span class="line">  target._b = bindObjectProps</span><br><span class="line">  target._v = createTextVNode</span><br><span class="line">  target._e = createEmptyVNode</span><br><span class="line">  target._u = resolveScopedSlots</span><br><span class="line">  target._g = bindObjectListeners</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其实template部分真的内容展开超级多，之后会展开细说。原本计划大前天就把博客写出来的，结果看代码看着看着绕进去了。所以，还是那句话，看代码得抓住主线，带着问题去看，不要在意细枝末节。<br>这也算是我的经验教训了，以后每次看代码，牢记待着明确的问题去看去解决。想一次看懂整个项目的代码是不可行的。<br>下期预告，parseHTML 细节解析</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这次，来学习下Vue是如何解析HTML代码的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;template-解析用在哪&quot;&gt;&lt;a href=&quot;#template-解析用在哪&quot; class=&quot;headerlink&quot; title=&quot;templa
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习六 —— VNode虚拟DOM学习</title>
    <link href="https://violetjack.github.io/2018/02/22/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%20%E2%80%94%E2%80%94%20VNode%E8%99%9A%E6%8B%9FDOM%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/22/Vue.js源码学习六 —— VNode虚拟DOM学习/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初六和家人出去玩，没写完博客。跳票了~</p></blockquote><p>所谓虚拟DOM，是一个用于表示真实 DOM 结构和属性的 JavaScript 对象，这个对象用于对比虚拟 DOM 和当前真实 DOM 的差异化，然后进行局部渲染从而实现性能上的优化。在Vue.js 中虚拟 DOM 的 JavaScript 对象就是 VNode。<br>接下来我们一步步分析：</p><h1 id="VNode-是什么？"><a href="#VNode-是什么？" class="headerlink" title="VNode 是什么？"></a>VNode 是什么？</h1><hr><p>既然是虚拟 DOM 的作用是转为真实的 DOM，那这就是一个渲染的过程。所以我们看看 render 方法。在之前的学习中我们知道了，vue 的渲染函数 <code>_render</code> 方法返回的就是一个 VNode 对象。而在 <code>initRender</code> 初始化渲染的方法中定义的 <code>vm._c</code> 和 <code>vm.$createElement</code> 方法中，<code>createElement</code> 最终也是返回 VNode 对象。所以 VNode 是渲染的关键所在。<br>话不多说，来看看这个VNode为何方神圣。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/vnode.js</span><br><span class="line">export default class VNode &#123;</span><br><span class="line">  tag: string | void;</span><br><span class="line">  data: VNodeData | void;</span><br><span class="line">  children: ?Array&lt;VNode&gt;;</span><br><span class="line">  text: string | void;</span><br><span class="line">  elm: Node | void;</span><br><span class="line">  ns: string | void;</span><br><span class="line">  context: Component | void; // rendered in this component&apos;s scope</span><br><span class="line">  key: string | number | void;</span><br><span class="line">  componentOptions: VNodeComponentOptions | void;</span><br><span class="line">  componentInstance: Component | void; // component instance</span><br><span class="line">  parent: VNode | void; // component placeholder node</span><br><span class="line"></span><br><span class="line">  // strictly internal</span><br><span class="line">  raw: boolean; // contains raw HTML? (server only)</span><br><span class="line">  isStatic: boolean; // hoisted static node</span><br><span class="line">  isRootInsert: boolean; // necessary for enter transition check</span><br><span class="line">  isComment: boolean; // empty comment placeholder?</span><br><span class="line">  isCloned: boolean; // is a cloned node?</span><br><span class="line">  isOnce: boolean; // is a v-once node?</span><br><span class="line">  asyncFactory: Function | void; // async component factory function</span><br><span class="line">  asyncMeta: Object | void;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: Object | void;</span><br><span class="line">  fnContext: Component | void; // real context vm for functional nodes</span><br><span class="line">  fnOptions: ?ComponentOptions; // for SSR caching</span><br><span class="line">  fnScopeId: ?string; // functioanl scope id support</span><br><span class="line"></span><br><span class="line">  constructor (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    this.tag = tag // 当前节点标签名</span><br><span class="line">    this.data = data // 当前节点数据（VNodeData类型）</span><br><span class="line">    this.children = children // 当前节点子节点</span><br><span class="line">    this.text = text // 当前节点文本</span><br><span class="line">    this.elm = elm // 当前节点对应的真实DOM节点</span><br><span class="line">    this.ns = undefined // 当前节点命名空间</span><br><span class="line">    this.context = context // 当前节点上下文</span><br><span class="line">    this.fnContext = undefined // 函数化组件上下文</span><br><span class="line">    this.fnOptions = undefined // 函数化组件配置项</span><br><span class="line">    this.fnScopeId = undefined // 函数化组件ScopeId</span><br><span class="line">    this.key = data &amp;&amp; data.key // 子节点key属性</span><br><span class="line">    this.componentOptions = componentOptions // 组件配置项 </span><br><span class="line">    this.componentInstance = undefined // 组件实例</span><br><span class="line">    this.parent = undefined // 当前节点父节点</span><br><span class="line">    this.raw = false // 是否为原生HTML或只是普通文本</span><br><span class="line">    this.isStatic = false // 静态节点标志 keep-alive</span><br><span class="line">    this.isRootInsert = true // 是否作为根节点插入</span><br><span class="line">    this.isComment = false // 是否为注释节点</span><br><span class="line">    this.isCloned = false // 是否为克隆节点</span><br><span class="line">    this.isOnce = false // 是否为v-once节点</span><br><span class="line">    this.asyncFactory = asyncFactory // 异步工厂方法 </span><br><span class="line">    this.asyncMeta = undefined // 异步Meta</span><br><span class="line">    this.isAsyncPlaceholder = false // 是否为异步占位</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 容器实例向后兼容的别名</span><br><span class="line">  get child (): Component | void &#123;</span><br><span class="line">    return this.componentInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是一个普通的 JavaScript Class 类，中间有各种数据用于描述虚拟 DOM，下面用一个例子来看看VNode 是如何表现 DOM 的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item of list"</span> <span class="attr">class</span>=<span class="string">"item-cls"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">'hello Vue.js'</span>,</span></span><br><span class="line"><span class="javascript">            list: [<span class="string">'jack'</span>, <span class="string">'rose'</span>, <span class="string">'james'</span>]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个例子最终结果如图：<img src="http://upload-images.jianshu.io/upload_images/1987062-fa2929532dc88449.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTML显示结果"><br>简化后的VNode对象结果如图：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"div"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"attr"</span>: &#123; <span class="attr">"id"</span>: <span class="string">"app"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"span"</span>,</span><br><span class="line">            <span class="attr">"children"</span>: [</span><br><span class="line">                &#123; <span class="attr">"text"</span>: <span class="string">"hello Vue.js"</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"ul"</span>,</span><br><span class="line">            <span class="attr">"children"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"jack"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"rose"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"james"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"context"</span>: <span class="string">"$Vue$3"</span>,</span><br><span class="line">    <span class="attr">"elm"</span>: <span class="string">"div#app"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看VNode的时候小结以下几点：</p><ul><li>所有对象的 <code>context</code> 选项都指向了 Vue 实例。</li><li><code>elm</code> 属性则指向了其相对应的真实 DOM 节点。</li><li>DOM 中的文本内容被当做了一个只有 <code>text</code> 没有 <code>tag</code> 的节点。</li><li>像 class、id 等HTML属性都放在了 <code>data</code> 中</li></ul><p>我们了解了VNode 是如何描述 DOM 之后，来学习如何将虚拟<br> DOM 变为真实的 DOM。</p><h1 id="patch-——-Virtual-DOM-的核心"><a href="#patch-——-Virtual-DOM-的核心" class="headerlink" title="patch —— Virtual DOM 的核心"></a>patch —— Virtual DOM 的核心</h1><hr><p>从之前的文章中可以知道，Vue的渲染过程（无论是初始化视图还是更新视图）最终都将走到 <code>_update</code> 方法中，再来看看这个 <code>_update</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">    callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">  <span class="keyword">const</span> prevActiveInstance = activeInstance</span><br><span class="line">  activeInstance = vm</span><br><span class="line">  vm._vnode = vnode</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// 初始化渲染</span></span><br><span class="line">    vm.$el = vm.__patch__(</span><br><span class="line">      vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>,</span><br><span class="line">      vm.$options._parentElm,</span><br><span class="line">      vm.$options._refElm</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// no need for the ref nodes after initial patch</span></span><br><span class="line">    <span class="comment">// this prevents keeping a detached DOM tree in memory (#5851)</span></span><br><span class="line">    vm.$options._parentElm = vm.$options._refElm = <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新渲染</span></span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  activeInstance = prevActiveInstance</span><br><span class="line">  <span class="comment">// update __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">    prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = vm</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if parent is an HOC, update its $el as well</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">    vm.$parent.$el = vm.$el</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class="line">  <span class="comment">// updated in a parent's updated hook.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现更新试图都是使用了 <code>vm.__patch__</code> 方法，我们继续往下跟。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/runtime/index.js</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br></pre></td></tr></table></figure></p><p>这里啰嗦一句，要找vue的全局方法，如 <code>vm.aaa</code> ,直接查找 <code>Vue.prototype.aaa</code> 即可。<br>继续找下去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// src/platforms/web/runtime/patch.js</span><br><span class="line">export const patch: Function = createPatchFunction(&#123; nodeOps, modules &#125;)</span><br></pre></td></tr></table></figure></p><p>找到 <code>createPatchFunction</code> 方法~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/patch.js</span><br><span class="line">export function createPatchFunction (backend) &#123;</span><br><span class="line">  ……</span><br><span class="line">  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) &#123;</span><br><span class="line">    // 当前 VNode 未定义、老的 VNode 定义了，调用销毁钩子。</span><br><span class="line">    if (isUndef(vnode)) &#123;</span><br><span class="line">      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let isInitialPatch = false</span><br><span class="line">    const insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">    if (isUndef(oldVnode)) &#123;</span><br><span class="line">      // 老的 VNode 未定义，初始化。</span><br><span class="line">      isInitialPatch = true</span><br><span class="line">      createElm(vnode, insertedVnodeQueue, parentElm, refElm)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 当前 VNode 和老 VNode 都定义了，执行更新操作</span><br><span class="line">      // DOM 的 nodeType http://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span><br><span class="line">      const isRealElement = isDef(oldVnode.nodeType) // 是否为真实 DOM 元素</span><br><span class="line">      if (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">        // patch existing root node</span><br><span class="line">        // 修改已有根节点</span><br><span class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 已有真实 DOM 元素，处理 oldVnode</span><br><span class="line">        if (isRealElement) &#123;</span><br><span class="line">          // 挂载一个真实元素，确认是否为服务器渲染环境或者是否可以执行成功的合并到真实 DOM 中</span><br><span class="line">          if (oldVnode.nodeType === 1 &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123;</span><br><span class="line">            oldVnode.removeAttribute(SSR_ATTR)</span><br><span class="line">            hydrating = true</span><br><span class="line">          &#125;</span><br><span class="line">          if (isTrue(hydrating)) &#123;</span><br><span class="line">            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">              // 调用 insert 钩子</span><br><span class="line">              // inserted：被绑定元素插入父节点时调用 </span><br><span class="line">              invokeInsertHook(vnode, insertedVnodeQueue, true)</span><br><span class="line">              return oldVnode</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          // 不是服务器渲染或者合并到真实 DOM 失败，创建一个空节点替换原有节点</span><br><span class="line">          oldVnode = emptyNodeAt(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 替换已有元素</span><br><span class="line">        const oldElm = oldVnode.elm</span><br><span class="line">        const parentElm = nodeOps.parentNode(oldElm)</span><br><span class="line"></span><br><span class="line">        // 创建新节点</span><br><span class="line">        createElm(</span><br><span class="line">          vnode,</span><br><span class="line">          insertedVnodeQueue,</span><br><span class="line">          oldElm._leaveCb ? null : parentElm,</span><br><span class="line">          nodeOps.nextSibling(oldElm)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        // 递归更新父级占位节点元素，</span><br><span class="line">        if (isDef(vnode.parent)) &#123;</span><br><span class="line">          let ancestor = vnode.parent</span><br><span class="line">          const patchable = isPatchable(vnode)</span><br><span class="line">          while (ancestor) &#123;</span><br><span class="line">            for (let i = 0; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">              cbs.destroy[i](ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor.elm = vnode.elm</span><br><span class="line">            if (patchable) &#123;</span><br><span class="line">              for (let i = 0; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">                cbs.create[i](emptyNode, ancestor)</span><br><span class="line">              &#125;</span><br><span class="line">              const insert = ancestor.data.hook.insert</span><br><span class="line">              if (insert.merged) &#123;</span><br><span class="line">                for (let i = 1; i &lt; insert.fns.length; i++) &#123;</span><br><span class="line">                  insert.fns[i]()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              registerRef(ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor = ancestor.parent</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 销毁旧节点</span><br><span class="line">        if (isDef(parentElm)) &#123;</span><br><span class="line">          removeVnodes(parentElm, [oldVnode], 0, 0)</span><br><span class="line">        &#125; else if (isDef(oldVnode.tag)) &#123;</span><br><span class="line">          invokeDestroyHook(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 调用 insert 钩子</span><br><span class="line">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">    return vnode.elm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体解析看代码注释~抛开调用生命周期钩子和销毁就节点不谈，我们发现代码中的关键在于 <code>createElm</code> 和 <code>patchVnode</code> 方法。</p><h2 id="createElm"><a href="#createElm" class="headerlink" title="createElm"></a>createElm</h2><p>先看 <code>createElm</code> 方法，这个方法创建了真实 DOM 元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function createElm (</span><br><span class="line">  vnode,</span><br><span class="line">  insertedVnodeQueue,</span><br><span class="line">  parentElm,</span><br><span class="line">  refElm,</span><br><span class="line">  nested,</span><br><span class="line">  ownerArray,</span><br><span class="line">  index</span><br><span class="line">) &#123;</span><br><span class="line">  if (isDef(vnode.elm) &amp;&amp; isDef(ownerArray)) &#123;</span><br><span class="line">    vnode = ownerArray[index] = cloneVNode(vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode.isRootInsert = !nested // for transition enter check</span><br><span class="line">  // 创建组件</span><br><span class="line">  if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const data = vnode.data</span><br><span class="line">  const children = vnode.children</span><br><span class="line">  const tag = vnode.tag</span><br><span class="line">  if (isDef(tag)) &#123;</span><br><span class="line">    vnode.elm = vnode.ns</span><br><span class="line">      ? nodeOps.createElementNS(vnode.ns, tag)</span><br><span class="line">      : nodeOps.createElement(tag, vnode)</span><br><span class="line">    setScope(vnode)</span><br><span class="line"></span><br><span class="line">    createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">    if (isDef(data)) &#123;</span><br><span class="line">      invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">    &#125;</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125; else if (isTrue(vnode.isComment)) &#123;</span><br><span class="line">    vnode.elm = nodeOps.createComment(vnode.text)</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    vnode.elm = nodeOps.createTextNode(vnode.text)</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点关注代码中的方法执行。代码太多，就不贴出来了，简单说说用途。</p><ul><li><code>cloneVNode</code> 用于克隆当前 vnode 对象。</li><li><code>createComponent</code> 用于创建组件，在调用了组件初始化钩子之后，初始化组件，并且重新激活组件。在重新激活组件中使用 <code>insert</code> 方法操作 DOM。</li><li><code>nodeOps.createElementNS</code> 和 <code>nodeOps.createElement</code> 方法，其实是真实 DOM 的方法。</li><li><code>setScope</code> 用于为 scoped CSS 设置作用域 ID 属性</li><li><code>createChildren</code> 用于创建子节点，如果子节点是数组，则遍历执行 <code>createElm</code> 方法，如果子节点的 text 属性有数据，则使用 <code>nodeOps.appendChild(...)</code> 在真实 DOM 中插入文本内容。</li><li><code>insert</code> 用于将元素插入真实 DOM 中。</li></ul><p>所以，这里的 <code>nodeOps</code> 指的肯定就是真实的 DOM 节点了。最终，这些所有的方法都调用了 <code>nodeOps</code> 中的方法来操作 DOM 元素。</p><blockquote><p>这里顺便科普下 DOM 的<a href="http://www.w3school.com.cn/jsref/dom_obj_all.asp" target="_blank" rel="noopener">属性和方法</a>。下面把源码中用到的几个方法列出来便于学习：</p><ul><li>appendChild: 向元素添加新的子节点，作为最后一个子节点。</li><li>insertBefore: 在指定的已有的子节点之前插入新节点。</li><li>tagName: 返回元素的标签名。</li><li>removeChild: 从元素中移除子节点。</li><li>createElementNS: 创建带有指定命名空间的元素节点。</li><li>createElement: 创建元素节点。</li><li>createComment: 创建注释节点。</li><li>createTextNode: 创建文本节点。</li><li>setAttribute: 把指定属性设置或更改为指定值。</li><li>nextSibling: 返回位于相同节点树层级的下一个节点。</li><li>parentNode: 返回元素父节点。</li><li>setTextContent: 获取文本内容（这个未在w3school中找到，不过应该就是这个意思了）。</li></ul></blockquote><p>OK，知道以上方法就比较好理解了，<code>createElm</code> 方法的最终目的就是创建真实的 DOM 对象。</p><h2 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h2><p>看过了创建真实 DOM 后，我们来学习虚拟 DOM 如何实现 DOM 的更新。这才是虚拟 DOM 的存在意义 —— 比对并局部更新 DOM 以达到性能优化的目的。<br>看代码~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 补丁 vnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新旧 vnode 相等</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> elm = vnode.elm = oldVnode.elm</span><br><span class="line">  <span class="comment">// 异步占位</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(oldVnode.isAsyncPlaceholder)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.asyncFactory.resolved)) &#123;</span><br><span class="line">      hydrate(oldVnode.elm, vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode.isAsyncPlaceholder = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果新旧 vnode 为静态；新旧 vnode key相同；</span></span><br><span class="line">  <span class="comment">// 新 vnode 是克隆所得；新 vnode 有 v-once 的属性</span></span><br><span class="line">  <span class="comment">// 则新 vnode 的 componentInstance 用老的 vnode 的。</span></span><br><span class="line">  <span class="comment">// 即 vnode 的 componentInstance 保持不变。</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(vnode.isStatic) &amp;&amp;</span><br><span class="line">    isTrue(oldVnode.isStatic) &amp;&amp;</span><br><span class="line">    vnode.key === oldVnode.key &amp;&amp;</span><br><span class="line">    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))</span><br><span class="line">  ) &#123;</span><br><span class="line">    vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> data = vnode.data</span><br><span class="line">  <span class="comment">// 执行 data.hook.prepatch 钩子。</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(i = data.hook) &amp;&amp; isDef(i = i.prepatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children</span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isPatchable(vnode)) &#123;</span><br><span class="line">    <span class="comment">// 遍历 cbs，执行 update 方法</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)</span><br><span class="line">    <span class="comment">// 执行 data.hook.update 钩子</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 旧 vnode 的 text 选项为 undefined</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 新旧 vnode 都有 children，且不同，执行 updateChildren 方法。</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 清空文本，添加 vnode</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 移除 vnode</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 如果新旧 vnode 都是 undefined，清空文本</span></span><br><span class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="comment">// 有不同文本内容，更新文本内容</span></span><br><span class="line">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">    <span class="comment">// 执行 data.hook.postpatch 钩子，表明 patch 完毕</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.postpatch)) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码中添加了一些注释便于理解，来理一下逻辑。</p><ol><li>如果两个vnode相等，不需要 patch，退出。</li><li>如果是异步占位，执行 hydrate 方法或者定义 isAsyncPlaceholder 为 true，然后退出。</li><li>如果两个vnode都为静态，不用更新，所以讲以前的 componentInstance 实例传给当前 vnode，并退出。</li><li>执行 prepatch 钩子。</li><li>遍历调用 update 回调，并执行 update 钩子。</li><li>如果两个 vnode 都有 children，且 vnode 没有 text、两个 vnode 不相等，执行 updateChildren 方法。这是虚拟 DOM 的关键。</li><li>如果新 vnode 有 children，而老的没有，清空文本，并添加 vnode 节点。</li><li>如果老 vnode 有 children，而新的没哟，清空文本，并移除 vnode 节点。</li><li>如果两个 vnode 都没有 children，老 vnode 有 text ，新 vnode 没有 text ，则清空 DOM 文本内容。</li><li>如果老 vnode 和新 vnode 的 text 不同，更新 DOM 元素文本内容。</li><li>调用 postpatch 钩子。</li></ol><p>其中，<code>addVnodes</code> 方法和 <code>removeVnodes</code> 都比较简单，很好理解。这里我们来看看关键代码 <code>updateChildren</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeOnly 是一个只用于 &lt;transition-group&gt; 的特殊标签，</span></span><br><span class="line">  <span class="comment">// 确保移除元素过程中保持一个正确的相对位置。</span></span><br><span class="line">  <span class="keyword">const</span> canMove = !removeOnly</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    checkDuplicateKeys(newCh)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 开始老 vnode 向右一位</span></span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 结束老 vnode 向左一位</span></span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧开始 vnode 相似，进行pacth。开始 vnode 向右一位</span></span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧结束 vnode 相似，进行patch。结束 vnode 向左一位</span></span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">      <span class="comment">// 新结束 vnode 和老开始 vnode 相似，进行patch。</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      <span class="comment">// 老开始 vnode 插入到真实 DOM 中，老开始 vnode 向右一位，新结束 vnode 向左一位</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">      <span class="comment">// 老结束 vnode 和新开始 vnode 相似，进行 patch。</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      <span class="comment">// 老结束 vnode 插入到真实 DOM 中，老结束 vnode 向左一位，新开始 vnode 向右一位</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获取老 Idx 的 key</span></span><br><span class="line">      <span class="keyword">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      <span class="comment">// 给老 idx 赋值</span></span><br><span class="line">      idxInOld = isDef(newStartVnode.key)</span><br><span class="line">        ? oldKeyToIdx[newStartVnode.key]</span><br><span class="line">        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123;</span><br><span class="line">        <span class="comment">// 如果老 idx 为 undefined，说明没有这个元素，创建新 DOM 元素。</span></span><br><span class="line">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 vnode</span></span><br><span class="line">        vnodeToMove = oldCh[idxInOld]</span><br><span class="line">        <span class="keyword">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">          <span class="comment">// 如果生成的 vnode 和新开始 vnode 相似，执行 patch。</span></span><br><span class="line">          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)</span><br><span class="line">          <span class="comment">// 赋值 undefined，插入 vnodeToMove 元素</span></span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">          canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 相同的key不同的元素，视为新元素</span></span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 新开始 vnode 向右一位</span></span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果老开始 idx 大于老结束 idx，如果是有效数据则添加 vnode 到新 vnode 中。</span></span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">    refElm = isUndef(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].elm</span><br><span class="line">    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">    <span class="comment">// 移除 vnode</span></span><br><span class="line">    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示已看晕……让我们慢慢捋一捋……</p><ol><li>看参数，其中 oldCh 和 newCh 即表示了新旧 vnode 数组，两组数组通过比对的方式来差异化更新 DOM。</li><li>定义了一些变量：开始索引值、结束索引值、开始vnode、结束vnode等等……</li><li>进行循环遍历，遍历条件为 oldStartIdx &lt;= oldEndIdx 和 newStartIdx &lt;= newEndIdx，在遍历过程中，oldStartIdx 和 newStartIdx 递增，oldEndIdx 和 newEndIdx 递减。当条件不符合跳出遍历循环。</li><li>如果 oldStartVnode 和 newStartVnode 相似，执行 patch。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-3c53cb4442d3fc58?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果 oldEndVnode 和 newEndVnode 相似，执行 patch。</li><li>如果 oldStartVnode 和 newEndVnode 相似，执行 patch，并且将该节点移动到 vnode 数组末一位。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-0b47f3cb7f762873?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果 oldEndVnode 和 newStartVnode 相似，执行 patch，并且将该节点移动到 vnode 数组第一位。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-f6203babe1e15791?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果没有相同的 idx，执行 createElm 方法创建元素。</li><li>如果如有相同的 idx，如果两个 vnode 相似，执行 patch，并且将该节点移动到 vnode 数组第一位。如果两个 vnode 不相似，视为新元素，执行 createElm 创建。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-2a6b908889782ac4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果老 vnode 数组的开始索引大于结束索引，说明新 node 数组长度大于老 vnode 数组，执行 addVnodes 方法添加这些新 vnode 到 DOM 中。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-d353c99c30bb5f25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果老 vnode 数组的开始索引小于结束索引，说明老 node 数组长度大于新 vnode 数组，执行 removeVnodes 方法从 DOM 中移除老 vnode 数组中多余的 vnode。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-c8aa456d7f2839da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li></ol><p>嗯……就是这样！</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>毕竟是Vue的核心功能之一，虽然省略了不少代码，但博客篇幅很长。写了两天才写完。不过写完博客后感觉对于 Vue 的理解又加深了很多。<br>在下一篇博客中，我们一起来学习template的解析。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue官网</a></li><li><a href="https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">VirtualDOM与diff(Vue实现)</a>.MarkDown)</li><li><a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a></li><li><a href="http://www.w3school.com.cn/index.html" target="_blank" rel="noopener">w3school</a></li></ul><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;初六和家人出去玩，没写完博客。跳票了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓虚拟DOM，是一个用于表示真实 DOM 结构和属性的 JavaScript 对象，这个对象用于对比虚拟 DOM 和当前真实 DOM 的差异化，然后进行局部渲染从而
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习五 —— provide 和 inject 学习</title>
    <link href="https://violetjack.github.io/2018/02/20/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%20%E2%80%94%E2%80%94%20provide%20%E5%92%8C%20inject%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/20/Vue.js源码学习五 —— provide 和 inject 学习/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早上好！继续开始学习Vue源码吧~</p></blockquote><p>在 Vue.js 的 <code>2.2.0+</code> 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。<br>下面我们来看看源码~</p><h1 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h1><p>和之前一样，初始化的方法都是在 Vue 的 <code>_init</code> 方法中的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  ……</span><br><span class="line">  vm._self = vm</span><br><span class="line">  initLifecycle(vm)</span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">  initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm)</span><br><span class="line">  initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">'created'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里找到 <code>initInjections</code> 和 <code>initProvide</code> 方法，这就是 <code>provide</code> 和 <code>inject</code> 的初始化方法了。这两个方法都是在 <code>src/core/instance/inject.js</code> 中。</p><h1 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h1><blockquote><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p></blockquote><p>先看源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/inject.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>provide 是向下传递数据的选项。这里先拿到 provide 选项中的内容，如果有 provide 选项，将 provide 选项传递给 <code>vm._provided</code> 变为 Vue 实例全局数据。<br>这里看一下例子更清楚，下例中传入数据 <code>foo</code>，数据内容为 <code>bar</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h1><blockquote><p>inject 选项应该是一个字符串数组或一个对象，该对象的 key 代表了本地绑定的名称，value 为其 key (字符串或 Symbol) 以在可用的注入中搜索。</p></blockquote><p>源码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/inject.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm)</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    observerState.shouldConvert = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(result).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      defineReactive(vm, key, result[key])</span><br><span class="line">    &#125;)</span><br><span class="line">    observerState.shouldConvert = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后的源码可以看到，首先通过 <code>resolveInject</code> 方法获取 inject 选项搜索结果，如果有搜索结果，遍历搜索结果并为其中的数据添加 setter 和 getter。<br>接着来看下 <code>resolveInject</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject: any, vm: Component</span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="comment">// inject 是 :any 类型因为流没有智能到能够指出缓存</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 获取 inject 选项的 key 数组</span></span><br><span class="line">    <span class="keyword">const</span> keys = hasSymbol</span><br><span class="line">      ? <span class="built_in">Reflect</span>.ownKeys(inject).filter(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(inject, key).enumerable</span><br><span class="line">      &#125;)</span><br><span class="line">      : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; provideKey <span class="keyword">in</span> source._provided) &#123;</span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'default'</span> <span class="keyword">in</span> inject[key]) &#123;</span><br><span class="line">          <span class="keyword">const</span> provideDefault = inject[key].default</span><br><span class="line">          result[key] = <span class="keyword">typeof</span> provideDefault === <span class="string">'function'</span></span><br><span class="line">            ? provideDefault.call(vm)</span><br><span class="line">            : provideDefault</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">`Injection "<span class="subst">$&#123;key&#125;</span>" not found`</span>, vm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取 inject 选项的 key 数组，遍历 key 数组，通过向上冒泡来查找 provide 中是否有 key 与 inject 选项中 from 属性同名的，如果有，则将这个数据传递给 result；如果没有，检查 inject 是否有 default 选项设定默认值或者默认方法，如果有则将默认值返传给 result，最终返回 result 对象。<br>所以，inject 的写法应该是有 default 默认值的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123; <span class="attr">default</span>: <span class="string">'foo'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者是有 from 查找键和 default 默认值的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'bar'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'foo'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者为 default 默认值设定一个工厂方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'bar'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好吧，我承认这就是引用的官网的三个例子~ 不过意思到就好啦。<br>这里我有个疑问，既然在源码中主动去识别了 from 和 default，官网上说是</p><blockquote><p>在 <code>2.5.0+</code> 的注入可以通过设置默认值使其变成可选项：</p></blockquote><p>那么如下写法还可用吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为此，我们去查查 <code>2.2.0</code> 版本的Vue是怎么写的？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">const</span> inject: any = vm.$options.inject</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="comment">// inject is :any because flow is not smart enough to figure out cached</span></span><br><span class="line">    <span class="comment">// isArray here</span></span><br><span class="line">    <span class="keyword">const</span> isArray = <span class="built_in">Array</span>.isArray(inject)</span><br><span class="line">    <span class="keyword">const</span> keys = isArray</span><br><span class="line">      ? inject</span><br><span class="line">      : hasSymbol</span><br><span class="line">        ? <span class="built_in">Reflect</span>.ownKeys(inject)</span><br><span class="line">        : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = isArray ? key : inject[key]</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; source._provided[provideKey]) &#123;</span><br><span class="line">          vm[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从中可以看到，在这个版本 provide 和 inject 是一起初始化的。之后，将 provide 传给 vm._provide ，在获取 inject 选项的时候代码判断了 inject 是否为数组，如果是数组直接遍历数组，之后查找 provide 的代码差不多。<br>所以我推测： <strong>在 <code>2.5.0+</code> 之后不能再使用数组形式的 inject 来搜索 provide 了。</strong><br>PS：这里没有去代码验证，如有问题，欢迎指出，谢谢！</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至此，provide 和 inject 的源码学习完毕啦~ 如果有任何问题和建议，欢迎联系我！谢谢！<br>预告：明天学习 Vue 的 VDOM、VNode 相关知识。欢迎继续关注~</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早上好！继续开始学习Vue源码吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Vue.js 的 &lt;code&gt;2.2.0+&lt;/code&gt; 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。&lt;br&gt;下面
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习四 —— 渲染 Render 初始化过程学习</title>
    <link href="https://violetjack.github.io/2018/02/19/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%20%E2%80%94%E2%80%94%20%E6%B8%B2%E6%9F%93%20Render%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/19/Vue.js源码学习四 —— 渲染 Render 初始化过程学习/</id>
    <published>2018-02-18T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.275Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天我们来学习下Vue的渲染 Render 源码~</p></blockquote><p>还是从初始化方法开始找代码，在 <code>src/core/instance/index.js</code> 中，先执行了 <code>renderMixin</code> 方法，然后在Vue实例化的时候执行了 <code>vm._init</code> 方法，在这个 <code>vm._init</code> 方法中执行了 <code>initRender</code> 方法。<code>renderMixin</code> 和 <code>initRender</code> 都在 <code>src/core/instance/render.js</code> 中，我们来看看代码：</p><h1 id="renderMixin"><a href="#renderMixin" class="headerlink" title="renderMixin"></a>renderMixin</h1><p>首先来跟一下 <code>renderMixin</code> 的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">export function renderMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  installRenderHelpers(Vue.prototype)</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$nextTick = function (fn: Function) &#123;</span><br><span class="line">    return nextTick(fn, this)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype._render = function (): VNode &#123;</span><br><span class="line">    const vm: Component = this</span><br><span class="line">    // vm.$options.render &amp; vm.$options._parentVnode</span><br><span class="line">    const &#123; render, _parentVnode &#125; = vm.$options</span><br><span class="line"></span><br><span class="line">    if (_parentVnode) &#123;</span><br><span class="line">      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vm.$vnode = _parentVnode</span><br><span class="line">    let vnode</span><br><span class="line">    try &#123;</span><br><span class="line">      // 执行 vue 实例的 render 方法</span><br><span class="line">      vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      handleError(e, vm, `render`)</span><br><span class="line">      if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">        if (vm.$options.renderError) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            handleError(e, vm, `renderError`)</span><br><span class="line">            vnode = vm._vnode</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 返回空vnode避免render方法报错退出</span><br><span class="line">    if (!(vnode instanceof VNode)) &#123;</span><br><span class="line">      vnode = createEmptyVNode()</span><br><span class="line">    &#125;</span><br><span class="line">    // 父级Vnode</span><br><span class="line">    vnode.parent = _parentVnode</span><br><span class="line">    return vnode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码执行了 <code>installRenderHelpers</code> 方法，然后定义了 Vue 的 <code>$nextTick</code> 和 <code>_render</code> 方法。<br>先来看看 <code>installRenderHelpers</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export function installRenderHelpers (target: any) &#123;</span><br><span class="line">  target._o = markOnce</span><br><span class="line">  target._n = toNumber // 数字</span><br><span class="line">  target._s = toString // 字符串</span><br><span class="line">  target._l = renderList // 列表</span><br><span class="line">  target._t = renderSlot</span><br><span class="line">  target._q = looseEqual</span><br><span class="line">  target._i = looseIndexOf</span><br><span class="line">  target._m = renderStatic</span><br><span class="line">  target._f = resolveFilter</span><br><span class="line">  target._k = checkKeyCodes</span><br><span class="line">  target._b = bindObjectProps</span><br><span class="line">  target._v = createTextVNode</span><br><span class="line">  target._e = createEmptyVNode</span><br><span class="line">  target._u = resolveScopedSlots</span><br><span class="line">  target._g = bindObjectListeners</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是 Vue 的各类渲染方法了，从字面意思中可以知道一些方法的用途，这些方法用在Vue生成的渲染函数中。具体各个渲染函数的实现先不提~之后会专门写博客学习。<br>在 <code>$nextTick</code> 函数中执行了 <code>nextTick</code> 函数，找到该函数源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">export function nextTick (cb?: Function, ctx?: Object) &#123;</span><br><span class="line">  let _resolve</span><br><span class="line">  callbacks.push(() =&gt; &#123;</span><br><span class="line">    if (cb) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, ctx, &apos;nextTick&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  if (!pending) &#123;</span><br><span class="line">    pending = true</span><br><span class="line">    if (useMacroTask) &#123;</span><br><span class="line">      macroTimerFunc()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      microTimerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // $flow-disable-line</span><br><span class="line">  if (!cb &amp;&amp; typeof Promise !== &apos;undefined&apos;) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在来说关键的 <code>_render</code> 方法，关键在这个 try…catch 方法中，执行了Vue实例中的 render 方法生成一个vnode。如果生成失败，会试着生成 renderError 方法。如果vnode为空，则为vnode传一个空的VNode，最后返回vnode对象。</p><h1 id="initRender"><a href="#initRender" class="headerlink" title="initRender"></a>initRender</h1><p>接下来看下 render 的初始化过程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span> <span class="comment">// the root of the child tree</span></span><br><span class="line">  vm._staticTrees = <span class="literal">null</span> <span class="comment">// v-once cached trees</span></span><br><span class="line">  <span class="keyword">const</span> options = vm.$options</span><br><span class="line">  <span class="keyword">const</span> parentVnode = vm.$vnode = options._parentVnode <span class="comment">// the placeholder node in parent tree</span></span><br><span class="line">  <span class="keyword">const</span> renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class="line">  vm.$slots = resolveSlots(options._renderChildren, renderContext)</span><br><span class="line">  vm.$scopedSlots = emptyObject</span><br><span class="line">  <span class="comment">// 将 createElement 方法绑定到这个实例，这样我们就可以在其中得到适当的 render context。</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 规范化一直应用于公共版本，用于用户编写的 render 函数。</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 父级组件数据</span></span><br><span class="line">  <span class="keyword">const</span> parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">  defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 initRender 方法中，为Vue的实例方法添加了几个属性值，最后定义了 <code>$attrs</code> 和 <code>$listeners</code> 的监听方法。<br>看下 <code>createElement</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/create-element.js</span><br><span class="line">export function createElement (</span><br><span class="line">  context: Component,</span><br><span class="line">  tag: any,</span><br><span class="line">  data: any,</span><br><span class="line">  children: any,</span><br><span class="line">  normalizationType: any,</span><br><span class="line">  alwaysNormalize: boolean</span><br><span class="line">): VNode | Array&lt;VNode&gt; &#123;</span><br><span class="line">  if (Array.isArray(data) || isPrimitive(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = undefined</span><br><span class="line">  &#125;</span><br><span class="line">  if (isTrue(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = ALWAYS_NORMALIZE</span><br><span class="line">  &#125;</span><br><span class="line">  return _createElement(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里执行了 <code>_createElement</code> 方法，由于该方法太长，就不贴出来费篇幅了，代码看<a href="https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-element.js#L47" target="_blank" rel="noopener">这里</a>。最终返回一个 VNode 对象，VNode 对象由 <code>createEmptyVNode</code> 或 <code>createComponent</code> 方法得到的。<br><code>createEmptyVNode</code> 创建了一个空的 VNode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/vnode.js</span><br><span class="line">export const createEmptyVNode = (text: string = &apos;&apos;) =&gt; &#123;</span><br><span class="line">  const node = new VNode()</span><br><span class="line">  node.text = text</span><br><span class="line">  node.isComment = true</span><br><span class="line">  return node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>createComponent</code> 创建了一个组件，最终也将返回一个 VNode 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/create-component.js</span><br><span class="line">export function createComponent (</span><br><span class="line">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span><br><span class="line">  data: ?VNodeData,</span><br><span class="line">  context: Component,</span><br><span class="line">  children: ?Array&lt;VNode&gt;,</span><br><span class="line">  tag?: string</span><br><span class="line">): VNode | Array&lt;VNode&gt; | void &#123;</span><br><span class="line">  if (isUndef(Ctor)) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  const baseCtor = context.$options._base</span><br><span class="line">  if (isObject(Ctor)) &#123;</span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line">  if (typeof Ctor !== &apos;function&apos;) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let asyncFactory</span><br><span class="line">  if (isUndef(Ctor.cid)) &#123;</span><br><span class="line">    asyncFactory = Ctor</span><br><span class="line">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context)</span><br><span class="line">    if (Ctor === undefined) &#123;</span><br><span class="line">      return createAsyncPlaceholder(</span><br><span class="line">        asyncFactory,</span><br><span class="line">        data,</span><br><span class="line">        context,</span><br><span class="line">        children,</span><br><span class="line">        tag</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data = data || &#123;&#125;</span><br><span class="line">  resolveConstructorOptions(Ctor)</span><br><span class="line">  if (isDef(data.model)) &#123;</span><br><span class="line">    transformModel(Ctor.options, data)</span><br><span class="line">  &#125;</span><br><span class="line">  const propsData = extractPropsFromVNodeData(data, Ctor, tag)</span><br><span class="line">  if (isTrue(Ctor.options.functional)) &#123;</span><br><span class="line">    return createFunctionalComponent(Ctor, propsData, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const listeners = data.on</span><br><span class="line">  data.on = data.nativeOn</span><br><span class="line"></span><br><span class="line">  if (isTrue(Ctor.options.abstract)) &#123;</span><br><span class="line">    const slot = data.slot</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    if (slot) &#123;</span><br><span class="line">      data.slot = slot</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mergeHooks(data)</span><br><span class="line">  // 创建组件的 VNode</span><br><span class="line">  const name = Ctor.options.name || tag</span><br><span class="line">  const vnode = new VNode(</span><br><span class="line">    `vue-component-$&#123;Ctor.cid&#125;$&#123;name ? `-$&#123;name&#125;` : &apos;&apos;&#125;`,</span><br><span class="line">    data, undefined, undefined, undefined, context,</span><br><span class="line">    &#123; Ctor, propsData, listeners, tag, children &#125;,</span><br><span class="line">    asyncFactory</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  return vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="初次渲染过程"><a href="#初次渲染过程" class="headerlink" title="初次渲染过程"></a>初次渲染过程</h1><p>既然是初次渲染，肯定会触发 <code>mounted</code> 生命周期钩子。所以我们从 <code>mount</code> 找起。在源码中定义了两次 <code>$mount</code> 方法，第一次返回了 <code>mountComponent</code> 方法；第二次定义了 Vue 实例的 <code>$options</code> 选项中的一些数据，然后再执行第一次的 <code>$mount</code> 方法，即执行 <code>mountComponent</code> 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/platforms/web/runtime/index.js</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class="line">  return mountComponent(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// src/platforms/web/entry-runtime-with-compiler.js</span><br><span class="line">const mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  if (el === document.body || el === document.documentElement) &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const options = this.$options</span><br><span class="line">  // resolve template/el and convert to render function</span><br><span class="line">  if (!options.render) &#123;</span><br><span class="line">    let template = options.template</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      if (typeof template === &apos;string&apos;) &#123;</span><br><span class="line">        if (template.charAt(0) === &apos;#&apos;) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return this</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, this)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return mount.call(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是 <code>compileToFunctions</code> 方法，该方法的作用是将 template 编译为 render 函数。<br><code>compileToFunctions</code> 方法是一个编译的过程，暂且不论。抓住主线，看渲染。所以去看看 <code>mountComponent</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">export function mountComponent (</span><br><span class="line">  vm: Component,</span><br><span class="line">  el: ?Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  if (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, &apos;beforeMount&apos;)</span><br><span class="line"></span><br><span class="line">  let updateComponent</span><br><span class="line">  updateComponent = () =&gt; &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */)</span><br><span class="line">  hydrating = false</span><br><span class="line"></span><br><span class="line">  if (vm.$vnode == null) &#123;</span><br><span class="line">    vm._isMounted = true</span><br><span class="line">    callHook(vm, &apos;mounted&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，在 beforeMount 和 mounted 生命周期之间的代码：创建一个更新方法，然后创建一个Watcher监听该方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let updateComponent = () =&gt; &#123;</span><br><span class="line">  vm._update(vm._render(), hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */)</span><br></pre></td></tr></table></figure></p><p>在 <code>new Watcher</code> 监听了 updateComponent 方法后，会立即执行 <code>updateComponent</code> 方法。在 <code>updateComponent</code> 方法中，我们之前提到 _render 方法最终返回一个编译过的 VNode 对象，即虚拟 DOM，这里我们就看看 _update 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (vm._isMounted) &#123;</span><br><span class="line">    callHook(vm, &apos;beforeUpdate&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  const prevEl = vm.$el</span><br><span class="line">  const prevVnode = vm._vnode</span><br><span class="line">  const prevActiveInstance = activeInstance</span><br><span class="line">  activeInstance = vm</span><br><span class="line">  vm._vnode = vnode</span><br><span class="line"></span><br><span class="line">  if (!prevVnode) &#123;</span><br><span class="line">    // initial render</span><br><span class="line">    vm.$el = vm.__patch__(</span><br><span class="line">      vm.$el, vnode, hydrating, false /* removeOnly */,</span><br><span class="line">      vm.$options._parentElm,</span><br><span class="line">      vm.$options._refElm</span><br><span class="line">    )</span><br><span class="line">    vm.$options._parentElm = vm.$options._refElm = null</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // updates</span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  activeInstance = prevActiveInstance</span><br><span class="line">  // update __vue__ reference</span><br><span class="line">  if (prevEl) &#123;</span><br><span class="line">    prevEl.__vue__ = null</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = vm</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">    vm.$parent.$el = vm.$el</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从注释可以看出，初次渲染会走到 <code>vm.__patch__</code> 方法中，这个方法就是比对虚拟 DOM ，局部更新 DOM 的方法，关于虚拟 DOM 和 VNode 节点，之后再聊。</p><h1 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h1><ul><li>通过 <code>renderMixin</code> 方法来定义一些渲染属性。</li><li><code>initRender</code> 定义了各类渲染选项，并且对一些属性进行监听。</li><li><code>$mount</code> 方法执行了 <code>mountComponent</code> 方法，监听<br><code>updateComponent</code> 方法并执行 <code>_update</code> 方法。</li><li><code>_update</code> 方法中执行 <code>__patch__</code> 方法渲染 VNode。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这里简单理了理 <code>render</code> 渲染的代码流程，更深入的关于虚拟 DOM 的内容在下一篇中继续研究~<br>这里再提出几个问题，之后学习和解决：</p><ul><li>template 的具体编译细节</li><li>已知 data 数据监测，如何在改变数据后对改变界面的显示。</li><li>深入理解虚拟 DOM 的原理</li><li>学习全局 API 的源码</li><li>了解各类工具类</li><li>了解 AST 语法树是什么~</li></ul><p>计划3月底完成Vue源码的系统学习，之后转战vue-router、vuex、vuxt、 devtools、webpack、vue-loader，今年目标把Vue全家老小、亲戚朋友都学习一遍！加油！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天我们来学习下Vue的渲染 Render 源码~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是从初始化方法开始找代码，在 &lt;code&gt;src/core/instance/index.js&lt;/code&gt; 中，先执行了 &lt;code&gt;renderMi
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习三 —— 事件 Event 学习</title>
    <link href="https://violetjack.github.io/2018/02/17/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%20%E2%80%94%E2%80%94%20%E4%BA%8B%E4%BB%B6%20Event%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/17/Vue.js源码学习三 —— 事件 Event 学习/</id>
    <published>2018-02-16T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早上好！继续学习Vue源码~这次我们来学习 event 事件。</p></blockquote><h1 id="源码简析"><a href="#源码简析" class="headerlink" title="源码简析"></a>源码简析</h1><p>其实看了前两篇的同学已经知道源码怎么找了，这里再提一下。<br>先找到Vue核心源码index方法 <code>src/core/instance/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure></p><p>index方法中定义了一个Vue的构造函数执行 <code>_init</code> 方法初始化，然后执行了多个 <code>xxxMixin</code> 方法，这些方法是为Vue 的构造函数定义各类属性的。比如我们今天关注的事件，Vue的几个事件方法都是在 <code>eventsMixin</code> 中定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export function eventsMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype.$on = function (event: string | Array&lt;string&gt;, fn: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$once = function (event: string, fn: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$off = function (event?: string | Array&lt;string&gt;, fn?: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$emit = function (event: string): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外要注意的是，<code>initMixin</code> 方法中定义了Vue的初始化方法 <code>_init</code>，该方法中对Vue各类属性进行了初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initProxy(vm)</span><br><span class="line">    vm._self = vm</span><br><span class="line">    initLifecycle(vm)</span><br><span class="line">    initEvents(vm)</span><br><span class="line">    initRender(vm)</span><br><span class="line">    callHook(vm, &apos;beforeCreate&apos;)</span><br><span class="line">    initInjections(vm) // resolve injections before data/props</span><br><span class="line">    initState(vm)</span><br><span class="line">    initProvide(vm) // resolve provide after data/props</span><br><span class="line">    callHook(vm, &apos;created&apos;)</span><br><span class="line">    if (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，在本篇博客中只需要关注 <code>initEvents</code> 和 <code>eventsMixin</code> 方法即可</p><h1 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h1><p>初始化过程很简单，清空数据，并初始化连接父级的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">export function initEvents (vm: Component) &#123;</span><br><span class="line">  vm._events = Object.create(null)</span><br><span class="line">  vm._hasHookEvent = false</span><br><span class="line">  // init parent attached events</span><br><span class="line">  const listeners = vm.$options._parentListeners</span><br><span class="line">  if (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我深入看了下 <code>updateComponentListeners</code> 方法，最终走到了 <code>src/core/vdom/helpers/update-listeners.js</code> 的 <code>updateListeners</code> 方法中，因为并没有传 <code>oldOn</code> 参数，所以我简化了下代码，简化代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/helpers/update-listeners.js</span><br><span class="line">export function updateListeners (</span><br><span class="line">  on: Object,</span><br><span class="line">  oldOn: Object,</span><br><span class="line">  add: Function,</span><br><span class="line">  remove: Function,</span><br><span class="line">  vm: Component</span><br><span class="line">) &#123;</span><br><span class="line">  let name, def, cur, old, event</span><br><span class="line">  for (name in on) &#123;</span><br><span class="line">    def = cur = on[name]</span><br><span class="line">    old = oldOn[name]</span><br><span class="line">    event = normalizeEvent(name)</span><br><span class="line"></span><br><span class="line">    if (isUndef(old)) &#123;</span><br><span class="line">      if (isUndef(cur.fns)) &#123;</span><br><span class="line">        cur = on[name] = createFnInvoker(cur)</span><br><span class="line">      &#125;</span><br><span class="line">      add(event.name, cur, event.once, event.capture, event.passive, event.params)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中这个add方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">// target 临时引用vm，用完后即变为undefined</span><br><span class="line">var target;</span><br><span class="line"></span><br><span class="line">function add (event, fn, once) &#123;</span><br><span class="line">  if (once) &#123;</span><br><span class="line">    target.$once(event, fn);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    target.$on(event, fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整理下来就是将父级的事件定义到当前vm中。</p><h1 id="on"><a href="#on" class="headerlink" title="$on"></a>$on</h1><blockquote><p>监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。</p></blockquote><p>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$on = function (event: string | Array&lt;string&gt;, fn: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (Array.isArray(event)) &#123;</span><br><span class="line">    for (let i = 0, l = event.length; i &lt; l; i++) &#123;</span><br><span class="line">      this.$on(event[i], fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    (vm._events[event] || (vm._events[event] = [])).push(fn)</span><br><span class="line">    // 通过使用标记为注册而不是散列查找的布尔标记来优化钩子 hook: 事件成本。</span><br><span class="line">    if (hookRE.test(event)) &#123;</span><br><span class="line">      vm._hasHookEvent = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 event 是数组则遍历执行 $on 方法（2.2.0+ 中支持）；<br>否则 向 vm._events[event] 中传递回调函数 fn，这里既然 vm._events[event] 是一个数组，那么我猜想一个 event 可以执行多个回调函数咯？<br>如果是 event 字符串中有 <code>hook:</code>，修改 <code>vm._hasHookEvent</code> 的状态。如果 <code>_hasHookEvent</code> 为 true，那么在触发各类生命周期钩子的时候会触发如 <code>hook:created</code> 事件，这只是一种优化方式，与我们主题关系不大，具体请看代码~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">export function callHook (vm: Component, hook: string) &#123;</span><br><span class="line">  const handlers = vm.$options[hook]</span><br><span class="line">  if (handlers) &#123;</span><br><span class="line">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        handlers[i].call(vm)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="once"><a href="#once" class="headerlink" title="$once"></a>$once</h1><blockquote><p>监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。</p></blockquote><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$once = function (event: string, fn: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  function on () &#123;</span><br><span class="line">    vm.$off(event, on)</span><br><span class="line">    fn.apply(vm, arguments)</span><br><span class="line">  &#125;</span><br><span class="line">  on.fn = fn</span><br><span class="line">  vm.$on(event, on)</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就简单了，定义一个 $on 事件监听，回调函数中使用 $off 方法取消事件监听，并执行回调函数。</p><h1 id="off"><a href="#off" class="headerlink" title="$off"></a>$off</h1><blockquote><p>移除自定义事件监听器。</p><ul><li>如果没有提供参数，则移除所有的事件监听器；</li><li>如果只提供了事件，则移除该事件所有的监听器；</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器。</li></ul></blockquote><p>代码如下，分析见注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$off = function (event?: string | Array&lt;string&gt;, fn?: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  // 如果没有参数，关闭全部事件监听器</span><br><span class="line">  if (!arguments.length) &#123;</span><br><span class="line">    vm._events = Object.create(null)</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 关闭数组中的事件监听器</span><br><span class="line">  if (Array.isArray(event)) &#123;</span><br><span class="line">    for (let i = 0, l = event.length; i &lt; l; i++) &#123;</span><br><span class="line">      this.$off(event[i], fn)</span><br><span class="line">    &#125;</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 具体某个事件监听</span><br><span class="line">  const cbs = vm._events[event]</span><br><span class="line">  // 没有这个监听事件，直接返回vm</span><br><span class="line">  if (!cbs) &#123;</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 没有 fn，将事件监听器变为null，返回vm</span><br><span class="line">  if (!fn) &#123;</span><br><span class="line">    vm._events[event] = null</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 有回调函数</span><br><span class="line">  if (fn) &#123;</span><br><span class="line">    // specific handler</span><br><span class="line">    let cb</span><br><span class="line">    let i = cbs.length</span><br><span class="line">    while (i--) &#123;</span><br><span class="line">      // cbs = vm._events[event] 是一个数组</span><br><span class="line">      cb = cbs[i]</span><br><span class="line">      if (cb === fn || cb.fn === fn) &#123;</span><br><span class="line">        // 移除 fn 这个事件监听器</span><br><span class="line">        cbs.splice(i, 1)</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><blockquote><p>触发当前实例上的事件。附加参数都会传给监听器回调。</p></blockquote><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$emit = function (event: string): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  let cbs = vm._events[event]</span><br><span class="line">  if (cbs) &#123;</span><br><span class="line">    cbs = cbs.length &gt; 1 ? toArray(cbs) : cbs</span><br><span class="line">    const args = toArray(arguments, 1)</span><br><span class="line">    for (let i = 0, l = cbs.length; i &lt; l; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        cbs[i].apply(vm, args)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `event handler for &quot;$&#123;event&#125;&quot;`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码分析：首先获取 vm._events[event] ，之前我们说过这玩意是个数组；如果有这个事件监听器，从第二个参数开始获取作为触发方法的传参 args，遍历事件监听器数组传参执行回调函数。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>就这么多啦~其实事件还是很简单的。明后天研究研究渲染这个难点！我们后天见！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早上好！继续学习Vue源码~这次我们来学习 event 事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;源码简析&quot;&gt;&lt;a href=&quot;#源码简析&quot; class=&quot;headerlink&quot; title=&quot;源码简析&quot;&gt;&lt;/a&gt;源码简析&lt;/h1
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习二 —— 生命周期 LifeCycle 学习</title>
    <link href="https://violetjack.github.io/2018/02/16/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%20%E2%80%94%E2%80%94%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20LifeCycle%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/16/Vue.js源码学习二 —— 生命周期 LifeCycle 学习/</id>
    <published>2018-02-15T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>春节继续写博客~加油！</p></blockquote><p>这次来学习一下Vue的生命周期，看看生命周期是怎么回事。</p><h1 id="callHook"><a href="#callHook" class="headerlink" title="callHook"></a>callHook</h1><p>生命周期主要就是在源码某个时间点执行这个 <code>callHook</code> 方法来调用 <code>vm.$options</code> 的生命周期钩子方法（如果定义了生命周期钩子方法的话）。<br>我们来看看 callHook 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export function callHook (vm: Component, hook: string) &#123;</span><br><span class="line">  const handlers = vm.$options[hook] // 获取Vue选项中的生命周期钩子函数</span><br><span class="line">  if (handlers) &#123;</span><br><span class="line">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        handlers[i].call(vm) // 执行生命周期函数</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如触发 <code>mounted</code> 钩子的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callHook(vm, &apos;mounted&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><p>先上一张图看下Vue的生命周期，我们可以在相应的生命周期中定义一些事件。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-4e8074eee45c60a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Vue生命周期"></p><h2 id="beforeCreate-amp-created"><a href="#beforeCreate-amp-created" class="headerlink" title="beforeCreate &amp; created"></a>beforeCreate &amp; created</h2><p>先看看这两个方法调用的时间。</p><blockquote><p><strong>beforeCreate</strong><br>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。<br><strong>created</strong><br>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p></blockquote><p>具体代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/init.js</span><br><span class="line">Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">  ……</span><br><span class="line">  initLifecycle(vm) // 初始化生命周期</span><br><span class="line">  initEvents(vm) // 初始化事件</span><br><span class="line">  initRender(vm) // 初始化渲染</span><br><span class="line">  callHook(vm, &apos;beforeCreate&apos;)</span><br><span class="line">  initInjections(vm) // 初始化Inject</span><br><span class="line">  initState(vm) // 初始化数据</span><br><span class="line">  initProvide(vm) // 初始化Provide</span><br><span class="line">  callHook(vm, &apos;created&apos;)</span><br><span class="line">  ……</span><br><span class="line">  if (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el) // 如果有el属性，将内容挂载到el中去。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="beforeMount-amp-mounted"><a href="#beforeMount-amp-mounted" class="headerlink" title="beforeMount &amp; mounted"></a>beforeMount &amp; mounted</h2><blockquote><p><strong>beforeMount</strong><br>在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。<br><strong>mounted</strong><br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p></blockquote><p>贴出代码逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">// 挂载组件的方法</span><br><span class="line">export function mountComponent (</span><br><span class="line">  vm: Component,</span><br><span class="line">  el: ?Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  if (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, &apos;beforeMount&apos;)</span><br><span class="line"></span><br><span class="line">  let updateComponent</span><br><span class="line">  updateComponent = () =&gt; &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  vm._watcher = new Watcher(vm, updateComponent, noop)</span><br><span class="line">  hydrating = false</span><br><span class="line"></span><br><span class="line">  if (vm.$vnode == null) &#123;</span><br><span class="line">    vm._isMounted = true</span><br><span class="line">    callHook(vm, &apos;mounted&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么这个 <code>mountComponent</code> 在哪里用了呢？就是在Vue的 $mount 方法中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/platforms/web/runtime/index.js</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class="line">  return mountComponent(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后会在Vue初始化的时候，判断是否有 el，如果有则执行 $mount 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/init.js</span><br><span class="line">if (vm.$options.el) &#123;</span><br><span class="line">  vm.$mount(vm.$options.el) // 如果有el属性，将内容挂载到el中去。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此生命周期逻辑应该是 beforeCreate - created - beforeMount -mounted</p><h2 id="beforeUpdate-amp-updated"><a href="#beforeUpdate-amp-updated" class="headerlink" title="beforeUpdate &amp; updated"></a>beforeUpdate &amp; updated</h2><blockquote><p><strong>beforeUpdate</strong><br>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br><strong>updated</strong><br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p></blockquote><p>找代码逻辑~ beforeUpdate 和 updated 在两个地方调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class="line">    const vm: Component = this</span><br><span class="line">    // 如果是已经挂载的，就触发beforeUpdate方法。</span><br><span class="line">    if (vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, &apos;beforeUpdate&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">    // updated hook is called by the scheduler to ensure that children are</span><br><span class="line">    // updated in a parent&apos;s updated hook.</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在执行 <code>_update</code> 方法的时候，如果 DOM 已经挂载了，则调用 <code>beforeUpdate</code> 方法。<br>在 _update 方法的最后作者也注视了调用 updated hook 的位置：<em><code>updated</code> 钩子由 <code>scheduler</code> 调用来确保子组件在一个父组件的 <code>update</code> 钩子中</em>。<br>我们找到 <code>scheduler</code>，发现有个 <code>callUpdateHooks</code> 方法，该方法遍历了 <code>watcher</code> 数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/observer/scheduler.js</span><br><span class="line">function callUpdatedHooks (queue) &#123;</span><br><span class="line">  let i = queue.length</span><br><span class="line">  while (i--) &#123;</span><br><span class="line">    const watcher = queue[i]</span><br><span class="line">    const vm = watcher.vm</span><br><span class="line">    if (vm._watcher === watcher &amp;&amp; vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, &apos;updated&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个 <code>callUpdatedHooks</code> 在 <code>flushSchedulerQueue</code> 方法中调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 刷新队列并运行watcher</span><br><span class="line"> */</span><br><span class="line">function flushSchedulerQueue () &#123;</span><br><span class="line">  flushing = true</span><br><span class="line">  let watcher, id</span><br><span class="line">  queue.sort((a, b) =&gt; a.id - b.id)</span><br><span class="line"></span><br><span class="line">  for (index = 0; index &lt; queue.length; index++) &#123;</span><br><span class="line">    watcher = queue[index]</span><br><span class="line">    id = watcher.id</span><br><span class="line">    has[id] = null</span><br><span class="line">    watcher.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const activatedQueue = activatedChildren.slice()</span><br><span class="line">  const updatedQueue = queue.slice()</span><br><span class="line"></span><br><span class="line">  resetSchedulerState()</span><br><span class="line"></span><br><span class="line">  // 调用组件的updated和activated生命周期</span><br><span class="line">  callActivatedHooks(activatedQueue)</span><br><span class="line">  callUpdatedHooks(updatedQueue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续找下去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export function queueWatcher (watcher: Watcher) &#123;</span><br><span class="line">  const id = watcher.id</span><br><span class="line">  if (has[id] == null) &#123;</span><br><span class="line">    has[id] = true // 此参数用于判断watcher的ID是否存在</span><br><span class="line">    ……</span><br><span class="line">    if (!waiting) &#123;</span><br><span class="line">      waiting = true</span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终在 <code>watcher.js</code> 找到 <code>update</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// src/core/observer/watcher.js</span><br><span class="line">update () &#123;</span><br><span class="line">  // lazy 懒加载</span><br><span class="line">  // sync 组件数据双向改变</span><br><span class="line">  if (this.lazy) &#123;</span><br><span class="line">    this.dirty = true</span><br><span class="line">  &#125; else if (this.sync) &#123;</span><br><span class="line">    this.run()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    queueWatcher(this) // 排队watcher</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等于是队列执行完 Watcher 数组的 <code>update</code> 方法后调用了 <code>updated</code> 钩子函数。</p><h2 id="beforeDestroy-amp-destroyed"><a href="#beforeDestroy-amp-destroyed" class="headerlink" title="beforeDestroy &amp; destroyed"></a>beforeDestroy &amp; destroyed</h2><blockquote><p><strong>beforeDestroy</strong><br>实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。<br><strong>destroyed</strong><br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p></blockquote><p>看代码~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">// 销毁方法</span><br><span class="line">Vue.prototype.$destroy = function () &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (vm._isBeingDestroyed) &#123;</span><br><span class="line">    // 已经被销毁</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, &apos;beforeDestroy&apos;)</span><br><span class="line">  vm._isBeingDestroyed = true</span><br><span class="line">  // 销毁过程</span><br><span class="line">  // remove self from parent</span><br><span class="line">  const parent = vm.$parent</span><br><span class="line">  if (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) &#123;</span><br><span class="line">    remove(parent.$children, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  // teardown watchers</span><br><span class="line">  if (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  let i = vm._watchers.length</span><br><span class="line">  while (i--) &#123;</span><br><span class="line">    vm._watchers[i].teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  // remove reference from data ob</span><br><span class="line">  // frozen object may not have observer.</span><br><span class="line">  if (vm._data.__ob__) &#123;</span><br><span class="line">    vm._data.__ob__.vmCount--</span><br><span class="line">  &#125;</span><br><span class="line">  // call the last hook...</span><br><span class="line">  vm._isDestroyed = true</span><br><span class="line">  // invoke destroy hooks on current rendered tree</span><br><span class="line">  vm.__patch__(vm._vnode, null)</span><br><span class="line">  // 触发 destroyed 钩子</span><br><span class="line">  callHook(vm, &apos;destroyed&apos;)</span><br><span class="line">  // turn off all instance listeners.</span><br><span class="line">  vm.$off()</span><br><span class="line">  // remove __vue__ reference</span><br><span class="line">  if (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个销毁 Vue 实例的过程，将各种配置清空和移除。</p><h2 id="activated-amp-deactivated"><a href="#activated-amp-deactivated" class="headerlink" title="activated &amp; deactivated"></a>activated &amp; deactivated</h2><blockquote><p><strong>activated</strong><br>keep-alive 组件激活时调用。<br><strong>deactivated</strong><br>keep-alive 组件停用时调用。</p></blockquote><p>找到实现代码的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">export function activateChildComponent (vm: Component, direct?: boolean) &#123;</span><br><span class="line">  if (direct) &#123;</span><br><span class="line">    vm._directInactive = false</span><br><span class="line">    if (isInInactiveTree(vm)) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (vm._directInactive) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._inactive || vm._inactive === null) &#123;</span><br><span class="line">    vm._inactive = false</span><br><span class="line">    for (let i = 0; i &lt; vm.$children.length; i++) &#123;</span><br><span class="line">      activateChildComponent(vm.$children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    callHook(vm, &apos;activated&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function deactivateChildComponent (vm: Component, direct?: boolean) &#123;</span><br><span class="line">  if (direct) &#123;</span><br><span class="line">    vm._directInactive = true</span><br><span class="line">    if (isInInactiveTree(vm)) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!vm._inactive) &#123;</span><br><span class="line">    vm._inactive = true</span><br><span class="line">    for (let i = 0; i &lt; vm.$children.length; i++) &#123;</span><br><span class="line">      deactivateChildComponent(vm.$children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    callHook(vm, &apos;deactivated&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上两个方法关键就是修改了 <code>vm._inactive</code> 的值，并且乡下遍历子组件，最后触发钩子方法。</p><h2 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h2><blockquote><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p></blockquote><p>这是 2.5 以上版本有的一个钩子，用于处理错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// src/core/util/error.js</span><br><span class="line">export function handleError (err: Error, vm: any, info: string) &#123;</span><br><span class="line">  if (vm) &#123;</span><br><span class="line">    let cur = vm</span><br><span class="line">    // 向上冒泡遍历</span><br><span class="line">    while ((cur = cur.$parent)) &#123;</span><br><span class="line">      // 获取钩子函数</span><br><span class="line">      const hooks = cur.$options.errorCaptured</span><br><span class="line">      if (hooks) &#123;</span><br><span class="line">        for (let i = 0; i &lt; hooks.length; i++) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            // 执行 errorCaptured 钩子函数</span><br><span class="line">            const capture = hooks[i].call(cur, err, vm, info) === false</span><br><span class="line">            if (capture) return</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            globalHandleError(e, cur, &apos;errorCaptured hook&apos;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  globalHandleError(err, vm, info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码很简单，看代码即可~</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>除了生命周期钩子外，vue还提供了生命周期方法来直接调用。</p><h2 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h2><blockquote><p>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。<br>如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。<br>这个方法返回实例自身，因而可以链式调用其它实例方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  if (el === document.body || el === document.documentElement) &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const options = this.$options</span><br><span class="line">  // resolve template/el and convert to render function</span><br><span class="line">  if (!options.render) &#123;</span><br><span class="line">    // 获取template</span><br><span class="line">    let template = options.template</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      if (typeof template === &apos;string&apos;) &#123;</span><br><span class="line">        if (template.charAt(0) === &apos;#&apos;) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return this</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    // 编译template</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, this)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 执行 $mount 方法</span><br><span class="line">  return mount.call(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实很简单，先获取html代码，然后执行 <code>compileToFunctions</code> 方法执行编译过程（具体编译过程在学习Render的时候再说）。</p><h2 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate"></a>vm.$forceUpdate</h2><blockquote><p>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Vue.prototype.$forceUpdate = function () &#123;</span><br><span class="line">  var vm = this;</span><br><span class="line">  if (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是强制更新方法，执行了 <code>vm._watcher.update()</code> 方法。</p><h2 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h2><blockquote><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p></blockquote><p>找了找 <code>vm.$nextTick</code> 的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/render.js</span><br><span class="line">Vue.prototype.$nextTick = function (fn: Function) &#123;</span><br><span class="line">  return nextTick(fn, this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>找到这个 <code>nextTick</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// src/core/util/next-tick.js</span><br><span class="line">export function nextTick (cb?: Function, ctx?: Object) &#123;</span><br><span class="line">  let _resolve</span><br><span class="line">  callbacks.push(() =&gt; &#123;</span><br><span class="line">    if (cb) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, ctx, &apos;nextTick&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  if (!pending) &#123;</span><br><span class="line">    pending = true</span><br><span class="line">    if (useMacroTask) &#123;</span><br><span class="line">      macroTimerFunc()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      microTimerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // $flow-disable-line</span><br><span class="line">  if (!cb &amp;&amp; typeof Promise !== &apos;undefined&apos;) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体功能逻辑等学习完 <code>render</code> 再更新……</p><h2 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy"></a>vm.$destroy</h2><blockquote><p>完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。<br>触发 beforeDestroy 和 destroyed 的钩子。</p></blockquote><p>关于$destroy 我们之前再说 destroyed 钩子的时候提到过了，这里就不再赘述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$destroy = function () &#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>首先说下过年博客计划，过年学习Vue各个模块的源码，并发布相应博客。另外还会发布一些前端知识的整理，便于下个月找工作~<br>然后，小结下自己看源码的一些小技巧：</p><ul><li>重点关注方法的执行、对象的实例化、对象属性的修改。</li><li>忽略开发版本提示逻辑、内部变量赋值。</li><li>有目标的看代码，根据主线目标进行源码学习。 </li></ul><p>OK，今天就这么多~ 明天去学习下Vue的事件源码！加油！明天见！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;春节继续写博客~加油！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次来学习一下Vue的生命周期，看看生命周期是怎么回事。&lt;/p&gt;
&lt;h1 id=&quot;callHook&quot;&gt;&lt;a href=&quot;#callHook&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建博客笔记</title>
    <link href="https://violetjack.github.io/2018/02/08/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <id>https://violetjack.github.io/2018/02/08/用hexo搭建博客笔记/</id>
    <published>2018-02-08T01:41:25.543Z</published>
    <updated>2018-02-08T01:41:58.146Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想有个自己的 Github.io 博客，感觉逼格能够上升一大截。</p></blockquote><p>很久之前就看到网上各种博客搭建的文章，但是从内心中总感觉好像是个很麻烦的事情。所以，一直没有动手去做。</p><p>昨天，趁着年前工作不忙，搭建了个博客，这里记录下过程。<br>其实，搭建hexo博客是非常简单的事情。</p><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>Mac安装前提</p><ul><li>Xcode</li><li>Node.js</li><li>Git</li></ul><p>这三个玩意儿对于我们开发者基本都是有的，没有装个就好。</p><h1 id="创建博客的过程"><a href="#创建博客的过程" class="headerlink" title="创建博客的过程"></a>创建博客的过程</h1><p>简单的几条 bash 命令就好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init [文件夹名]</span><br><span class="line">$ cd [文件夹名]</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>以上步骤就已经安装完毕了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 新建文章 layout为模板，title为文章名</span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">// 启动本地服务器看hexo博客，地址为 `http://localhost:4000/`</span><br><span class="line">$ hexo server</span><br><span class="line">// 生成静态文件</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br><span class="line">// 部署建站</span><br><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br><span class="line">// 去除缓存文件</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>这几个命令就能应付常用博客发布了。</p><h1 id="创建Github-io"><a href="#创建Github-io" class="headerlink" title="创建Github.io"></a>创建Github.io</h1><p>在我的Github中创建 [github名].github.io这个项目，比如像我的 <a href="https://github.com/violetjack/violetjack.github.io" target="_blank" rel="noopener">violetjack.github.io</a> 。</p><h1 id="上传博客配置"><a href="#上传博客配置" class="headerlink" title="上传博客配置"></a>上传博客配置</h1><p>如果是通过git开源发布的，那么只需要在hexo项目根目录的 <code>_config.yml</code> 文件中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [github.io 仓库]</span><br><span class="line">  branch: [发布的分支]</span><br><span class="line">  message: [发布消息]</span><br></pre></td></tr></table></figure></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>hexo搭建的博客有很多的主题样式，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a> 查看选择。安装过程里面都会说。</p><p>比如我们安装 <code>Ada</code> 主题，首先用git克隆下仓库。这里，可以在hexo博客项目中去执行克隆行为，直接下载到hexo项目的themes目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/shuiRong/hexo-theme-Ada.git themes/Ada</span><br></pre></td></tr></table></figure></p><p>有些主题需要安装依赖库，在hexo项目根目录中安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-jade --save</span><br></pre></td></tr></table></figure></p><p>最后，修改hexo项目根目录下 <code>_config.yml</code> 中的 theme 选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Ada</span><br></pre></td></tr></table></figure></p><p>这就完成了主题的修改。<br>主题的配置工作呢，在 <code>./themes/Ada/_config.yml</code> 中，具体修改看相应的 Github README。<br>其实如果有任何对主题不满意的地方可以直接去主题中修改，代码并不难，如果只是想改几个文本全局搜一下就能搜到了。</p><h1 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h1><p>样式中一般只有首页和文章两个标签可用，如果我们想添加其他标签，如 关于我，该怎么办呢？<br>创建 关于我 页面（添加 layout 选项，默认为post）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure></p><p>这样，项目中就多了 about 这个文件夹，修改其中的 md 文件即可编辑关于我页面。<br>然后将主题的配置 <code>./themes/Ada/_config.yml</code> 中的页面链接指向 about 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:</span><br><span class="line">  首页: /</span><br><span class="line">  文章: /archives</span><br><span class="line">  关于: /about</span><br></pre></td></tr></table></figure></p><p>好啦，这里就简单介绍下Hexo的用法~主要是记录下搭建的过程。整理下步骤：</p><ul><li>搭建环境</li><li>创建 Github.io，或者说GithubPage</li><li>使用hexo搭建博客</li><li>选择样式，添加页面、添加文章内容。</li><li>发布</li></ul><p>就这么多啦~快去选择一个喜欢的样式做一个自己的博客，提升逼格把~<br><strong>最后展示一下我的博客：</strong><a href="https://violetjack.github.io/">Vue实验室</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo中文网</a><br><a href="https://pages.github.com/" target="_blank" rel="noopener">github page</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一直想有个自己的 Github.io 博客，感觉逼格能够上升一大截。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久之前就看到网上各种博客搭建的文章，但是从内心中总感觉好像是个很麻烦的事情。所以，一直没有动手去做。&lt;/p&gt;
&lt;p&gt;昨天，趁着年前工作
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习一 —— 数据选项 State 学习</title>
    <link href="https://violetjack.github.io/2018/02/03/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80%20%E2%80%94%E2%80%94%20%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9%20State%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/03/Vue.js源码学习一 —— 数据选项 State 学习/</id>
    <published>2018-02-02T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.271Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于Vue源码学习的博客， <a href="http://hcysun.me/" target="_blank" rel="noopener">HcySunYang</a>的<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。<br>注意：本文所用Vue版本为 <code>2.5.13</code><br>PS：本文有点草率，之后会重写改进。</p></blockquote><h1 id="关于源码学习"><a href="#关于源码学习" class="headerlink" title="关于源码学习"></a>关于源码学习</h1><p>关于学习源码，我有话要说~<br>一开始我学习Vue的源码，是将 <a href="https://github.com/vuejs/vue/blob/dev/dist/vue.js" target="_blank" rel="noopener">Vue.js</a> 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。<br>其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。<br>所以呢，我看源码的经验教训有如下几点：</p><ul><li>看代码，必须带着问题去找实现代码。</li><li>保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。</li><li>找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。</li><li>想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~</li><li>学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~</li></ul><h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><p>这里我们来解决从哪里开始看代码的流程，重点是<strong>找到Vue构造函数的实现</strong>。<br>首先，找到 <code>package.json</code> 文件，从中找到编译命令 <code>&quot;dev&quot;: &quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</code>，这里 <code>rollup</code> 是类似于 Webpack 的打包工具，打包文件在 <code>script/config.js</code> 中，找到该文件。找 <code>entry</code> 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 <code>dist/vue.js</code> 的配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Runtime+compiler development build (Browser)</span><br><span class="line">&apos;web-full-dev&apos;: &#123;</span><br><span class="line">  entry: resolve(&apos;web/entry-runtime-with-compiler.js&apos;),</span><br><span class="line">  dest: resolve(&apos;dist/vue.js&apos;),</span><br><span class="line">  format: &apos;umd&apos;,</span><br><span class="line">  env: &apos;development&apos;,</span><br><span class="line">  alias: &#123; he: &apos;./entity-decoder&apos; &#125;,</span><br><span class="line">  banner</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>好，这里就找到了 <code>web/entry-runtime-with-compiler.js</code> 这个路径，完整路径应该是 <code>src/platform/web/entry-runtime-with-compiler.js</code>。在这个文件中我们找到一个Vue对象import进来了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;./runtime/index&apos;</span><br></pre></td></tr></table></figure></p><p>我们顺着找到到 <code>src/platform/web/runtime/index.js</code> 这个文件，在文件中发现导入文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;core/index&apos;</span><br></pre></td></tr></table></figure></p><p>就顺着这个思路找，最终找到 <code>src/core/instance/index.js</code> 这个文件。<br>完整找到Vue实例入口文件的流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">script/config.js</span><br><span class="line">src/platform/web/entry-runtime-with-compiler.js</span><br><span class="line">src/platform/web/runtime/index.js</span><br><span class="line">src/core/index.js</span><br><span class="line">src/core/instance/index.js</span><br></pre></td></tr></table></figure></p><p>简单看看Vue构造函数的样子~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; initMixin &#125; from &apos;./init&apos;</span><br><span class="line">import &#123; stateMixin &#125; from &apos;./state&apos;</span><br><span class="line">import &#123; renderMixin &#125; from &apos;./render&apos;</span><br><span class="line">import &#123; eventsMixin &#125; from &apos;./events&apos;</span><br><span class="line">import &#123; lifecycleMixin &#125; from &apos;./lifecycle&apos;</span><br><span class="line">import &#123; warn &#125; from &apos;../util/index&apos;</span><br><span class="line"></span><br><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue) // 初始化</span><br><span class="line">stateMixin(Vue) // 状态混合</span><br><span class="line">eventsMixin(Vue) // 事件混合</span><br><span class="line">lifecycleMixin(Vue) // 生命周期混合</span><br><span class="line">renderMixin(Vue) // 渲染混合</span><br><span class="line"></span><br><span class="line">export default Vue</span><br></pre></td></tr></table></figure></p><p>可以看到Vue的构造函数，里面只做了 <code>this._init(options)</code> 行为。这个 <code>_init</code> 方法在执行 <code>initMixin</code> 方法的时候定义了。找到同目录下的 <code>init.js</code> 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">    const vm: Component = this</span><br><span class="line">    // a uid</span><br><span class="line">    vm._uid = uid++</span><br><span class="line"></span><br><span class="line">    let startTag, endTag</span><br><span class="line">    /* istanbul ignore if */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class="line">      endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class="line">      mark(startTag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // a flag to avoid this being observed</span><br><span class="line">    vm._isVue = true</span><br><span class="line">    // merge options</span><br><span class="line">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      // optimize internal component instantiation</span><br><span class="line">      // since dynamic options merging is pretty slow, and none of the</span><br><span class="line">      // internal component options needs special treatment.</span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 合并配置项</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    /* istanbul ignore else */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      initProxy(vm) // 初始化代理</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      vm._renderProxy = vm</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vm._self = vm // 暴露对象自身</span><br><span class="line">    initLifecycle(vm) // 初始化生命周期</span><br><span class="line">    initEvents(vm) // 初始化事件：on,once,off,emit</span><br><span class="line">    initRender(vm) // 初始化渲染：涉及到Virtual DOM</span><br><span class="line">    callHook(vm, &apos;beforeCreate&apos;) //  触发 beforeCreate 生命周期钩子</span><br><span class="line">    initInjections(vm) // 在初始化 data/props 前初始化Injections</span><br><span class="line">    initState(vm) // 初始化状态选项</span><br><span class="line">    initProvide(vm) // 在初始化 data/props 后初始化Provide</span><br><span class="line">    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject</span><br><span class="line">    callHook(vm, &apos;created&apos;) // 触发 created 生命周期钩子</span><br><span class="line"></span><br><span class="line">    /* istanbul ignore if */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      vm._name = formatComponentName(vm, false)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果Vue配置项中有el，直接挂在到DOM中</span><br><span class="line">    if (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抓住重点，<strong>我们是要来学习State的。</strong>从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。</p><h1 id="学习State"><a href="#学习State" class="headerlink" title="学习State"></a>学习State</h1><p>之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：</p><blockquote><p>了解Vue的数据选项的运行机制。</p></blockquote><p>在<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。</p><h2 id="通过data理解mvvm"><a href="#通过data理解mvvm" class="headerlink" title="通过data理解mvvm"></a>通过data理解mvvm</h2><p>这里我通过自己的思路再来整理下项目中data的实现。<br><strong>注：</strong>由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>中讲的非常清晰明了。</p><p><strong>以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。</strong></p><p>在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：</p><ol><li>获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。</li><li>遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 <code>vm.name</code> 来修改和获取 data 中的 name 的值。</li><li>执行observe方法，监听data的变化。</li></ol><p>重点在 <code>observe</code> 方法，于是我们根据 import 关系找到 <code>src/core/observer/index.js</code> 文件。<code>observe</code> 方法通过传入的值最终返回一个Observer类的实例对象。<br>找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。<br>找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。<br><strong>找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。</strong>为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 <code>dep.depend()</code> 方法，在 set 方法中执行 <code>dep.notify()</code> 方法。这个先不多讲，最后进行联结说明。<br>找到同目录下的 <code>dep.js</code> 文件，文件不长。定义了 Dep 类和<code>pushTarget</code>、<code>popTarget</code> 方法。在 Dep 类中有我们之前提到的 <code>depend</code> 和 <code>notify</code> 方法。看下两个方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">depend () &#123;</span><br><span class="line">  if (Dep.target) &#123;</span><br><span class="line">    Dep.target.addDep(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notify () &#123;</span><br><span class="line">  // stabilize the subscriber list first</span><br><span class="line">  const subs = this.subs.slice()</span><br><span class="line">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].update()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 <code>depend</code> 方法中，Dep.target 就是一个 Watcher 实例，它的 <code>addDep</code> 方法最终会调用到 Dep 的 <code>addSubs</code> 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。<br>在 <code>notify</code> 方法中，将 Watcher 数组 subs 遍历，执行他们的 <code>update</code> 方法。<code>update</code> 最终会去执行 <code>watcher</code> 的回调函数。<br>即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。<br>这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~<br>Watcher的构造函数最终调用了 <code>get</code> 方法，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">get () &#123;</span><br><span class="line">   pushTarget(this)</span><br><span class="line">   let value</span><br><span class="line">   const vm = this.vm</span><br><span class="line">   try &#123;</span><br><span class="line">     value = this.getter.call(vm, vm)</span><br><span class="line">   &#125; catch (e) &#123;</span><br><span class="line">     if (this.user) &#123;</span><br><span class="line">       handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       throw e</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; finally &#123;</span><br><span class="line">     // &quot;touch&quot; every property so they are all tracked as</span><br><span class="line">     // dependencies for deep watching</span><br><span class="line">     if (this.deep) &#123;</span><br><span class="line">       traverse(value)</span><br><span class="line">     &#125;</span><br><span class="line">     popTarget()</span><br><span class="line">     this.cleanupDeps()</span><br><span class="line">   &#125;</span><br><span class="line">   return value</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><code>get</code> 方法做了如下几步：</p><ol><li>将当前 Watcher 实例传递给 Dep 的 Dep.target。</li><li>执行 Watcher 所监测的数据的 <code>getter</code> 方法。</li><li>最终，将 <code>Dep.target</code> 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。</li></ol><p>其中要注意的是，在第二步中数据的 <code>getter</code> 方法会执行到 <code>dep.depend()</code> 方法，<code>depend</code> 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~<br>这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 <code>notify</code> 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，<code>notify</code> 方法遍历执行 watcher 的 <code>update</code> 方法，<code>update</code> 方法最终遍历执行回调函数。</p><ol><li>执行 <code>observe</code> 方法，创建 Observer 执行 <code>walk</code> 为对象数据添加setter 和 getter</li><li>在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 <code>dep.depend()</code> 收集 watcher，在 setter 方法中执行 <code>dep.notify()</code> 方法，最终遍历执行 watcher 数组的回调函数。</li><li>Dep 类似于 Watcher 和 Observer 的中间件。</li><li>Watcher 用于监听变化，并执行回调函数。</li><li>当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target</li><li>Watcher 调用监测数据的 <code>getter</code>方法触发 <code>dep.depend()</code></li><li><code>dep.depend()</code>方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。</li><li>当被监测的数据内容发生改变时，执行 <code>setter</code> 方法，触发 <code>dep.notify()</code> 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。</li></ol><p>嗯……就是这样~之后把挖的坑填上！</p><h2 id="watch实现"><a href="#watch实现" class="headerlink" title="watch实现"></a>watch实现</h2><p>说完了 Data 的监听流程，说说 watch 应该就不难啦~<br>找到 <code>src/core/instance/state.js</code> 的 <code>initWatch</code> 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 <code>createWatcher</code> 方法。<br>继续看 <code>createWatcher</code> 方法，这个方法也很简单，最终返回 <code>vm.$watch(keyOrFn, handler, options)</code>。我们继续往下找~<br>在 <code>stateMixin</code> 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$watch = function (</span><br><span class="line">  expOrFn: string | Function,</span><br><span class="line">  cb: any,</span><br><span class="line">  options?: Object</span><br><span class="line">): Function &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (isPlainObject(cb)) &#123;</span><br><span class="line">    return createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">  &#125;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  options.user = true</span><br><span class="line">  const watcher = new Watcher(vm, expOrFn, cb, options)</span><br><span class="line">  if (options.immediate) &#123;</span><br><span class="line">    cb.call(vm, watcher.value)</span><br><span class="line">  &#125;</span><br><span class="line">  return function unwatchFn () &#123;</span><br><span class="line">    watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果回调函数 cb 是一个对象，那么返回并执行 <code>createWatcher</code> 函数，最终还是会走到 $watch 方法中。<br>否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。<br>那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  a: function(val, oldVal)&#123;</span><br><span class="line">    console.log(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以找到 <code>src/core/instance/observer/watcher.js</code> 中找到 <code>run</code> 方法。可以看到 <code>this.cb.call(this.vm, value, oldValue)</code> 这里的 cb 回调函数传递的参数就是 value 和 oldValue。<br>这里说个基础知识，函数使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener"> call 方法</a>执行，第一个参数是方法的this值，之后才是真正的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">run () &#123;</span><br><span class="line">    if (this.active) &#123;</span><br><span class="line">      const value = this.get()</span><br><span class="line">      if (</span><br><span class="line">        value !== this.value ||</span><br><span class="line">        // Deep watchers and watchers on Object/Arrays should fire even</span><br><span class="line">        // when the value is the same, because the value may</span><br><span class="line">        // have mutated.</span><br><span class="line">        isObject(value) ||</span><br><span class="line">        this.deep</span><br><span class="line">      ) &#123;</span><br><span class="line">        // set new value</span><br><span class="line">        const oldValue = this.value</span><br><span class="line">        this.value = value</span><br><span class="line">        if (this.user) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            this.cb.call(this.vm, value, oldValue)</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            handleError(e, this.vm, `callback for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.cb.call(this.vm, value, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。</strong></p><h2 id="props实现"><a href="#props实现" class="headerlink" title="props实现"></a>props实现</h2><p>接下来我们看看props，官网对props的定义如下：</p><blockquote><p>props 可以是数组或对象，用于接收来自父组件的数据。</p></blockquote><p>找到 <code>initProps</code> 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function initProps (vm: Component, propsOptions: Object) &#123;</span><br><span class="line">  const propsData = vm.$options.propsData || &#123;&#125;</span><br><span class="line">  const props = vm._props = &#123;&#125;</span><br><span class="line">  // cache prop keys so that future props updates can iterate using Array</span><br><span class="line">  // instead of dynamic object key enumeration.</span><br><span class="line">  const keys = vm.$options._propKeys = []</span><br><span class="line">  const isRoot = !vm.$parent</span><br><span class="line">  // root instance props should be converted</span><br><span class="line">  observerState.shouldConvert = isRoot</span><br><span class="line">  for (const key in propsOptions) &#123;</span><br><span class="line">    keys.push(key)</span><br><span class="line">    const value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    /* istanbul ignore else */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      const hyphenatedKey = hyphenate(key)</span><br><span class="line">      if (isReservedAttribute(hyphenatedKey) ||</span><br><span class="line">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `&quot;$&#123;hyphenatedKey&#125;&quot; is a reserved attribute and cannot be used as component prop.`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class="line">        if (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            `Avoid mutating a prop directly since the value will be ` +</span><br><span class="line">            `overwritten whenever the parent component re-renders. ` +</span><br><span class="line">            `Instead, use a data or computed property based on the prop&apos;s ` +</span><br><span class="line">            `value. Prop being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      defineReactive(props, key, value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!(key in vm)) &#123;</span><br><span class="line">      proxy(vm, `_props`, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observerState.shouldConvert = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，props 和 data 类似。在 <code>initProps</code> 中无非做了两步：<code>defineReactive</code> 和 <code>proxy</code>，这两个方法我们在提到 data 的时候讲过了。<code>defineReactive</code> 为数据设置 setter、getter，<code>proxy</code> 方法将 <code>props</code> 中的属性映射到 Vue 实例 vm 上，便于我们可以用 <code>vm.myProps</code> 来获取数据。<br>至此，我有个疑问：data与props有何不同呢？<br>data使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。<br>另外，data和props有个不同的地方就是props是不建议改变的。详见<a href="https://cn.vuejs.org/v2/guide/components.html#单向数据流" target="_blank" rel="noopener">单向数据流</a><br>小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~</p><h2 id="computed实现"><a href="#computed实现" class="headerlink" title="computed实现"></a>computed实现</h2><p>再来说说computed，找到初始化computed方法 <code>src/core/instance/state.js</code> 中的 <code>initComputed</code> 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 <code>defineComputed</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function initComputed (vm: Component, computed: Object) &#123;</span><br><span class="line">  ...</span><br><span class="line">  for (const key in computed) &#123;</span><br><span class="line">    ...</span><br><span class="line">    if (!isSSR) &#123;</span><br><span class="line">      watchers[key] = new Watcher(</span><br><span class="line">        vm,</span><br><span class="line">        getter || noop,</span><br><span class="line">        noop,</span><br><span class="line">        computedWatcherOptions</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!(key in vm)) &#123;</span><br><span class="line">      defineComputed(vm, key, userDef)</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>defineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 <code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>。自此，我们可以通过 <code>vm.computedValue</code> 来获取计算属性结果了。<br><strong>小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。</strong></p><h2 id="methods实现"><a href="#methods实现" class="headerlink" title="methods实现"></a>methods实现</h2><p>继续在 <code>state.js</code> 中看到 <code>initMethods</code> 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function initMethods (vm: Component, methods: Object) &#123;</span><br><span class="line">  const props = vm.$options.props</span><br><span class="line">  for (const key in methods) &#123;</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      if (methods[key] == null) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; has an undefined value in the component definition. ` +</span><br><span class="line">          `Did you reference the function correctly?`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      if (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; has already been defined as a prop.`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      if ((key in vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; conflicts with an existing Vue instance method. ` +</span><br><span class="line">          `Avoid defining component methods that start with _ or $.`</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 <code>bind</code> 方法执行该函数。<br>找到这个 <code>bind</code> 方法，位置在 <code>src/shared/util.js</code> 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export function bind (fn: Function, ctx: Object): Function &#123;</span><br><span class="line">  function boundFn (a) &#123;</span><br><span class="line">    const l: number = arguments.length</span><br><span class="line">    return l</span><br><span class="line">      ? l &gt; 1</span><br><span class="line">        ? fn.apply(ctx, arguments)</span><br><span class="line">        : fn.call(ctx, a)</span><br><span class="line">      : fn.call(ctx)</span><br><span class="line">  &#125;</span><br><span class="line">  // record original fn length</span><br><span class="line">  boundFn._length = fn.length</span><br><span class="line">  return boundFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法返回一个执行 <code>methods</code> 中函数的方法（这种方法的执行方式比较快）。<br><strong>小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。</strong></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文纯属个人理解，如有任何问题，请及时指出，不胜感激~<br>最后提出一个看源码的小心得：</p><blockquote><p>我发现……看源码、跟流程，尽量将注意力集中在<strong>方法的执行</strong>和<strong>类的实例化</strong>行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。</p></blockquote><p>至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……<br>通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于Vue源码学习的博客， &lt;a href=&quot;http://hcysun.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HcySunYang&lt;/a&gt;的&lt;a href=&quot;http://hcysun.me/2017/03/03
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习系列倡议书</title>
    <link href="https://violetjack.github.io/2018/01/29/Vue%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E5%80%A1%E8%AE%AE%E4%B9%A6/"/>
    <id>https://violetjack.github.io/2018/01/29/Vue学习系列倡议书/</id>
    <published>2018-01-28T16:00:00.000Z</published>
    <updated>2018-02-07T02:26:26.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我想通过社区的力量把《Vue学习系列》做到最优质的Vue系列博客</p></blockquote><h1 id="解决学习痛点"><a href="#解决学习痛点" class="headerlink" title="解决学习痛点"></a>解决学习痛点</h1><p>学习前端的同学都知道，前端有一大痛点就是知识点分散，学习的东西多。<br>就像我学习Vue，一拿到手就告诉我有个全家桶要学习。虽然一个一个学习下来了，但是过程是比较漫长的。而且如果是刚入门前端世界，会发现还没开始写代码各种配置都能玩好几天。Webpack打包、ESLint代码检查、Babel语法转译等等……<br>写本系列博客的本意是想将学习Vue的内容用博客的形式写出来，加深对知识点的理解。同时也希望能够帮助到和我有同样需求的朋友。<br>不过，就在昨天晚上我突然多了一个想法。<strong>我想把《Vue学习系列》做到最优质的Vue系列博客。</strong>通过我惯用的 <strong>资料索引+个人理解+Demo</strong> 的方式将Vue前端世界的所有都讲清楚、讲明白。让想学习前端的同学能够快速度过学习的迷茫期。通过本系列博客，快速入门Vue前端世界。<br><strong>打一个比方就是：官方文档是满汉全席，那么本系列博客就是肯德基、麦当劳，提高效率，拿来就用！</strong></p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p><strong>通过一篇博客和一个演示项目快速学会Vue某个功能的常规使用方法。</strong><br>本系列博客定位是刚入门学习Vue的同学~相比于看官方文档，通过本系列博客有几个优点：</p><ul><li><strong>常用功能</strong> —— 正如二八原则一样，100%的学习内容中只有20%是常用而又必要的，我们先把20%掌握开始上手，其他80%按需学习。</li><li><strong>个人理解</strong> —— 尽量用容易理解的语言对技术点进行描述，最好能让没有学过前端的人都能理解是怎么回事。</li><li><strong>实例项目</strong> —— 每篇博客一个简单的小项目，包含了博客中提到的所有功能的实现（其实作者是边撸博客边写demo的，确保博客内容是可执行的）。博客和demo配合味道更佳哦~</li><li><strong>踩坑提醒</strong> —— 前端项目中总是会有一些奇奇怪怪的坑，如果作者踩过了，我会尽量提出。避免其他同学浪费时间精力去过这些无谓的坑。</li></ul><p>在入门系列发布后，会继续发布高级系列、源码解析系列。让我们一起学习共同进步。</p><h1 id="倡议"><a href="#倡议" class="headerlink" title="倡议"></a>倡议</h1><blockquote><p><a href="https://github.com/violetjack/VueStudyDemos/tree/master/Blogs" target="_blank" rel="noopener">《Vue学习系列》博客</a>的文本和Demo都将发布在Github上，并且博客内容将在<a href="https://www.jianshu.com/c/edec9ac6d9a7" target="_blank" rel="noopener">简书</a>上首发和更新。<br>如果对本系列课程有任何建议、想法、评论。可以在简书下留言，或者在VueStudyDemos项目中提交 issue 和 PR，希望通过大家的力量将本系列课程做好，帮助到更多人。</p></blockquote><p>到我写本文的时候，Vue学习系列的demo项目<a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">VueStudyDemos</a>已有173颗star了。感谢大家的支持，希望本系列博客真的可以帮助到大家。之后还会继续产出Vue相关的博客。</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我想通过社区的力量把《Vue学习系列》做到最优质的Vue系列博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;解决学习痛点&quot;&gt;&lt;a href=&quot;#解决学习痛点&quot; class=&quot;headerlink&quot; title=&quot;解决学习痛点&quot;&gt;&lt;/a&gt;解
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</title>
    <link href="https://violetjack.github.io/2018/01/26/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B8%83%20%E2%80%94%E2%80%94%20Vue%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%B2%E6%9F%93Nuxt%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/01/26/Vue.js学习系列七 —— Vue服务器渲染Nuxt学习/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我又回来啦~这次我们来学习Vue的服务器渲染SSR。</p></blockquote><p>关于SSR的文章网上很多，一开始看得我云里雾里。然后去<a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue.js 服务器渲染指南</a>和<a href="https://zh.nuxtjs.org/guide" target="_blank" rel="noopener">nuxt官网</a>看了看，发现文章大多都是搬运官网的内容，真正讲的清晰明了的很少。所以想写篇文章学习下SSR，希望能够帮助大家快速理解Vue SSR。</p><h1 id="什么是SSR？"><a href="#什么是SSR？" class="headerlink" title="什么是SSR？"></a>什么是SSR？</h1><p>SSR，即服务器渲染，就是在服务器端将对Vue页面进行渲染生成html文件，将html页面传给浏览器。<br>优点：</p><ul><li>SEO 不同于SPA的HTML只有一个无实际内容的HTML和一个app.js，SSR生成的HTML是有内容的，这让搜索引擎能够索引到页面内容。</li><li>更快内容到达时间 传统的SPA应用是将bundle.js从服务器获取，然后在客户端解析并挂载到dom。而SSR直接将HTML字符串传递给浏览器。大大加快了首屏加载时间。</li></ul><p>可以从下面两张图来看，第一张图是SSR生成的HTML页面，第二种是传统SPA生成的HTML页面。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-744de5a6489440da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SSR"><br><img src="http://upload-images.jianshu.io/upload_images/1987062-1b940fb15ba7fbd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SPA"></p><h1 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h1><p>我看了官方 SSR 的介绍，也看了 Nuxt.js 的文档。本质上来说 SSR 是node后端的操作行为，作为只想好好写前端代码的我，不想太折腾。而 Nuxt.js 非常完美地整合了 SSR 的功能。让我们可以开箱即用~官方也推荐使用 Nuxt.js 来搭建 SSR 项目。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>我觉得  Nuxt.js  相比自己写 SSR 有几点好处。</p><ul><li>无需配置Webpack：我一开始还在找Webpack配置呢，看了文档知道nuxt都帮我们封装好了。如需修改Webpack配置只需修改nuxt.config.js 文件。</li><li>无需node知识：只要你会写vue前端，你就可以写出SSR。无需知道SSR和node、express的配置方法（不过现在的前端多少都会点node知识~）。</li><li>整合了vue全家桶，直接可用。方便程度不亚于 <code>vue-cli</code>：安装Nuxt——写组件——编译并启动服务———看效果。就这么简单。</li><li>配置简单，文档友好：认真看下 Nuxt.js 文档就会发现涵盖的内容并不多，而功能很全，非常适合入手。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装方法<a href="https://zh.nuxtjs.org/guide/installation" target="_blank" rel="noopener">在此</a>。很简单，生成模板，然后npm安装依赖，最后再运行。<br>简单搬运下步骤吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// vue-cli 创建nuxt模板项目</span><br><span class="line">$ vue init nuxt-community/starter-template &lt;project-name&gt;</span><br><span class="line">// 安装依赖项</span><br><span class="line">$ cd &lt;project-name&gt;</span><br><span class="line">$ npm install</span><br><span class="line">// 编译并启动服务</span><br><span class="line">$ npm run dev</span><br><span class="line">// 打开 http://localhost:3000</span><br></pre></td></tr></table></figure></p><p><strong>安装遇到的问题：</strong><br>由于 Nuxt.js 中使用了 <code>async...await</code> 语法，而低版本的 node 不支持这个语法，所以必须升级 node 到 <strong>7.0</strong> 版本之上~<br>然后建议不要使用cnpm，我用cnpm安装运行老报错，感觉有坑。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Nuxt.js 花了很大的篇幅讲它的目录结构，其实了解了目录结构就了解了 Nuxt.js 的大概。Nuxt.js 帮我们配置好了所有东西，我们只需要按照它的要求在相应目录下创建文件写代码即可。</p><ul><li>assets 需要编译的资源文件，如 JavaScript、SASS、LESS 等。</li><li>static 不需要编译的静态资源文件，如图片资源。</li><li>components 顾名思义，存放 <code>*.vue</code> 组件的地方。常规 vue 组件写法。</li><li>layouts 布局目录，设置布局的地方，其中 <code>&lt;nuxt/&gt;</code> 标签是我们写的页面内容。可用作添加导航栏、底部栏等截面。</li><li>middleware 中间件目录，所谓中间件，就是在页面与页面跳转中执行的函数方法。如页面跳转时验证用户信息操作。</li><li>pages 页面目录。重点来了~这就是我们存放展示页面的地方。该目录下的文件会转换成相应的路由路径供浏览器访问。另外呢，该目录下的 <code>*.vue</code> 页面文件中  Nuxt.js 提供了一些特殊的方法用于处理服务器渲染中的事件。具体关于路由和特殊方法列举在下面了。<ul><li><a href="https://zh.nuxtjs.org/guide/routing" target="_blank" rel="noopener">pages 路由</a></li><li><a href="https://zh.nuxtjs.org/guide/views#页面" target="_blank" rel="noopener">页面组件</a>的简单介绍，具体特殊配置项的用法请查阅<a href="https://zh.nuxtjs.org/api" target="_blank" rel="noopener">API</a>。</li></ul></li><li>plugins 插件目录，像 mint-ui 这种第三方插件就放在这里啦~具体用法<a href="https://zh.nuxtjs.org/guide/plugins" target="_blank" rel="noopener">看这里</a>。</li><li>store vuex 状态管理器目录，如果该目录是空的， Nuxt.js 将不启用 vuex。当我们在该文件夹下创建 index.js 文件后即可使用 vuex 状态管理器。用法<a href="https://zh.nuxtjs.org/guide/vuex-store" target="_blank" rel="noopener">在此</a>！</li><li>nuxt.config.js 该文件是 Nuxt.js 的唯一配置项，之前提过 Nuxt.js 将 Webpack 等一众配置都封装好了，所以如果需要特殊配置，只需要修改该文件来覆盖默认配置即可。具体配置参数请查阅<a href="https://zh.nuxtjs.org/api" target="_blank" rel="noopener">API</a>。</li><li>package.json 不解释……</li></ul><h1 id="Demo演示"><a href="#Demo演示" class="headerlink" title="Demo演示"></a>Demo演示</h1><p>好消息，<a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">VueStudyDemos</a>又更新啦！欢迎Star~<a href="https://github.com/violetjack/VueStudyDemos/tree/master/NuxtDemo" target="_blank" rel="noopener">本文Demo</a>已收入到VueStudyDemos中。<br>下面我们来简单实现下各文件夹所提到的功能。</p><h2 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h2><p>我在 assets 文件夹下添加了 font-awesome 字体库，在 static 文件夹中放了张 Vue 的 logo 图片。然后对资源进行调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-address-book&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;img src=&quot;~/static/logo.png&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>这里需要将 font-awesome 的 css 变为全局 css，避免每个用到的页面中都 import 字体库的css。所以我们在 nuxt.config.js 中添加如下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  css: [</span><br><span class="line">    &apos;~/assets/font-awesome/css/font-awesome.min.css&apos;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h2><p>组件存放在 components 文件夹下，这个我们讲目录的时候提到过。组件的用法和常用 vue 组件用法一致。<br>定义组件 Avatar，然后在 Page 页面中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;avatar/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import avatar from &apos;~/components/Avatar&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    ...</span><br><span class="line">    components: &#123;</span><br><span class="line">        avatar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>在 layouts 目录中，default 是默认布局。我们可以修改默认布局也可以新建布局来使用。<br>在布局文件中 <code>&lt;/nuxt&gt;</code> 标签是我们要服务器渲染的区域。<br>下面我们来创建个布局玩玩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// layouts/page.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;mt-header fixed title=&quot;标题2&quot;&gt;&lt;/mt-header&gt;</span><br><span class="line">    &lt;nuxt/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们来使用布局，在 pages 页面中配置 layout 选项（如果不配置默认就是 <code>default</code>）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    ...</span><br><span class="line">    layout: &apos;page&apos;  // 默认是 &apos;default&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>所谓中间件，就是在两个页面跳转之间执行的行为。比如我定义一个中间件 add.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default function (&#123; store &#125;) &#123;</span><br><span class="line">    store.commit(&apos;increment&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在 nuxt.config.js 中进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  router: &#123;</span><br><span class="line">    middleware: &apos;add&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，在每次页面跳转的时候都会执行一次中间件方法了。当然，也可以单独定义某个页面的中间件，具体看官网啦~</p><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>页面，就是在pages目录下的 <code>*.vue</code> 文件，Nuxt.js 将目录结构配置为 vue-router 路由系统，所以我们可以直接通过文件名来访问到相应页面（先不提特殊路由）。<br>比如 <code>pages/app.vue</code> 文件就可以通过 <code>http://localhost:3000/app</code> 来进行访问。<br>注意：页面组件写法与常用 Vue 组件写法相同，但 Nuxt.js 还提供了一些特殊配置项来配置服务器渲染过程中的行为。具体有啥配置请看<a href="https://zh.nuxtjs.org/guide/views#页面" target="_blank" rel="noopener">页面文档</a>。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由就是使 pages 目录能够直接访问的原因。Nuxt.js 非常巧妙地使用目录结构和文件名称将 vue-router 的各种用法都涵盖进去了。如动态路由、嵌套路由等。具体可参考<a href="https://zh.nuxtjs.org/guide/routing" target="_blank" rel="noopener">文档</a>。也可以看看demo的 <a href="https://github.com/violetjack/VueStudyDemos/tree/master/NuxtDemo/pages" target="_blank" rel="noopener">pages</a> 目录。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>对于前端项目，插件的使用当然是必不可少的。官网上对这方面讲的很清楚。我贴一下 demo 中的用法。这里用的是 mint-ui 库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// plugins/mint-ui.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import MintUI from &apos;mint-ui&apos;</span><br><span class="line">import &apos;mint-ui/lib/style.css&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// nuxt.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    vendor: [&apos;mint-ui&apos;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &apos;~plugins/mint-ui&apos;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用第三方库 mint-ui 啦！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;mt-navbar v-model=&quot;selected&quot;&gt;</span><br><span class="line">        &lt;mt-tab-item id=&quot;1&quot;&gt;选项一&lt;/mt-tab-item&gt;</span><br><span class="line">        &lt;mt-tab-item id=&quot;2&quot;&gt;选项二&lt;/mt-tab-item&gt;</span><br><span class="line">        &lt;mt-tab-item id=&quot;3&quot;&gt;选项三&lt;/mt-tab-item&gt;</span><br><span class="line">    &lt;/mt-navbar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- tab-container --&gt;</span><br><span class="line">    &lt;mt-tab-container v-model=&quot;selected&quot;&gt;</span><br><span class="line">        &lt;mt-tab-container-item id=&quot;1&quot;&gt;</span><br><span class="line">            &lt;mt-cell v-for=&quot;n in 10&quot; :key=&quot;n&quot; :title=&quot;&apos;内容 &apos; + n&quot; /&gt;</span><br><span class="line">        &lt;/mt-tab-container-item&gt;</span><br><span class="line">        &lt;mt-tab-container-item id=&quot;2&quot;&gt;</span><br><span class="line">            &lt;mt-cell v-for=&quot;n in 4&quot; :key=&quot;n&quot; :title=&quot;&apos;测试 &apos; + n&quot; /&gt;</span><br><span class="line">        &lt;/mt-tab-container-item&gt;</span><br><span class="line">        &lt;mt-tab-container-item id=&quot;3&quot;&gt;</span><br><span class="line">            &lt;mt-cell v-for=&quot;n in 6&quot; :key=&quot;n&quot; :title=&quot;&apos;选项 &apos; + n&quot; /&gt;</span><br><span class="line">        &lt;/mt-tab-container-item&gt;</span><br><span class="line">    &lt;/mt-tab-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>对于 vuex，用法有两种：<a href="https://zh.nuxtjs.org/guide/vuex-store#普通方式" target="_blank" rel="noopener">普通方式</a>和<a href="https://zh.nuxtjs.org/guide/vuex-store#模块方式" target="_blank" rel="noopener">模块方式</a>，用法和我们常用的 vuex 一样。我的demo中是直接复制官网的代码。<br>需要注意的是，vuex 的数据会存在<a href="https://zh.nuxtjs.org/api/#上下文对象" target="_blank" rel="noopener">context对象</a>中，我们可以通过context对象获取状态数据。</p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>发布有两种方式服务器应用渲染部署和静态部署，发布方式<a href="https://zh.nuxtjs.org/guide/commands#发布部署" target="_blank" rel="noopener">看这里</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>去看 Nuxt.js 的 <a href="https://zh.nuxtjs.org/api" target="_blank" rel="noopener">API</a>，会发现 Nuxt.js 真的是高度封装。对于 Nuxt.js 生成的模板项目，只有一些必要配置是需要我们去完成的。Nuxt.js 可以说是一个非常友好而强大的 SSR 框架了。</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我又回来啦~这次我们来学习Vue的服务器渲染SSR。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于SSR的文章网上很多，一开始看得我云里雾里。然后去&lt;a href=&quot;https://ssr.vuejs.org/zh/&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ES6 学习笔记（下）</title>
    <link href="https://violetjack.github.io/2018/01/21/ES6%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://violetjack.github.io/2018/01/21/ES6 学习笔记（下）/</id>
    <published>2018-01-20T16:00:00.000Z</published>
    <updated>2018-02-07T02:27:11.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>认真学习了一遍ES6，发现很多很好用的功能。<br>学习资料：<a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p></blockquote><p>好啦，继续下半部分的学习。</p><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><p>Proxy 用于修改对象的某些操作行为。套用书上的栗子，实现了对象的set、get方法拦截。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get: function (target, key, receiver) &#123;</span><br><span class="line">        console.log(`getting $&#123;key&#125;!`);</span><br><span class="line">        return Reflect.get(target, key, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function (target, key, value, receiver) &#123;</span><br><span class="line">        console.log(`setting $&#123;key&#125;!`);</span><br><span class="line">        return Reflect.set(target, key, value, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.count = 1</span><br><span class="line">obj.name = &apos;jack&apos;</span><br><span class="line">obj.count++</span><br><span class="line"></span><br><span class="line">// setting count</span><br><span class="line">// setting name</span><br><span class="line">// getting count</span><br><span class="line">// setting count</span><br></pre></td></tr></table></figure></p><p><strong>实例方法整理</strong></p><ul><li>get 方法拦截属性的读取操作。</li><li>set 方法拦截赋值操。</li><li>apply 方法拦截函数的调用。</li><li>has 方法拦截 <code>HasProperty</code> 操作，即查找对象中是否有某属性。可用来隐藏一些属性不被 <code>in</code> 运算符发现。</li><li>construct 方法拦截 <code>new</code> 指令。即在 <code>new</code> 指令创建实例的时候可以对对象中的参数进行一些初始化修改操作。</li><li>deleteProperty方法拦截 <code>delete</code> 指令，可用来保护某些对象属性无法被删除。</li><li>defineProperty方法拦截了Object.defineProperty操作。</li><li>getOwnPropertyDescriptor方法拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined</li><li>getPrototypeOf方法主要用来拦截获取对象原型。</li><li>isExtensible方法拦截Object.isExtensible操作。</li><li>ownKeys方法用来拦截对象自身属性的读取操作。</li><li>preventExtensions方法拦截Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。</li><li>setPrototypeOf方法主要用来拦截Object.setPrototypeOf方法。</li></ul><p>apply方法的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var target = function () &#123; return &apos;I am the target&apos;; &#125;;</span><br><span class="line">var handler = &#123;</span><br><span class="line">    apply: function () &#123;</span><br><span class="line">        return &apos;I am the proxy&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p = new Proxy(target, handler);</span><br><span class="line"></span><br><span class="line">console.log(p())</span><br><span class="line">// &quot;I am the proxy&quot;</span><br></pre></td></tr></table></figure></p><p>has方法的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var handler = &#123;</span><br><span class="line">    has (target, key) &#123;</span><br><span class="line">        if (key[0] === &apos;_&apos;) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return key in target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var target = &#123; _prop: &apos;foo&apos;, prop: &apos;foo&apos; &#125;;</span><br><span class="line">var proxy = new Proxy(target, handler);</span><br><span class="line">console.log(&apos;_prop&apos; in proxy)</span><br><span class="line">// false</span><br></pre></td></tr></table></figure></p><p>construct方法的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var p = new Proxy(function () &#123;&#125;, &#123;</span><br><span class="line">    construct: function(target, args) &#123;</span><br><span class="line">        console.log(&apos;called: &apos; + args.join(&apos;, &apos;));</span><br><span class="line">        return &#123; value: args[0] * 5 + 12 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(new p(1))</span><br><span class="line">console.log(new p(1).value)</span><br><span class="line"></span><br><span class="line">// call: 1</span><br><span class="line">// &#123; value: 17 &#125;</span><br><span class="line">// call: 1</span><br><span class="line">// 17</span><br></pre></td></tr></table></figure></p><p>所以，我理解的 Proxy 对象主要功能就是拦截对象属性的一些操作。</p><h1 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h1><p>我理解的Reflect对象：</p><ul><li>是Object的高级版本，Object对对象的操作方法Reflect对象都有，并且未来操作对象的新方法只放在Reflect对象中有。</li><li>发生错误不会报错而是返回false，可直接在判断中使用。</li><li>让Object操作都变成函数行为，统一表现形式。某些Object操作是命令式，比如 <code>name in obj</code> 和 <code>delete obj[name]</code> ，而 <code>Reflect.has(obj, name)</code> 和 <code>Reflect.deleteProperty(obj, name)</code> 让它们变成了函数行为。</li><li>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。Proxy对象拦截对象属性方法，进行重新定义。而Reflect对象立即执行对象属性方法。下面例子中使用set和get做演示。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var myObject = &#123;</span><br><span class="line">    foo: 1,</span><br><span class="line">    bar: 2,</span><br><span class="line">    get baz() &#123;</span><br><span class="line">        return this.foo + this.bar;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Reflect.get(myObject, &apos;foo&apos;)) </span><br><span class="line">console.log(Reflect.get(myObject, &apos;bar&apos;)) </span><br><span class="line">console.log(Reflect.get(myObject, &apos;baz&apos;)) </span><br><span class="line"></span><br><span class="line">console.log(Reflect.set(myObject, &apos;foo&apos;, 100))</span><br><span class="line">console.log(myObject.foo)</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line">// true</span><br><span class="line">// 100</span><br></pre></td></tr></table></figure></li></ul><h1 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h1><p>Promise 对象登场啦~这是 ES6 语法中非常常用的对象。<br>我理解的 Promise 对象：</p><ul><li>Promise 对象让异步操作的写法从回调函数变为链式操作，可读性更强。</li><li>Promise 对象一旦改变，就会锁死，不再改变。</li></ul><p><strong>基本用法</strong><br>Promise 的定义，定义一个 Promise对象，参数为resolve和reject，resolve为执行成功的方法，而reject为执行失败的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  // ... some code</span><br><span class="line"></span><br><span class="line">  if (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>基本调用方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(function(value) &#123;</span><br><span class="line">  // success</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">  // failure</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>Promise 函数一旦用 new 指令创建，立即执行。并且数据为不可变。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let success = true</span><br><span class="line">let name = &apos;jack&apos;</span><br><span class="line"></span><br><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    console.log(&apos;create&apos;)</span><br><span class="line">    if (success) &#123;</span><br><span class="line">        resolve(name)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        reject(&apos;error promise&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">success = false</span><br><span class="line">name = &apos;rose&apos;</span><br><span class="line">console.log(&apos;before then&apos;)</span><br><span class="line"></span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// create</span><br><span class="line">// before then</span><br><span class="line">// jack</span><br></pre></td></tr></table></figure></p><p>由此可见，在定义了Promise之后，我们再去修改 <code>name</code> 返回的还是定义Promise时候的值。说明了Promise对象定义即执行，并且不可变。</p><p><strong>Promise 推荐使用 <code>promise.then().catch()</code>  写法。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>then方法链式写法表达，then方法的返回值可以传递给下一个then方法。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&apos;jack&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    return &apos;violet&apos; + value</span><br><span class="line">&#125;).then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    return &apos;welcome to &apos; + value</span><br><span class="line">&#125;).then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    return  value + &apos; blog&apos;</span><br><span class="line">&#125;).then(value =&gt; &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// jack</span><br><span class="line">// violetjack</span><br><span class="line">// welcome to violetjack</span><br><span class="line">// welcome to violetjack blog</span><br></pre></td></tr></table></figure></p><p><strong>catch方法用于捕获Promise对象的异常行为（可能是 reject 函数返回的错误，也可能是<code>throw new Error(&#39;error&#39;)</code>）。</strong><br><strong>Promise.all() 方法将多个Promise实例包装成一个Promise实例。如下示例，如果p1、p2、p3都执行成功，则执行then方法，返回的参数为三个实例的参数数组；如果有任意一个Promise实例报错，则在catch方法中返回该实例的错误信息。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const p1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&apos;jack&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const p2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // resolve(&apos;rose&apos;)</span><br><span class="line">    reject(&apos;rose error&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const p3 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&apos;james&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Promise.all([p1, p2, p3]).then(values =&gt; &#123;</span><br><span class="line">    console.log(values)</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// [&quot;jack&quot;, &quot;rose&quot;, &quot;james&quot;]</span><br><span class="line">// rose error</span><br></pre></td></tr></table></figure></p><p><strong>Promise.race() 方法用法与 all 方法一致，唯一不同点就是多个 Promise实例中只作用域最快有反映的Promise实例，并且返回该实例的正确或错误信息。如果多个Promise同时触发，按顺序返回第一个Promise实例。</strong><br><strong>Promise.resolve() 和 Promise.reject()</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&apos;foo&apos;)</span><br><span class="line">// 等价于</span><br><span class="line">new Promise(resolve =&gt; resolve(&apos;foo&apos;))</span><br><span class="line"></span><br><span class="line">const p = Promise.reject(&apos;出错了&apos;);</span><br><span class="line">// 等同于</span><br><span class="line">const p = new Promise((resolve, reject) =&gt; reject(&apos;出错了&apos;))</span><br></pre></td></tr></table></figure></p><h1 id="Iterator-和-for…of-循环"><a href="#Iterator-和-for…of-循环" class="headerlink" title="Iterator 和 for…of 循环"></a>Iterator 和 for…of 循环</h1><p><strong>默认Iterator接口部署在数据对象的 <code>Symbol.iterator</code> 属性中，<code>Symbol.iterator</code> 属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。只要数据对象有了 <code>Symbol.iterator</code> 属性就可以进行遍历。如下对象添加了 <code>Symbol.iterator</code>  属性后实现了遍历操作。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    data: [ &apos;hello&apos;, &apos;world&apos; ],</span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">        const self = this;</span><br><span class="line">        let index = 0;</span><br><span class="line">        return &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                if (index &lt; self.data.length) &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        value: self.data[index++],</span><br><span class="line">                        done: false</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &#123; value: undefined, done: true &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log([...obj])</span><br><span class="line"></span><br><span class="line">// [&quot;hello&quot;, &quot;world&quot;]</span><br></pre></td></tr></table></figure></p><p><strong>Iterator 接口主要供for…of消费。</strong><br><strong><code>for...in</code> 循环读取键名，<code>for...of</code> 循环读取键值。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;];</span><br><span class="line"></span><br><span class="line">for(let v of arr) &#123;</span><br><span class="line">    console.log(v); // red green blue</span><br><span class="line">&#125;</span><br><span class="line">for(let k in arr)&#123;</span><br><span class="line">    console.log(k) // 0 1 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Generator-函数的语法"><a href="#Generator-函数的语法" class="headerlink" title="Generator 函数的语法"></a>Generator 函数的语法</h1><p><strong>一种异步解决方案。函数执行返回一个对象，而函数中的数据只有在对象使用 next() 方法才会返回下一个用 <code>yield</code> 或者 <code>return</code> 定义的数据，否则对象状态就凝固在那里。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function* helloGenerator() &#123;</span><br><span class="line">    yield &apos;hello&apos;</span><br><span class="line">    yield &apos;world&apos;</span><br><span class="line">    return &apos;generator&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var h = helloGenerator()</span><br><span class="line">console.log(h.next())</span><br><span class="line">console.log(h.next())</span><br><span class="line">console.log(h.next())</span><br><span class="line">console.log(h.next())</span><br><span class="line"></span><br><span class="line">// &#123; value: &apos;hello&apos;, done: false&#125;</span><br><span class="line">// &#123; value: &apos;world&apos;, done: false&#125;</span><br><span class="line">// &#123; value: &apos;generator&apos;, done: true&#125;</span><br><span class="line">// &#123; value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure></p><p><strong>next() 方法传值—— <code>next()</code> 方法返回的是 <code>yield</code> 表达式的计算结果。如果 <code>next(value)</code> 方法中传入value参数，则参数将替换上一个 <code>yield</code> 数据。如下示例中，<code>12</code> 替换了<code>(yield (x + 1))</code>，<code>13</code> 替换了<code>yield (y / 3)</code>，最后得到结果为42。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function* foo(x) &#123;</span><br><span class="line">  var y = 2 * (yield (x + 1));</span><br><span class="line">  // value  = 5 + 1</span><br><span class="line">  var z = yield (y / 3);</span><br><span class="line">  // y = 2 * 12 value = 24 / 3</span><br><span class="line">  return (x + y + z);</span><br><span class="line">  // z = 13 y = 24 z = 13 value = 5 + 24 + 13</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = foo(5);</span><br><span class="line">a.next() // Object&#123;value:6, done:false&#125;</span><br><span class="line">// 如果不传递数据，则y=NaN</span><br><span class="line">a.next() // Object&#123;value:NaN, done:false&#125;</span><br><span class="line">a.next() // Object&#123;value:NaN, done:true&#125;</span><br><span class="line"></span><br><span class="line">var b = foo(5);</span><br><span class="line"></span><br><span class="line">b.next() // &#123; value:6, done:false &#125;</span><br><span class="line">b.next(12) // &#123; value:8, done:false &#125;</span><br><span class="line">b.next(13) // &#123; value:42, done:true &#125;</span><br></pre></td></tr></table></figure></p><p><strong>throw方法用于捕捉错误，return方法类似于 Genterator 函数的 <code>return xxx</code> 返回某个值，随后再使用next方法返回的都是 <code>undefined</code></strong><br><strong>对于 next、throw、return，引用书上的解释更清晰点。</strong></p><blockquote><p><code>next()</code> 是将 <code>yield</code> 表达式替换成一个值。<br><code>throw()</code> 是将 <code>yield</code> 表达式替换成一个 <code>throw</code> 语句。<br><code>return()</code> 是将 <code>yield</code> 表达式替换成一个 <code>return</code> 语句。</p></blockquote><p><code>yield*</code> <strong>用于将其他 Generator 函数合并到当前函数中，用法如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function* bar() &#123;</span><br><span class="line">    yield &apos;a&apos;</span><br><span class="line">    yield &apos;b&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* foo() &#123;</span><br><span class="line">    yield &apos;x&apos;</span><br><span class="line">    yield* bar()</span><br><span class="line">    yield &apos;y&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let v of foo())&#123;</span><br><span class="line">    console.log(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// x</span><br><span class="line">// a</span><br><span class="line">// b</span><br><span class="line">// y</span><br></pre></td></tr></table></figure></p><p><strong>Generator 函数不能直接用 new 指令实例化对象，需要包装为普通函数再 new</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  this.a = 1;</span><br><span class="line">  yield this.b = 2;</span><br><span class="line">  yield this.c = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function F() &#123;</span><br><span class="line">  return gen.call(gen.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f = new F();</span><br><span class="line"></span><br><span class="line">f.next();  // Object &#123;value: 2, done: false&#125;</span><br><span class="line">f.next();  // Object &#123;value: 3, done: false&#125;</span><br><span class="line">f.next();  // Object &#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">f.a // 1</span><br><span class="line">f.b // 2</span><br><span class="line">f.c // 3</span><br></pre></td></tr></table></figure></p><p><strong>自动执行所有Generator函数的方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function run(fn) &#123;</span><br><span class="line">  var gen = fn();</span><br><span class="line"></span><br><span class="line">  function next(err, data) &#123;</span><br><span class="line">    var result = gen.next(data);</span><br><span class="line">    if (result.done) return;</span><br><span class="line">    result.value(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* g() &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure></p><p><strong>以上自动执行器还可以使用 <code>co</code> 模块来实现。</strong></p><h1 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h1><p>async函数用于处理异步操作，它是对Generator函数的改进。它相比于Generator有以下几个优点：</p><ul><li>内置执行器：相比于Generator 要自定义或者用 co 模块来实现自动执行器效果，async函数自带自动执行器。</li><li>更好的语义：async 和 await，比起 * 和 yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</li><li>更广的适用性：co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</li><li>返回Promise：async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</li></ul><p>我个人对async的感觉是写法方便、代码理解简单、代码写法也符合逻辑、操作异步行为方便。<br>下面写了 Generator 函数和 async 函数实现异步的代码的对比。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const readFile = function (fileName) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(`reading $&#123;fileName&#125;`)</span><br><span class="line">            resolve(fileName)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Generator 写法</span><br><span class="line">const gen = function* () &#123;</span><br><span class="line">    const f1 = yield readFile(&apos;/etc/fstab&apos;);</span><br><span class="line">    const f2 = yield readFile(&apos;/etc/shells&apos;);</span><br><span class="line">    console.log(f1.toString());</span><br><span class="line">    console.log(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var g = gen()</span><br><span class="line">g.next().value.then(value =&gt; &#123;</span><br><span class="line">    g.next(value).value.then(value =&gt; &#123;</span><br><span class="line">        g.next(value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// async 写法</span><br><span class="line">async function gan() &#123;</span><br><span class="line">    const f1 = await readFile(&apos;/etc/fstab&apos;);</span><br><span class="line">    const f2 = await readFile(&apos;/etc/shells&apos;);</span><br><span class="line">    console.log(f1.toString());</span><br><span class="line">    console.log(f2.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gan()</span><br></pre></td></tr></table></figure></p><p>两种函数的实现结果是一样的。<br>但从上面的例子中可以看出，Generator 函数需要不断调用next方法，并且将上一个next方法的结果传递给当前next方法当做参数。而async函数直接调用函数本身就会自动往下执行。Generator多了一步执行的过程。<br>另外，async await的语义很清晰，就算没学过ES6的大致都能看懂是什么意思啦~</p><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>class其实就是一个函数实例化的语法糖~具体功能也类似Java这类有Class的语言~<br>所以，下面两种写法的结果是相等的。<br><strong>传统写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Point(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = function () &#123;</span><br><span class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p = new Point(1, 2);</span><br><span class="line">console.log(p)</span><br></pre></td></tr></table></figure></p><p><strong>ES6 Class写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    constructor(x, y) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Point(1, 2);</span><br><span class="line">console.log(p)</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-3f972d9e15d96308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"><br>对象结果如上图所示，构造函数中this对象的属性在实例中，而Class里面的函数再实例对象的 <code>__proto__</code> 中。<br><strong>使用 <code>new target</code> 在构造函数中判断对象是否为 <code>new</code> 指令创建的。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 另一种写法</span><br><span class="line">function Person(name) &#123;</span><br><span class="line">  if (new.target === Person) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    throw new Error(&apos;必须使用 new 命令生成实例&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = new Person(&apos;张三&apos;); // 正确</span><br><span class="line">var notAPerson = Person.call(person, &apos;张三&apos;);  // 报错</span><br></pre></td></tr></table></figure></p><h1 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h1><p>类似于Java的修饰器 <code>@Override</code> ， 现有一个提案，将修饰器加入到 ECMAScript 中。</p><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>在 ES6 中添加了模块化功能，很常见用法也很简单。<br><strong>模块加载</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; stat, exists, readFile &#125; from &apos;fs&apos;; // 多个模块加载</span><br><span class="line">import &#123; lastName as surname &#125; from &apos;./profile.js&apos;; // 模块加载重命名</span><br><span class="line">import * as circle from &apos;./circle&apos;; // 整理加载</span><br></pre></td></tr></table></figure></p><p><strong>模块输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 输出变量</span><br><span class="line">export let a = 100</span><br><span class="line">// 输出方法</span><br><span class="line">export function hello() &#123;</span><br><span class="line">    console.log(&apos;hello world&apos;)</span><br><span class="line">&#125;</span><br><span class="line">// 输出多个变量</span><br><span class="line">const b = 200</span><br><span class="line">const c = 300</span><br><span class="line">const d = 400</span><br><span class="line">export &#123;b, c, d&#125;</span><br><span class="line">// 输出变量重命名</span><br><span class="line">export &#123;b as value&#125;</span><br><span class="line">// 输出默认值</span><br><span class="line">export default function () &#123;</span><br><span class="line">    console.log(&apos;hello default&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>CommonJS</code> 语法中模块输出和加载的写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let &#123; stat, exists, readFile &#125; = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h1><p>ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。</p><blockquote><p><strong>二进制数组由三类对象组成。</strong><br>（1）ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。<br>（2）TypedArray视图：共包括 9 种类型的视图，比如Uint8Array（无符号 8 位整数）数组视图, Int16Array（16 位整数）数组视图, Float32Array（32 位浮点数）数组视图等等。<br>（3）DataView视图：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。<br>简单说，ArrayBuffer对象代表原始的二进制数据，TypedArray 视图用来读写简单类型的二进制数据，DataView视图用来读写复杂类型的二进制数据。</p></blockquote><p>这方面知识点不太常用，了解下，等到用的时候查查就是了。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="http://es6.ruanyifeng.com/#docs/style" target="_blank" rel="noopener">编程风格</a> —— 主要参考了 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb</a> 公司的 JavaScript 风格规范。</li><li><a href="http://es6.ruanyifeng.com/#docs/spec" target="_blank" rel="noopener">读懂 ECMAScript 规格</a> —— 对于规格的学习建议，阮一峰老师的建议如下：<blockquote><p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。<br>一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。</p></blockquote></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>好啦~终于把下半部分写完了。有点虎头蛇尾，一开始写的东西很具体，到后来内容有点少。主要是因为前面部分我觉得是比较麻烦和常用的。写这篇博客主要是系统复习下ES6语法，简略地提一下各个语法的用法、注意点。大致知道了有些什么，以后遇到问题知道如何查资料如何解决就好了。<br>感觉自己写博客速度忒慢了，写ES6笔记断断续续花了我十个小时……<br>最后呢，还是那句话——<strong>由自己整理写出博客的知识点才是真正牢牢掌握的知识点！</strong>至此，我对ES6语法的理解加深了很多。看到此文的你可以去试试用写博客的方式来复习知识点哦~<br>希望我写的东西能帮助到一些朋友。</p><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>VioletJack，内驱工程师~专注于Vue前端相关的知识点整理、源码学习、内容分享。欢迎喜欢我文章的朋友关注我哦，我会努力产出优质内容~让我们始终相信：code change world!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;认真学习了一遍ES6，发现很多很好用的功能。&lt;br&gt;学习资料：&lt;a href=&quot;http://es6.ruanyifeng.com/#README&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《ECMAScript 6 入门》&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6 学习笔记（上）</title>
    <link href="https://violetjack.github.io/2018/01/18/ES6%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://violetjack.github.io/2018/01/18/ES6 学习笔记（上）/</id>
    <published>2018-01-17T16:00:00.000Z</published>
    <updated>2018-02-07T02:27:17.705Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>认真学习了一遍ES6，发现很多很好用的功能。<br>学习资料：<a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">《ECMAScript 6 入门》</a></p></blockquote><p>之前写JS，虽然也遇到一些ES6语法，基本就是理解就行，没有深入学习过。这次认真看了一遍ES6，发现里面有许多实用的东西。下面是对本书学习的一些笔记</p><h1 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h1><p>解决var变量提升、变量全局的问题。</p><p><strong>let 和 const 都只作用域本块级作用域内。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let a = 123</span><br><span class="line">&#123;</span><br><span class="line">    let a = 456</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">console.log(a)</span><br><span class="line"></span><br><span class="line">// 456</span><br><span class="line">// 123</span><br></pre></td></tr></table></figure></p><p><strong>let 和 const 定义的变量不能同名。</strong><br><strong>let 和 const 定义的变量不可以变量提升。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 5</span><br><span class="line">let a</span><br><span class="line"></span><br><span class="line">// Error: a is not defined</span><br></pre></td></tr></table></figure></p><p><strong>const定义的量内存不可变</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const a = 6</span><br><span class="line">const obj = &#123;</span><br><span class="line">    name: &apos;violetjack&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 以下写法会报错，因为他们指向了另一个内存地址</span><br><span class="line">// a = 6</span><br><span class="line">// obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj.name = &apos;jerry&apos;</span><br><span class="line">obj.age = 56</span><br><span class="line">console.log(obj)</span><br><span class="line"></span><br><span class="line">// &#123; name: &apos;jerry&apos;, age: 56 &#125;</span><br></pre></td></tr></table></figure></p><h1 id="变量的结构与赋值"><a href="#变量的结构与赋值" class="headerlink" title="变量的结构与赋值"></a>变量的结构与赋值</h1><p>快速赋值，优化代码可读性。</p><p><strong>用法都差不多，一一对应即可</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c] = [1, 2, 3] // 数组结构</span><br><span class="line">let &#123; name:mName, age: mAge&#125; = &#123; name:&apos;violetjack&apos;, age: 28 &#125; // 对象结构</span><br><span class="line">let [e,f,g] = &apos;mmp&apos; // 字符串结构</span><br><span class="line">console.log(a)</span><br><span class="line">console.log(mName)</span><br><span class="line">console.log(e + f + g)</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// violetjack</span><br><span class="line">// mmp</span><br></pre></td></tr></table></figure></p><h1 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h1><p>提出了一些处理字符串的方式</p><p><strong>提供了一些处理大于 <code>0xFFFF</code> 的字符串的方法</strong><br><strong>字符串检索</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let s = &apos;Hello world!&apos;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&apos;Hello&apos;) // true</span><br><span class="line">s.endsWith(&apos;!&apos;) // true</span><br><span class="line">s.includes(&apos;o&apos;) // true</span><br><span class="line"></span><br><span class="line">// includes()：返回布尔值，表示是否找到了参数字符串。</span><br><span class="line">// startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</span><br><span class="line">// endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</span><br></pre></td></tr></table></figure></p><p><strong>可以操作复制、填充字符串：<code>repeat</code>,<code>padStart</code>,<code>padEnd</code></strong><br><strong>模板字符串，解决字符串拼接问题。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const name = &apos;VioletJack&apos;</span><br><span class="line">const str = &apos;welcome to &apos; + name + &quot;&apos;s blog&quot;</span><br><span class="line">const str2 = `welcome to $&#123;name&#125;&apos;s blog`</span><br><span class="line">console.log(str)</span><br><span class="line">console.log(str2)</span><br><span class="line"></span><br><span class="line">// welcome to VioletJack&apos;s blog</span><br><span class="line">// welcome to VioletJack&apos;s blog</span><br></pre></td></tr></table></figure></p><p>相比于第一种方式，第二种方式可读性好很多。也避免了在使用 <code>&#39;</code> <code>&quot;</code> 两个符号的时候需要转译的步骤。同时在引用数据上使用 <code>${value}</code> 的方式引用。非常方便！</p><h1 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h1><p>对于正则我一向晕晕乎乎，没啥收获。关于正则我要另外写篇博客涨涨姿势。</p><h1 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h1><p>主要提供了一些数字高级算法。<br><strong>parseInt和parseFloat都在Number中调用，减少js中的全局方法。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ES5的写法</span><br><span class="line">parseInt(&apos;12.34&apos;) // 12</span><br><span class="line">parseFloat(&apos;123.45#&apos;) // 123.45</span><br><span class="line"></span><br><span class="line">// ES6的写法</span><br><span class="line">Number.parseInt(&apos;12.34&apos;) // 12</span><br><span class="line">Number.parseFloat(&apos;123.45#&apos;) // 123.45</span><br></pre></td></tr></table></figure></p><p><strong>求指数，通过 `</strong>` 实现**<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 ** 2 // 2*2 = 4</span><br><span class="line">2 ** 3 // 2*2*2 = 8</span><br></pre></td></tr></table></figure></p><p>其他数学算法就不一一列举了，基本用不着，用到了百度即可。</p><h1 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h1><p>在函数参数传递方面实现了更多传递方式，实现了箭头函数。总体上是让函数应用上ES6的结构、<code>rest</code> 参数。此外还有几个提案，可以去书上看看。</p><p><strong>更多的参数传递方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 函数参数默认值</span><br><span class="line">function func01(a, b = 11) &#123;</span><br><span class="line">    console.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func01(15)</span><br><span class="line">func01(10, undefined)</span><br><span class="line">func01(1, 1)</span><br><span class="line"></span><br><span class="line">// 参数解构</span><br><span class="line">function func02(&#123;a = 6, b&#125;) &#123;</span><br><span class="line">    console.log(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func02(&#123;a: 11, b: 12&#125;)</span><br><span class="line">func02(&#123;b: 6&#125;)</span><br><span class="line"></span><br><span class="line">// rest参数</span><br><span class="line">function func03(...vals) &#123;</span><br><span class="line">    let count = 0</span><br><span class="line">    for (let value of vals) &#123;</span><br><span class="line">        count += value</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func03(1, 2, 3, 4, 5)</span><br><span class="line">func03(11, 22, 33, 44, 55)</span><br></pre></td></tr></table></figure></p><p><strong>提出箭头函数，简化代码。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var f = v =&gt; v;</span><br><span class="line">// 等同于</span><br><span class="line">var f = function(v) &#123;</span><br><span class="line">  return v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var f = () =&gt; 5;</span><br><span class="line">// 等同于</span><br><span class="line">var f = function () &#123; return 5 &#125;;</span><br><span class="line"></span><br><span class="line">var sum = (num1, num2) =&gt; num1 + num2;</span><br><span class="line">// 等同于</span><br><span class="line">var sum = function(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意如果参数或者返回结果是对象，需要用<code>()</code>包裹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fun = (&#123; a, b &#125;) =&gt; a + b</span><br><span class="line">var fun02 = a =&gt; (&#123; value: a &#125;)</span><br></pre></td></tr></table></figure></p><p>另外一个特别要注意的就是 <code>this</code>，我看到过好几篇博客来解释箭头函数的 <code>this</code> 的，可见这个 <code>this</code> 的特殊性。可以<a href="https://juejin.im/search?query=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">在掘金搜索箭头函数</a>，里面全是解释（tu cao）箭头函数的~<br>下面搬运书上对箭头函数的注意点。</p><blockquote><p>箭头函数有几个使用注意点。<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br>上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。</p></blockquote><h1 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h1><p><strong>扩展运算符，和函数中的rest参数是一回事。我的理解就是把数组拆分成一个个值。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4]</span><br><span class="line">console.log(...arr)</span><br><span class="line">console.log([0, 8, 6, ...arr, 10])</span><br><span class="line">let str = &apos;jack&apos;</span><br><span class="line">console.log(...str)</span><br><span class="line"></span><br><span class="line">// 1 2 3 4</span><br><span class="line">// [ 0, 8, 6, 1, 2, 3, 4, 10 ]</span><br><span class="line">// j a c k</span><br></pre></td></tr></table></figure></p><p><strong>Array.from 将类数组对象转为真正的数组。</strong><br><strong>Array.of 将多个值转为数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array.of(3, 11, 8) </span><br><span class="line">// [3,11,8]</span><br></pre></td></tr></table></figure></p><p><strong>copyWithin 将数组中某些内容来替换指定内容</strong><br><strong>find 和 findIndex 用于找到数组中第一个符合条件的值和索引位置。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 4, -5, 10].find((n) =&gt; n &lt; 2)</span><br><span class="line">console.log(a)</span><br><span class="line">var b = [1, 5, 10, 15].findIndex(function (value, index, arr) &#123;</span><br><span class="line">    return value &gt; 11;</span><br><span class="line">&#125;) </span><br><span class="line">console.log(b)</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure></p><p><strong>fill 用于填充数组</strong><br><strong>entries、keys和values用来遍历数组非常方便，通过不同方法返回所需数组内容。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line"></span><br><span class="line">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</span><br><span class="line">  console.log(elem);</span><br><span class="line">&#125;</span><br><span class="line">// &apos;a&apos;</span><br><span class="line">// &apos;b&apos;</span><br><span class="line"></span><br><span class="line">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class="line">  console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line">// 0 &quot;a&quot;</span><br><span class="line">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure></p><p><strong>includes 方法与字符串的 includes 类似，用于查找数组中是否有某个值，返回布尔类型的值。</strong><br><strong>ES6中将数组空位转为undefined</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log([...[&apos;a&apos;,,&apos;b&apos;]])</span><br><span class="line">// [ &quot;a&quot;, undefined, &quot;b&quot; ]</span><br></pre></td></tr></table></figure></p><h1 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h1><p><strong>对象属性的简洁表示法，也就是我们常看到的ES6的写法。对象中不再必须要传递 <code>key-value</code> 的形式了。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let a = 12</span><br><span class="line">let b = 22</span><br><span class="line">let obj = &#123; a, b &#125;</span><br><span class="line">console.log(obj)</span><br><span class="line"></span><br><span class="line">// &#123; a: 12. b: 22 &#125;</span><br><span class="line"></span><br><span class="line">let obj02 = &#123;</span><br><span class="line">    log() &#123;</span><br><span class="line">        console.log(&apos;Hello!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>对于对象属性名，支持使用 <code>[字符串]</code> 的形式来作为对象属性名。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;jack&apos;,</span><br><span class="line">    [&apos;age&apos;]: 28,</span><br><span class="line">    [&apos;se&apos; + &apos;x&apos;]: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj)</span><br><span class="line"></span><br><span class="line">// &#123;name: &quot;jack&quot;, age: 28, sex: &quot;male&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Object.is方法用于比较两个值是否严格相等。</strong><br><strong>Object.assign 用于对象的合并，如果有同名属性，后添加的覆盖之前的属性。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let obj1 = &#123;</span><br><span class="line">    name: &apos;jack&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj2 = &#123;</span><br><span class="line">    [&apos;age&apos;]: 28,</span><br><span class="line">    [&apos;se&apos; + &apos;x&apos;]: &apos;male&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj3 = &#123;</span><br><span class="line">    job: &apos;js&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj4 = &#123;</span><br><span class="line">    name: &apos;rose&apos;,</span><br><span class="line">    hobby: &apos;game&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.assign(obj1, obj2, obj3, obj4)</span><br><span class="line">console.log(obj1)</span><br><span class="line"></span><br><span class="line">// &#123;name: &quot;rose&quot;, age: 28, sex: &quot;male&quot;, job: &quot;js&quot;, hobby: &quot;game&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>对象的<strong>proto</strong>属性是一个内部属性，所以前后有下划线。不建议修改该属性。</strong><br><strong>ES6的super关键字用于继承，可以理解为java的super关键字。</strong><br><strong>Object.keys()，Object.values()，Object.entries()和Array的类似，是对对象的一个遍历过程。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let &#123;keys, values, entries&#125; = Object;</span><br><span class="line">let obj = &#123; a: 1, b: 2, c: 3 &#125;;</span><br><span class="line"></span><br><span class="line">for (let key of keys(obj)) &#123;</span><br><span class="line">  console.log(key); // &apos;a&apos;, &apos;b&apos;, &apos;c&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let value of values(obj)) &#123;</span><br><span class="line">  console.log(value); // 1, 2, 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let [key, value] of entries(obj)) &#123;</span><br><span class="line">  console.log([key, value]); // [&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, 3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>在对象中也可以使用扩展运算符 <code>...</code></strong></p><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>这玩意的用处我不太理解，就是为了表示一个唯一的值？<br><strong>ES6 的7中原始数据类型：<code>Symbol</code>、<code>undefined</code>、<code>null</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code>、<code>Object</code></strong></p><h1 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h1><p><strong>Set是一个构造函数，它的值都是唯一的。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const s = new Set();</span><br><span class="line"></span><br><span class="line">[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));</span><br><span class="line"></span><br><span class="line">for (let i of s) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// 2 3 5 4</span><br></pre></td></tr></table></figure></p><p><strong>Set可用于去除数组中的重复项。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const set = new Set([1, 2, 3, 4, 4]);</span><br><span class="line">[...set]</span><br><span class="line">// [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><p><strong>操作Set的语法如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(value)：添加某个值，返回 Set 结构本身。</span><br><span class="line">delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</span><br><span class="line">has(value)：返回一个布尔值，表示该值是否为Set的成员。</span><br><span class="line">clear()：清除所有成员，没有返回值。</span><br></pre></td></tr></table></figure></p><p><strong>WeakSet与Set的不同点</strong></p><blockquote><p>WeakSet 的成员只能是对象，而不能是其他类型的值。<br>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p></blockquote><p><strong>Map不同于传统Object对象的地方在于，Object的属性名只能是String类型的。而Map可以有任意类型的属性名。</strong><br><strong>Map的key如果是一个对象，那么这个key应该指向同一个内存（可以用const定义之后再当做参数传入map作为属性名。）。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// error</span><br><span class="line">const map = new Map();</span><br><span class="line"></span><br><span class="line">map.set([&apos;a&apos;], 555);</span><br><span class="line">map.get([&apos;a&apos;]) // undefined</span><br><span class="line"></span><br><span class="line">// success</span><br><span class="line">const map = new Map();</span><br><span class="line"></span><br><span class="line">const k1 = [&apos;a&apos;];</span><br><span class="line">const k2 = [&apos;a&apos;];</span><br><span class="line"></span><br><span class="line">map</span><br><span class="line">.set(k1, 111)</span><br><span class="line">.set(k2, 222);</span><br><span class="line"></span><br><span class="line">map.get(k1) // 111</span><br><span class="line">map.get(k2) // 222</span><br></pre></td></tr></table></figure></p><p><strong>WeakMap与Map的区别：</strong></p><blockquote><p>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>WeakMap的键名所指向的对象，不计入垃圾回收机制。</p></blockquote><p>好吧，暂时先到这儿。另外一部分后面继续整理吧~知识点还是蛮多的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;认真学习了一遍ES6，发现很多很好用的功能。&lt;br&gt;学习资料：&lt;a href=&quot;http://es6.ruanyifeng.com/#README&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《ECMAScript 6 入门》&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>weex项目弃坑小结</title>
    <link href="https://violetjack.github.io/2017/12/01/weex%E9%A1%B9%E7%9B%AE%E5%BC%83%E5%9D%91%E5%B0%8F%E7%BB%93/"/>
    <id>https://violetjack.github.io/2017/12/01/weex项目弃坑小结/</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2018-02-07T02:28:26.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于<code>weex</code> 的不稳定性，所以中途放弃了 <code>weex</code> 方案。转而使用 Android原生开发。今天项目第一阶段开发结束，来总结一下 <code>weex</code> 的一些东西。</p></blockquote><p><code>weex</code> 相比于原生开发的好处</p><ul><li>界面搭建速度快，特别是重复性界面。</li><li>数据处理方便，尤其是json解析方面。</li></ul><p>坏处么</p><ul><li>用的人太少，所以网上资料也很少。</li><li>坑还是比较多的，要玩的溜要踩上不少坑。</li><li>还是需要一些原生开发的知识才能够玩的溜。</li></ul><p>说说我这个项目的一些东西吧~</p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>第一个困扰我的就是页面跳转，我去SF上提问了<a href="https://segmentfault.com/q/1010000009999942" target="_blank" rel="noopener">Weex的页面跳转方案的选择</a>这个问题。</p><ul><li><code>vue-router</code> 方案由于 <code>Vue</code>和 <code>weex</code> 的差异性，用法有所不同，好像需要使用注入 <code>minixs</code> 机制，挺麻烦的，所以放弃了……这个如果有需要我会再去研究一下的。</li><li>第二种方案就是每个页面都是单独的 <code>Activity</code>，各自嵌入一个 <code>weex</code> 页面。但是有个问题：<code>weex</code> 如何与当前 <code>Activity</code> 交互，比如我要从页面A跳转到页面B，我需要 <code>weex</code> 调用 <code>Activity</code> 的 <code>startActivity</code> 方法，这个交互方式我没有找到。不然倒是可以随心所欲的在原生开发和weex之间来回交互。暂时来说我只知道<a href="http://blog.csdn.net/violetjack0808/article/details/74002599" target="_blank" rel="noopener">通过globalEvent和Module扩展来实现两者的交互</a></li><li>最后，还是选择了官方推荐的 <code>Navigator</code> 来作为页面跳转的方式。这种方式能够很快速的实现页面跳转。不用瞎折腾~</li></ul><p>选定方案之后，就要解决几个问题了。多页面打包和跳转所需的 <code>Activity</code> 。</p><h3 id="多页面打包"><a href="#多页面打包" class="headerlink" title="多页面打包"></a>多页面打包</h3><p><code>navigator</code> 的跳转方式，需要获取打包好的 <code>weex</code> 的文件路径来进行页面跳转和显示，所以我们就需要多页 <code>weex</code> 文件代表每一个页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">navigator.push(&#123;</span><br><span class="line">  url: &apos;http://dotwe.org/raw/dist/519962541fcf6acd911986357ad9c2ed.js&apos;,</span><br><span class="line">  animated: &quot;true&quot;</span><br><span class="line">&#125;, event =&gt; &#123;</span><br><span class="line">  modal.toast(&#123; message: &apos;callback: &apos; + event &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>需要配置 <code>Webpack</code> 来实现这一目的。我将每个页面的入口文件都放在 <code>./src/entrys</code>文件夹下，通过 <code>node</code> 的 <code>fs文件模块</code> 读取里面的入口文件，并将他们传给 <code>entry</code> 入口对象。最后将入口对象配置到 <code>webpack</code> 打包配置中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">var files = fs.readdirSync(&apos;./src/entrys&apos;)</span><br><span class="line">var entry = &#123;&#125;</span><br><span class="line">files.forEach(function (file) &#123;</span><br><span class="line">  var item = file.replace(&apos;.js&apos;, &apos;&apos;)</span><br><span class="line">  entry[item] = path.resolve(&apos;./src/entrys/&apos; + file)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var bannerPlugin = new webpack.BannerPlugin(</span><br><span class="line">  &apos;// &#123; &quot;framework&quot;: &quot;Vue&quot; &#125;\n&apos;, &#123; raw: true &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">function getBaseConfig() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    entry: entry,</span><br><span class="line">    output: &#123;</span><br><span class="line">      path: &apos;dist&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &apos;@&apos;: path.resolve(&apos;./src&apos;),</span><br><span class="line">        &apos;views&apos;: path.resolve(&apos;./src/views&apos;),</span><br><span class="line">        &apos;utils&apos;: path.resolve(&apos;./src/utils&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">      // ESLint配置</span><br><span class="line">      preLoaders: [&#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: &apos;eslint&apos;,</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;eslint&apos;,</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;</span><br><span class="line">      ],</span><br><span class="line">      // 如果注释掉以上这段将不产生ESLint检查</span><br><span class="line">      loaders: [&#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;babel&apos;,</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        test: /\.vue(\?[^?]+)?$/,</span><br><span class="line">        loaders: []</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    vue: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [bannerPlugin]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var webConfig = getBaseConfig()</span><br><span class="line">webConfig.output.filename = &apos;[name].web.js&apos;</span><br><span class="line">webConfig.module.loaders[1].loaders.push(&apos;vue&apos;)</span><br><span class="line"></span><br><span class="line">var weexConfig = getBaseConfig()</span><br><span class="line">weexConfig.output.filename = &apos;[name].weex.js&apos;</span><br><span class="line">weexConfig.module.loaders[1].loaders.push(&apos;weex&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = [webConfig, weexConfig]</span><br></pre></td></tr></table></figure></p><p>每一个入口文件都会产生两个相应名称的文件，如 <code>sign.js</code> 的入口文件就会生成 <code>sign.weex.js</code> 和 <code>sign.web.js</code> 文件，这里我们只关注 <code>weex</code> 后缀的文件，这就是我们跳转页面所需的文件。具体项目结构请看<a href="https://github.com/violetjack/MobileNurseWeex" target="_blank" rel="noopener">源代码</a><br>更多对于 <code>webpack</code> 的了解可以看<a href="http://blog.csdn.net/violetjack0808/article/details/54915825" target="_blank" rel="noopener">Vue.js学习系列四——Webpack学习实践</a></p><h3 id="navigator跳转的Activity哪里来的？"><a href="#navigator跳转的Activity哪里来的？" class="headerlink" title="navigator跳转的Activity哪里来的？"></a>navigator跳转的Activity哪里来的？</h3><p>在使用了 <code>navigator</code> 后一开始发现并没有页面跳转效果，而是报 <code>ActivityNotFoundException</code> 的错误。后来装了 <code>weex</code> 的 playground 之后发现可以跳转了，但是跳转过去的 <code>Activity</code> 有个 ActionBar 和一个性能调试的悬浮窗，是 playground 里面扫二维码显示的结果的那个 <code>Activity</code>。几经查阅后发现原来跳转的 <code>Activity</code> 是一个有着特殊 <code>intent-filter</code> 的 <code>Activity</code> 。<br>关于这个问题我写过一篇文章：<a href="http://blog.csdn.net/violetjack0808/article/details/74390249" target="_blank" rel="noopener">WEEX 使用navigator跳转Android系统出现ActivityNotFoundException报错</a><br>解决方案是我把 Playground 里面的那个 <code>Activity</code> 移到了我的项目中来，并且去除了 <code>ActionBar</code> 和调试工具。然后卸载掉 <code>weex</code>  的 Playground，这样就能愉快的显示 <code>navigator</code> 跳转的 <code>Activity</code> 了。代码请看<a href="https://github.com/violetjack/MobileNurseWeex/blob/master/android/app/src/main/java/com/weex/sample/activity/WXPageActivity.java" target="_blank" rel="noopener">WXPageActivity</a>。</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>网络通信上我用的是stream，这个很简单。说下两点：<br>第一，stream所用的url需要是UTF-8格式的，如果URL中有中文需要转一下，URL可以参照utf8这个文件。<br>第二，提交数据的时候需要添加头文件。我的项目中是这样~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stream.fetch(&#123;</span><br><span class="line">  method: StreamType,</span><br><span class="line">  type: &apos;json&apos;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  url: url,</span><br><span class="line">  body: JSON.stringify(this.DataObj)</span><br><span class="line">&#125;, res =&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">  let json = eval(&apos;(&apos; + res.data + &apos;)&apos;)</span><br><span class="line">  modal.alert(&#123;</span><br><span class="line">    message: json.Message</span><br><span class="line">  &#125;, event =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h2><p>图片加载需要在<a href="https://github.com/violetjack/MobileNurseWeex/blob/master/android/app/src/main/java/com/weex/sample/ImageAdapter.java" target="_blank" rel="noopener">ImageAdapter</a>中稍作处理，我这里用的是 <code>Picasso</code> 来显示图片的~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ImageAdapter implements IWXImgLoaderAdapter &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void setImage(final String url, final ImageView view, WXImageQuality quality, WXImageStrategy strategy) &#123;</span><br><span class="line">        WXSDKManager.getInstance().postOnUiThread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                if (view == null || view.getLayoutParams() == null) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                if (TextUtils.isEmpty(url)) &#123;</span><br><span class="line">                    view.setImageBitmap(null);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                String temp = url;</span><br><span class="line">                if (url.startsWith(&quot;//&quot;)) &#123;</span><br><span class="line">                    temp = &quot;http:&quot; + url;</span><br><span class="line">                &#125;</span><br><span class="line">                if (view.getLayoutParams().width &lt;= 0 || view.getLayoutParams().height &lt;= 0) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                Picasso.with(WXEnvironment.getApplication())</span><br><span class="line">                        .load(temp)</span><br><span class="line">                        .into(view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="页面跳转的数据传输"><a href="#页面跳转的数据传输" class="headerlink" title="页面跳转的数据传输"></a>页面跳转的数据传输</h3><p>这一点上，我只想到了不太优雅的方式——使用 <code>storage</code> 来保存和读取。比如我需要将表单ID传递到下一个页面我是这么做的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toDetail(AssessID) &#123;</span><br><span class="line">  storage.setItem(&apos;AssessID&apos;, AssessID)</span><br><span class="line">  navigator.push(&#123;</span><br><span class="line">    url: ViewServer + &apos;GAD.weex.js&apos;,</span><br><span class="line">    animated: &apos;true&apos;</span><br><span class="line">  &#125;, event =&gt; &#123;</span><br><span class="line">    console.log(&apos;successful entry&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>到第二个页面去获取数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getData() &#123;</span><br><span class="line">  let that = this</span><br><span class="line">  storage.getItem(&apos;AssessID&apos;, event =&gt; &#123;</span><br><span class="line">    let AssessID = event.data</span><br><span class="line">    console.log(&apos;AssessID = &apos; + AssessID)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>如果是比较多的数据，我会将数据以 <code>json</code> 字符串的形式保存，在需要的时候获取字符串并解析为 <code>json</code> 对象。</p><h3 id="如何在返回上一页面时做一些操作？"><a href="#如何在返回上一页面时做一些操作？" class="headerlink" title="如何在返回上一页面时做一些操作？"></a>如何在返回上一页面时做一些操作？</h3><p>我的解决方法是在Activity的onResume方法中发送一个消息，然后在weex端添加监听事件。<br><strong>Android端</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onResume() &#123;</span><br><span class="line">    super.onResume();</span><br><span class="line">    if (mInstance != null) &#123;</span><br><span class="line">        mInstance.onActivityResume();</span><br><span class="line"></span><br><span class="line">        new Handler().postDelayed(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</span><br><span class="line">                mInstance.fireGlobalEventCallback(&quot;onResume&quot;, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>weex端</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addListener() &#123;</span><br><span class="line">     globalEvent.addEventListener(&apos;onResume&apos;, e =&gt; &#123;</span><br><span class="line">       storage.getItem(&apos;PopCallback&apos;, event =&gt; &#123;</span><br><span class="line">         if (event.data === &apos;update level list&apos;) &#123;</span><br><span class="line">           this.loadData()</span><br><span class="line">           storage.setItem(&apos;PopCallback&apos;, &apos;&apos;)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>由于加载 <code>weex</code> 有一些延时，<code>onResume</code> 往往会比 <code>weex</code> 加载快，所以我在 <code>onResume</code> 中添加了0.5秒延时。之后在 <code>weex</code> 中添加监听器监听 <code>onResume</code> 的生命周期，并监听返回的数据。</p><h3 id="如何控制weex的Slider显示第几页"><a href="#如何控制weex的Slider显示第几页" class="headerlink" title="如何控制weex的Slider显示第几页"></a>如何控制weex的Slider显示第几页</h3><p>想实现Android的ViewPager效果，使用了weex提供的slider组件，具体坚决方案看<a href="https://segmentfault.com/q/1010000010728251" target="_blank" rel="noopener">如何控制weex的Slider显示第几页。</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>图片的存放好像只能是网络图片的URL，所以我将所有图片都放到服务器上让weex去访问。</li><li>CSS使用flex布局来做，官网上有例子。也可参照<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>啰嗦一大堆，希望某些东西能够对他人有所帮助吧~<br>项目地址<a href="https://github.com/violetjack/MobileNurseWeex" target="_blank" rel="noopener">在此</a>，由于是公司项目，所以把服务器地址去掉了，后端数据获取不了。不过代码都是在的，可以进行参考。希望能对大家有所帮助~<br>最终不用weex的原因么，因为这玩意看似简单，但是想实现点复杂的、和原生交互的功能都得折腾好一会儿。关键还是资料太少，不靠谱，万一哪个地方报个奇怪的错误找不出问题、查不到资料、看不懂源码，那不就挂了嘛~所以，爱折腾玩玩可以，放项目中还是有待考虑。毕竟还是要求稳~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;weex&lt;/code&gt; 的不稳定性，所以中途放弃了 &lt;code&gt;weex&lt;/code&gt; 方案。转而使用 Android原生开发。今天项目第一阶段开发结束，来总结一下 &lt;code&gt;weex&lt;/code&gt; 的一些东西。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue源码学习笔记</title>
    <link href="https://violetjack.github.io/2017/12/01/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://violetjack.github.io/2017/12/01/Vue源码学习笔记/</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2018-03-01T05:44:15.852Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近偷懒好久没有写博客了，一直想继续Vue学习系列，想深入Vue源码来写。结果发现自己层次不够，对js的理解差好多。所以一直想写一直搁置着。最近重新振作决心看完Vue源码，并且以我们这类前端小白的角度来一步步弄懂Vue源码。</p></blockquote><p><strong>PS：</strong>以下文章为笔记类，记录了本人在看源码过程中的一些问题和感悟。</p><h1 id="Vue源码的本质是什么"><a href="#Vue源码的本质是什么" class="headerlink" title="Vue源码的本质是什么"></a>Vue源码的本质是什么</h1><p>Vue.js 本质上就是一个包含各种逻辑的一个function。而我们通常初始化Vue的过程就是实例化的过程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>话不多说，老规矩用代码说话！<br>让我们来对Vue进行打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(Vue)</span><br><span class="line">console.log(vm)</span><br></pre></td></tr></table></figure></p><p>打印结果如图：<br><img src="http://upload-images.jianshu.io/upload_images/1987062-51c2e9112e90eeef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue"></p><p>这里可以看到Vue$3这个方法，就是这个方法对Vue对象的构造函数了。其实这很简单，我们自己都可以造出一个Vue$4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Vue$4(options) &#123;</span><br><span class="line">    this.options = options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue$4.prototype.name = &quot;小东西&quot;</span><br><span class="line">Vue$4.prototype.age = 27</span><br><span class="line"></span><br><span class="line">console.log(new Vue$4(&quot;很好&quot;))</span><br></pre></td></tr></table></figure></p><p>显示结果如图<br><img src="http://upload-images.jianshu.io/upload_images/1987062-ff4ba64d71f9d5b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue$4"></p><p>综上所述，Vue对象的本质就是一个function，与我们的Vue$4的不同之处只在于逻辑的多与少。</p><h1 id="必须理解Object对象"><a href="#必须理解Object对象" class="headerlink" title="必须理解Object对象"></a>必须理解Object对象</h1><p>在Vue的源码中，出场率最多的应该就数<code>Object</code>对象的使用上了。可以这么说，不懂Object都没法往下看代码。以下是源码中用到的比较多的。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a> 直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create</a> 使用指定的原型对象及其属性去创建一个新的对象。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys</a> 返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype" target="_blank" rel="noopener">Object.prototype</a> Object的原型对象。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="noopener">Object.freeze</a> 冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。</li></ul><p>那么，Vue中哪个是Object呢？我们继续试验：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof Vue)</span><br><span class="line">console.log(typeof new Vue())</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function</span><br><span class="line">object</span><br></pre></td></tr></table></figure></p><p>结果显示，使用new来创建的Vue实例就是个对象，所以一切对Object的操作行为都是针对Vue实例对象的。</p><h1 id="理解setter和getter"><a href="#理解setter和getter" class="headerlink" title="理解setter和getter"></a>理解setter和getter</h1><p>在网上看Vue的评论是经常会听到说</p><blockquote><p>Vue无非就是setter和getter方法的运用而已</p></blockquote><p>这让我等新手一脸懵逼，这里我们就来认识认识setter和getter。<br>当我们在获取一个Vue实例data中的某个对象，如果你用console打印出来会发现，对象属性中除了常规的对象属性和<strong>proto</strong>对象之外还会多一个set和一个get方法，所谓的setter和getter就是它们。Vue给每一个对象属性都添加了Observer观察数据的获取和修改。好吧，贴代码一睹真容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">function defineReactive (</span><br><span class="line">  obj,</span><br><span class="line">  key,</span><br><span class="line">  val,</span><br><span class="line">  customSetter,</span><br><span class="line">  shallow</span><br><span class="line">) &#123;</span><br><span class="line">  var dep = new Dep();</span><br><span class="line"></span><br><span class="line">  // Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。</span><br><span class="line">  //（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</span><br><span class="line">  // 对象、属性名称、描述~</span><br><span class="line">  var property = Object.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">  // 当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</span><br><span class="line">  if (property &amp;&amp; property.configurable === false) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // cater for pre-defined getter/setters</span><br><span class="line">  var getter = property &amp;&amp; property.get;</span><br><span class="line">  var setter = property &amp;&amp; property.set;</span><br><span class="line"></span><br><span class="line">  var childOb = !shallow &amp;&amp; observe(val);</span><br><span class="line">  Object.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: true,</span><br><span class="line">    configurable: true,</span><br><span class="line">    get: function reactiveGetter () &#123;</span><br><span class="line">      var value = getter ? getter.call(obj) : val;</span><br><span class="line">      if (Dep.target) &#123; // Watcher</span><br><span class="line">        dep.depend();</span><br><span class="line">        if (childOb) &#123;</span><br><span class="line">          childOb.dep.depend();</span><br><span class="line">          if (Array.isArray(value)) &#123;</span><br><span class="line">            dependArray(value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return value</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function reactiveSetter (newVal) &#123;</span><br><span class="line">      var value = getter ? getter.call(obj) : val;</span><br><span class="line">      /* eslint-disable no-self-compare */</span><br><span class="line">      if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      /* eslint-enable no-self-compare */</span><br><span class="line">      if (&quot;development&quot; !== &apos;production&apos; &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter(); // 自定义setter</span><br><span class="line">      &#125;</span><br><span class="line">      if (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        val = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class="line">      dep.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码太长？懵逼了？没关系，我们自己来造一个简单的setter和getter来了解一下。<br>其实用的就是Object.defineProperty方法中就有set和get。</p><ul><li>get 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。</li><li>set 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。</li></ul><p>好了，写代码~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">var mValue = &quot;abc&quot;</span><br><span class="line">Object.defineProperty(obj, &quot;_name&quot;, &#123;</span><br><span class="line">    configurable: false, </span><br><span class="line">    enumerable: false, </span><br><span class="line">    get: function reactiveGetter () &#123;</span><br><span class="line">        return mValue</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function reactiveSetter (val) &#123;</span><br><span class="line">        mValue = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj._name = &quot;rose&quot;</span><br><span class="line"></span><br><span class="line">console.log(obj)</span><br></pre></td></tr></table></figure></p><p>到这里我们打印log，对象属性的set和get方法就出现了。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-c11e06d42cf94a2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打印结果"></p><h1 id="逻辑运算符的使用"><a href="#逻辑运算符的使用" class="headerlink" title="逻辑运算符的使用"></a>逻辑运算符的使用</h1><p>在源码中有很多<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank" rel="noopener">逻辑运算符</a>的使用，有些运用的很巧妙。这里也科普下吧~</p><p>首先知道下可以转换成false的值，如下：</p><ul><li>null</li><li>NaN</li><li>0</li><li>空字符串（””）</li><li>undefined</li></ul><h3 id="用法一：判断条件返回true或者false"><a href="#用法一：判断条件返回true或者false" class="headerlink" title="用法一：判断条件返回true或者false"></a>用法一：判断条件返回true或者false</h3><p>这是最基本的用法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (a &amp; a.master &amp; a.master.name) &#123;&#125; // 如果这三个属性都为true值，执行if逻辑</span><br><span class="line">if (a || b) &#123;&#125; // 如果a或者b为true值，执行if逻辑。</span><br></pre></td></tr></table></figure></p><h3 id="用法二：判断并返回条件对象"><a href="#用法二：判断并返回条件对象" class="headerlink" title="用法二：判断并返回条件对象"></a>用法二：判断并返回条件对象</h3><ul><li><code>&amp;&amp;</code> 如果几个条件都为true，则返回最后一个条件。</li><li><code>||</code> 几个条件从前往后逐一判断，如果那个条件为true，返回该条件，否则返回最后一个条件。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var getter = property &amp;&amp; property.get;  // 如果两个属性都存在，将property.get赋值给getter</span><br><span class="line">e &amp;&amp; e.__ob__ &amp;&amp; e.__ob__.dep.depend(); // 如果三个属性都存在，执行第三条语句的方法</span><br><span class="line">var res = assets[id] || assets[camelizedId] || assets[PascalCaseId]; </span><br><span class="line">// 给res赋值，如果assets[id]为true，则将其传res；</span><br><span class="line">// 如果assets[camelizedId]为true，将其传给res；</span><br><span class="line">// 如果前两者都为false，将assets[PascalCaseId]传给res。</span><br><span class="line">var strat = strats[key] || defaultStrat;</span><br></pre></td></tr></table></figure></li></ul><p>然后，我对各种情况做了试验得出以下结论：</p><ul><li><code>&amp;&amp;</code> 判断中，判断值都为 <code>true</code>，返回最后一个判断值；判断值中有 <code>false</code><br>值，返回第一个 <code>false</code> 值。</li><li><code>||</code> 判断中，判断值都为 <code>true</code>，返回第一个判断值；判断值中有 <code>true</code> 值也有 <code>false</code> 值，返回第一个为 <code>true</code> 的判断值；如果判断值都为 <code>false</code>，返回最后面的 <code>false</code> 值。</li></ul><p><strong>注意：</strong>这里所说的返回 <code>false</code> 值不一定是 Boolean 类型的 <code>false</code>，也可能是 <code>0、null</code> 等非值，详见上文。</p><h3 id="用法三：使用两个非"><a href="#用法三：使用两个非" class="headerlink" title="用法三：使用两个非"></a>用法三：使用两个非</h3><p>两个感叹号会确保参数为非值时只能为false，不会是0、空字符串、undefined等非值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (options) &#123;</span><br><span class="line">    this.deep = !!options.deep;</span><br><span class="line">    this.user = !!options.user;</span><br><span class="line">    this.lazy = !!options.lazy;</span><br><span class="line">    this.sync = !!options.sync;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.deep = this.user = this.lazy = this.sync = false;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>先看一段代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [ &apos;jack&apos;, &apos;rose&apos;, &apos;wade&apos; ]</span><br><span class="line">var b = a</span><br><span class="line">b[1] = &apos;marry&apos;</span><br><span class="line">console.log(a)</span><br><span class="line">console.log(b)</span><br></pre></td></tr></table></figure></p><p>最后的结果是a和b的数组第二个值都变成了marry，原因就是b并不是获得了数组内容，而只是指向了a，a和b其实是一回事。如果我们需要复制，可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var b = a.slice()</span><br></pre></td></tr></table></figure></p><p>查阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">MDN</a>可知：</p><blockquote><p>slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，原始数组不会被修改。</p><h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><p>想要将非空数组的内容清空，最快捷的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.length = 0</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>直接引用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">MDN</a>的例子。</p><blockquote><p>concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line">var arr2 = [&apos;d&apos;, &apos;e&apos;, &apos;f&apos;];</span><br><span class="line"></span><br><span class="line">var arr3 = arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line">// arr3 is a new array [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; ]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>呃，使用forEach方式来遍历数组是我刚知道的事 - -（之前都是用的for方法……），顺便记录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(function(obj)&#123;</span><br><span class="line">    // 数组循环</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="几种特殊的写法"><a href="#几种特殊的写法" class="headerlink" title="几种特殊的写法"></a>几种特殊的写法</h1><p>在代码中有些代码片段有些看不懂，于是在SF上进行了提问：<a href="https://segmentfault.com/q/1010000012573448" target="_blank" rel="noopener">看Vue源码，有两段代码写法不知是何意思，求指教~</a>。感谢大家的帮助，这里总结下。<br>第一段是一段在{}里的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    dataDef.set = function (newData) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        &apos;Avoid replacing instance root $data. &apos; +</span><br><span class="line">        &apos;Use nested data properties instead.&apos;,</span><br><span class="line">        this</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    propsDef.set = function () &#123;</span><br><span class="line">      warn(&quot;$props is readonly.&quot;, this);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码，有的朋友说是块级作用域、隔离作用域。不过另一种说法更可信。那就是我所看到的vue是编译完的的代码。源代码其实在大括号前是有条件的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>再来看下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function (global, factory) &#123;</span><br><span class="line">    typeof exports === &apos;object&apos; &amp;&amp; typeof module !== &apos;undefined&apos; ? module.exports = factory() :</span><br><span class="line">    typeof define === &apos;function&apos; &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">    (global.Vue = factory());</span><br><span class="line">&#125;(this, (function () &#123; &apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">&#125;)))</span><br></pre></td></tr></table></figure></p><p>这段代码是Vue开头的一段代码，它有两个知识点。</p><ul><li>立即执行函数 —— 定义函数并立即执行，写法有 <code>(function(){})()</code> 或者 <code>(function(){}())</code> 的形式。</li><li>由于过去前端没有模块系统，使用script标签引入的js脚本共享同一个作用域，如果不把代码包起来，很容易产生作用域污染、变量冲突的问题。</li></ul><p><strong>PS：</strong>这两个问题真是网友的结论，不一定完善。有空我会查资料证实~</p><h1 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener">Arguments</a> —— 传给函数的参数数组</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">new运算符</a> —— 通过构造函数创建对象</li><li><code>&quot;development&quot; !== &#39;production’</code>的作用 —— webpack打包判断执行环境是不是生产环境，如果是生产环境会压缩并且没有提示警告之类的东西</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener"> instanceof</a> —— 验证实例对象是否为该构造函数new出来的。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noopener">in关键字</a> —— 判断某个值是否在数组或对象中。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">Proxy对象</a> —— 创建某个对象，并定义一些行为给该对象。</li><li>字符串的 <code>charAt</code> 是获取第几个字符，而 <code>slice</code> 方法是截取某段字符。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noopener">delete关键字</a> —— 用于删除对象中的某个关键字。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">call()方法</a> —— 函数的调用，第一个参数为this，之后为函数定义参数。试验了下 <code>fun(a, b)</code> 和 <code>fun.call(this, a, b)</code> 两种写法效果一致。另外还可以看下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">apply()方法</a></li></ul><p><strong>PS：</strong>都是从MDN中找到的资料，多查MDN让我受益良多。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>还在学习Vue源码中……看了很多文章、也看了一遍源码。内容太多，千头万绪，容我理清之后，用自己的文字把Vue的源码学习记录分享出来。一些值得记录下来的知识点和心得会继续在本文中更新。<br>最后，想学习Vue源码的同学可以去买<a href="https://item.jd.com/12028224.html?dist=jd" target="_blank" rel="noopener">《Vue.js权威指南》</a>这本书，虽然许多章节内容和<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">官网</a>是重复的，不过源码解析部分值得一看。我也正配合着这本书和源码在学习Vue。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近偷懒好久没有写博客了，一直想继续Vue学习系列，想深入Vue源码来写。结果发现自己层次不够，对js的理解差好多。所以一直想写一直搁置着。最近重新振作决心看完Vue源码，并且以我们这类前端小白的角度来一步步弄懂Vue源码。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列六——Vue单元测试Karma+Mocha学习笔记</title>
    <link href="https://violetjack.github.io/2017/06/06/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E5%85%AD%20%E2%80%94%E2%80%94%20Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95Karma+Mocha%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://violetjack.github.io/2017/06/06/Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记/</id>
    <published>2017-06-05T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.269Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用vue-cli创建项目的时候，会提示要不要安装单元测试和e2e测试。既然官方推荐我们使用这两个测试框架，那么我们就动手去学习实践一下他们吧。</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h3><p><strong>Karma</strong>是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具在Vue中的主要作用是将项目运行在各种主流Web浏览器进行测试。<br>换句话说，它是一个测试工具，能让你的代码在浏览器环境下测试。需要它的原因在于，你的代码可能是设计在浏览器端执行的，在node环境下测试可能有些bug暴露不出来；另外，浏览器有兼容问题，karma提供了手段让你的代码自动在多个浏览器（chrome，firefox，ie等）环境下运行。如果你的代码只会运行在node端，那么你不需要用karma。</p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p><strong>Mocha</strong>是一个测试框架，在vue-cli中配合<strong>chai断言库</strong>实现单元测试。<br>Mocha的常用命令和用法不算太多，看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">测试框架 Mocha 实例教程</a>就可以大致了解了。<br>而Chai断言库可以看<a href="http://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="noopener">Chai.js断言库API中文文档</a>，很简单，多查多用就能很快掌握。</p><h1 id="我对测试框架的理解"><a href="#我对测试框架的理解" class="headerlink" title="我对测试框架的理解"></a>我对测试框架的理解</h1><h3 id="npm-run-unit-执行过程"><a href="#npm-run-unit-执行过程" class="headerlink" title="npm run unit 执行过程"></a>npm run unit 执行过程</h3><ol><li>执行 <code>npm run unit</code> 命令</li><li>开启Karma运行环境</li><li>使用Mocha去逐个测试用Chai断言写的测试用例</li><li>在终端显示测试结果</li><li>如果测试成功，karma-coverage 会在 <code>./test/unit/coverage</code> 文件夹中生成测试覆盖率结果的网页。</li></ol><h3 id="Karma-1"><a href="#Karma-1" class="headerlink" title="Karma"></a>Karma</h3><p>对于Karma，我只是了解了一下它的<a href="http://karma-runner.github.io/1.0/config/configuration-file.html" target="_blank" rel="noopener">配置选项</a>。<br>下面是Vue的karma配置，简单注释了下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var webpackConfig = require(&apos;../../build/webpack.test.conf&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = function (config) &#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line">    // 浏览器</span><br><span class="line">    browsers: [&apos;PhantomJS&apos;],</span><br><span class="line">    // 测试框架</span><br><span class="line">    frameworks: [&apos;mocha&apos;, &apos;sinon-chai&apos;, &apos;phantomjs-shim&apos;],</span><br><span class="line">    // 测试报告</span><br><span class="line">    reporters: [&apos;spec&apos;, &apos;coverage&apos;],</span><br><span class="line">    // 测试入口文件</span><br><span class="line">    files: [&apos;./index.js&apos;],</span><br><span class="line">    // 预处理器 karma-webpack</span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">      &apos;./index.js&apos;: [&apos;webpack&apos;, &apos;sourcemap&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    // Webpack配置</span><br><span class="line">    webpack: webpackConfig,</span><br><span class="line">    // Webpack中间件</span><br><span class="line">    webpackMiddleware: &#123;</span><br><span class="line">      noInfo: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 测试覆盖率报告</span><br><span class="line">    // https://github.com/karma-runner/karma-coverage/blob/master/docs/configuration.md</span><br><span class="line">    coverageReporter: &#123;</span><br><span class="line">      dir: &apos;./coverage&apos;,</span><br><span class="line">      reporters: [</span><br><span class="line">        &#123; type: &apos;lcov&apos;, subdir: &apos;.&apos; &#125;,</span><br><span class="line">        &#123; type: &apos;text-summary&apos; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Mocha和chai"><a href="#Mocha和chai" class="headerlink" title="Mocha和chai"></a>Mocha和chai</h3><p>我们看下官方的例子（都用注释来解释代码意思了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos; // 导入Vue用于生成Vue实例</span><br><span class="line">import Hello from &apos;@/components/Hello&apos; // 导入组件</span><br><span class="line">// 测试脚本里面应该包括一个或多个describe块，称为测试套件（test suite）</span><br><span class="line">describe(&apos;Hello.vue&apos;, () =&gt; &#123;</span><br><span class="line">  // 每个describe块应该包括一个或多个it块，称为测试用例（test case）</span><br><span class="line">  it(&apos;should render correct contents&apos;, () =&gt; &#123;</span><br><span class="line">    const Constructor = Vue.extend(Hello) // 获得Hello组件实例</span><br><span class="line">    const vm = new Constructor().$mount() // 将组件挂在到DOM上</span><br><span class="line">    //断言：DOM中class为hello的元素中的h1元素的文本内容为Welcome to Your Vue.js App</span><br><span class="line">    expect(vm.$el.querySelector(&apos;.hello h1&apos;).textContent)</span><br><span class="line">      .to.equal(&apos;Welcome to Your Vue.js App&apos;)  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>需要知道的知识点：</strong></p><ul><li>测试脚本都要放在 <code>test/unit/specs/</code> 目录下。</li><li>脚本命名方式为  <code>[组件名].spec.js</code>。</li><li>所谓断言，就是对组件做一些操作，并预言产生的结果。如果测试结果与断言相同则测试通过。</li><li>单元测试默认测试 <code>src</code> 目录下除了 <code>main.js</code> 之外的所有文件，可在 <code>test/unit/index.js</code> 文件中修改。</li><li>Chai断言库中，<code>to be been is that which and has have with at of same</code> 这些语言链是没有意义的，只是便于理解而已。</li><li>测试脚本由多个  <code>descibe</code> 组成，每个 <code>describe</code> 由多个 <code>it</code> 组成。</li><li><p>了解异步测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;异步请求应该返回一个对象&apos;, done =&gt; &#123;</span><br><span class="line">    request</span><br><span class="line">    .get(&apos;https://api.github.com&apos;)</span><br><span class="line">    .end(function(err, res)&#123;</span><br><span class="line">      expect(res).to.be.an(&apos;object&apos;);</span><br><span class="line">      done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>了解一下 <code>describe</code> 的钩子（生命周期）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;hooks&apos;, function() &#123;</span><br><span class="line"></span><br><span class="line">  before(function() &#123;</span><br><span class="line">    // 在本区块的所有测试用例之前执行</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(function() &#123;</span><br><span class="line">    // 在本区块的所有测试用例之后执行</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(function() &#123;</span><br><span class="line">    // 在本区块的每个测试用例之前执行</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(function() &#123;</span><br><span class="line">    // 在本区块的每个测试用例之后执行</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // test cases</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>上面简单介绍了单元测试的用法，下面来动手在Vue中进行单元测试！</p><h3 id="util-js"><a href="#util-js" class="headerlink" title="util.js"></a>util.js</h3><p>从Vue官方的demo可以看出，对于Vue的单元测试我们需要将组件实例化为一个Vue实例，有时还需要挂载到DOM上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const Constructor = Vue.extend(Hello) // 获得Hello组件实例</span><br><span class="line">const vm = new Constructor().$mount() // 将组件挂载到DOM上</span><br></pre></td></tr></table></figure></p><p>以上写法只是简单的获取组件，有时候我们需要传递props属性、自定义方法等，还有可能我们需要用到第三方UI框架。所以以上写法非常麻烦。<br>这里推荐Element的<a href="https://github.com/ElemeFE/element/blob/dev/test/unit/util.js" target="_blank" rel="noopener">单元测试工具脚本Util.js</a>，它封装了Vue单元测试中常用的方法。下面demo也是根据该 <code>Util.js</code>来写的。<br>这里简单注释了下各方法的用途。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 回收 vm，一般在每个测试脚本测试完成后执行回收vm。</span><br><span class="line"> * @param  &#123;Object&#125; vm</span><br><span class="line"> */</span><br><span class="line">exports.destroyVM = function (vm) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建一个 Vue 的实例对象</span><br><span class="line"> * @param  &#123;Object|String&#125;  Compo     - 组件配置，可直接传 template</span><br><span class="line"> * @param  &#123;Boolean=false&#125;  mounted   - 是否添加到 DOM 上</span><br><span class="line"> * @return &#123;Object&#125; vm</span><br><span class="line"> */</span><br><span class="line">exports.createVue = function (Compo, mounted = false) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建一个测试组件实例</span><br><span class="line"> * @param  &#123;Object&#125;  Compo          - 组件对象</span><br><span class="line"> * @param  &#123;Object&#125;  propsData      - props 数据</span><br><span class="line"> * @param  &#123;Boolean=false&#125; mounted  - 是否添加到 DOM 上</span><br><span class="line"> * @return &#123;Object&#125; vm</span><br><span class="line"> */</span><br><span class="line">exports.createTest = function (Compo, propsData = &#123;&#125;, mounted = false) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 触发一个事件</span><br><span class="line"> * 注： 一般在触发事件后使用 vm.$nextTick 方法确定事件触发完成。</span><br><span class="line"> * mouseenter, mouseleave, mouseover, keyup, change, click 等</span><br><span class="line"> * @param  &#123;Element&#125; elm      - 元素</span><br><span class="line"> * @param  &#123;String&#125; name      - 事件名称</span><br><span class="line"> * @param  &#123;*&#125; opts           - 配置项</span><br><span class="line"> */</span><br><span class="line">exports.triggerEvent = function (elm, name, ...opts) &#123;&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 触发 “mouseup” 和 “mousedown” 事件，既触发点击事件。</span><br><span class="line"> * @param &#123;Element&#125; elm     - 元素</span><br><span class="line"> * @param &#123;*&#125; opts          - 配置选项</span><br><span class="line"> */</span><br><span class="line">exports.triggerClick = function (elm, ...opts) &#123;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>示例一中我们测试了 <code>Hello</code> 组件的各种元素的数据，学习  <code>util.js</code> 的 <code>destroyVM</code> 和 <code>createTest</code> 方法的用法以及如何获取目标元素进行测试。获取DOM元素的方式可查看<a href="http://www.runoob.com/jsref/dom-obj-document.html" target="_blank" rel="noopener">DOM 对象</a>教程。<br><strong>Hello.vue</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1 class=&quot;hello-title&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2 class=&quot;hello-content&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;hello&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    content: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;Welcome!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Hello.spec.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; destroyVM, createTest &#125; from &apos;../util&apos;</span><br><span class="line">import Hello from &apos;@/components/Hello&apos;</span><br><span class="line"></span><br><span class="line">describe(&apos;Hello.vue&apos;, () =&gt; &#123;</span><br><span class="line">  let vm</span><br><span class="line"></span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    destroyVM(vm)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&apos;测试获取元素内容&apos;, () =&gt; &#123;</span><br><span class="line">    vm = createTest(Hello, &#123; content: &apos;Hello World&apos; &#125;, true)</span><br><span class="line">    expect(vm.$el.querySelector(&apos;.hello h1&apos;).textContent).to.equal(&apos;Welcome!&apos;)</span><br><span class="line">    expect(vm.$el.querySelector(&apos;.hello h2&apos;).textContent).to.have.be.equal(&apos;Hello World&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&apos;测试获取Vue对象中数据&apos;, () =&gt; &#123;</span><br><span class="line">    vm = createTest(Hello, &#123; content: &apos;Hello World&apos; &#125;, true)</span><br><span class="line">    expect(vm.msg).to.equal(&apos;Welcome!&apos;)</span><br><span class="line">    // Chai的语言链是无意义的，可以随便写。如下：</span><br><span class="line">    expect(vm.content).which.have.to.be.that.equal(&apos;Hello World&apos;) </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&apos;测试获取DOM中是否存在某个class&apos;, () =&gt; &#123;</span><br><span class="line">    vm = createTest(Hello, &#123; content: &apos;Hello World&apos; &#125;, true)</span><br><span class="line">    expect(vm.$el.classList.contains(&apos;hello&apos;)).to.be.true</span><br><span class="line">    const title = vm.$el.querySelector(&apos;.hello h1&apos;)</span><br><span class="line">    expect(title.classList.contains(&apos;hello-title&apos;)).to.be.true</span><br><span class="line">    const content = vm.$el.querySelector(&apos;.hello-content&apos;)</span><br><span class="line">    expect(content.classList.contains(&apos;hello-content&apos;)).to.be.true</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>输出结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello.vue</span><br><span class="line">  √ 测试获取元素内容</span><br><span class="line">  √ 测试获取Vue对象中数据</span><br><span class="line">  √ 测试获取DOM中是否存在某个class</span><br></pre></td></tr></table></figure></p><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>示例二中我们使用 <code>createTest</code> 创建测试组件测试点击事件，用 <code>createVue</code> 创建Vue示例对象测试组件 <code>Click</code> 的使用。这里主要可以看下到 <code>createVue</code> 方法的使用。<br><strong>Click.vue</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span class=&quot;init-num&quot;&gt;初始值为&#123;&#123; InitNum &#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;span class=&quot;click-num&quot;&gt;点击了&#123;&#123; ClickNum &#125;&#125;次&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;span class=&quot;result-num&quot;&gt;最终结果为&#123;&#123; ResultNum &#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;累加&#123;&#123; AddNum &#125;&#125;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Click&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    AddNum: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    InitNum: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ClickNum: 0,</span><br><span class="line">      ResultNum: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.ResultNum = this.InitNum</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add () &#123;</span><br><span class="line">      this.ResultNum += this.AddNum</span><br><span class="line">      this.ClickNum++</span><br><span class="line">      this.$emit(&apos;result&apos;, &#123;</span><br><span class="line">        ClickNum: this.ClickNum,</span><br><span class="line">        ResultNum: this.ResultNum</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Click.spec.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import &#123; destroyVM, createTest, createVue &#125; from &apos;../util&apos;</span><br><span class="line">import Click from &apos;@/components/Click&apos;</span><br><span class="line"></span><br><span class="line">describe(&apos;click.vue&apos;, () =&gt; &#123;</span><br><span class="line">  let vm</span><br><span class="line"></span><br><span class="line">  afterEach(() =&gt; &#123;</span><br><span class="line">    destroyVM(vm)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&apos;测试按钮点击事件&apos;, () =&gt; &#123;</span><br><span class="line">    vm = createTest(Click, &#123;</span><br><span class="line">      AddNum: 10,</span><br><span class="line">      InitNum: 11</span><br><span class="line">    &#125;, true)</span><br><span class="line">    let buttonElm = vm.$el.querySelector(&apos;button&apos;)</span><br><span class="line">    buttonElm.click()</span><br><span class="line">    buttonElm.click()</span><br><span class="line">    buttonElm.click()</span><br><span class="line">    // setTimeout 的原因</span><br><span class="line">    // 在数据改变之后，界面的变化会有一定延时。不用timeout有时候会发现界面没有变化</span><br><span class="line">    setTimeout(done =&gt; &#123;</span><br><span class="line">      expect(vm.ResultNum).to.equal(41)</span><br><span class="line">      expect(vm.$el.querySelector(&apos;.init-num&apos;).textContent).to.equal(&apos;初始值为11&apos;)</span><br><span class="line">      expect(vm.$el.querySelector(&apos;.click-num&apos;).textContent).to.equal(&apos;点击了3次&apos;)</span><br><span class="line">      expect(vm.$el.querySelector(&apos;.result-num&apos;).textContent).to.equal(&apos;最终结果为41&apos;)</span><br><span class="line">      done()</span><br><span class="line">    &#125;, 100)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&apos;测试创建Vue对象&apos;, () =&gt; &#123;</span><br><span class="line">    let result</span><br><span class="line">    vm = createVue(&#123;</span><br><span class="line">      template: `</span><br><span class="line">        &lt;click @click=&quot;handleClick&quot;&gt;&lt;/click&gt;</span><br><span class="line">      `,</span><br><span class="line">      props: &#123;</span><br><span class="line">        AddNum: 10,</span><br><span class="line">        InitNum: 11</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        handleClick (obj) &#123;</span><br><span class="line">          result = obj</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        Click</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, true)</span><br><span class="line">    vm.$el.click()</span><br><span class="line">    vm.$nextTick(done =&gt; &#123;</span><br><span class="line">      expect(result).to.be.exist</span><br><span class="line">      expect(result.ClickNum).to.equal(1)</span><br><span class="line">      expect(result.ResultNum).to.be.equal(21)</span><br><span class="line">      done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>输出结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">click.vue</span><br><span class="line">  √ 测试按钮点击事件</span><br><span class="line">  √ 测试创建Vue对象</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>所有示例代码都放<a href="https://github.com/violetjack/VueStudyDemos/tree/master/VueTestDemo" target="_blank" rel="noopener">Github仓库</a>中便于查看。如果想查看更多好的测试用例，建议配合 <code>Util.js</code> 看一下 <a href="https://github.com/ElemeFE/element/tree/dev/test/unit" target="_blank" rel="noopener">Element 的单元测试脚本的写法</a>，里面有很多测试脚本可以供我们学习。作为被广大Vue用户使用的UI组件库，测试脚本肯定也写很很不错的~甚至可以将这些脚本照抄一遍，相信这会对学习Vue组件的单元测试有很大帮助。</p><p>下面是本人看Element单元测试的笔记，供参考。</p><ul><li>Util.js 方法包含了大多数Vue组件化的测试需求。</li><li><code>vm.$el</code> <code>vm.$nextTick</code> 和 <code>vm.$ref</code> 都是在测试过程中比较常用的一些Vue语法糖。</li><li>需要注意： vm.$nextTick 方法是异步的，所以需要在里面使用done方法。</li><li>异步断言，方法参数需要是 <code>_</code> 或者 <code>done</code></li><li>大多数时候查询元素通过 <code>querySelector</code> 方法查询class获得<ul><li>vm.$el.querySelector(‘.el-breadcrumb’).innerText</li></ul></li><li>大多数情况下查询是否存在某个Class通过 <code>classList.contains</code> 方法获得，查找的结果为 true 或 false<ul><li>vm.$el .classList.contains(‘el-button–primary’)</li></ul></li><li>异步测试必须以 <code>done()</code> 方法结尾。<code>setTimeout</code> 和 <code>vm.$nextTick</code> 是常用的异步测试。</li><li>实现按钮点击：通过获取按钮元素 <code>btn</code>，执行 <code>btn.click()</code> 方法实现。</li><li>由于 Vue 进行 <a href="http://cn.vuejs.org/v2/guide/reactivity.html#Async-Update-Queue" target="_blank" rel="noopener">异步更新DOM</a> 的情况，一些依赖DOM更新结果的断言必须在 <code>Vue.nextTick</code> 回调中进行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">triggerEvent(vm.$refs.cascader.$el, &apos;mouseenter&apos;);</span><br><span class="line">vm.$nextTick(_ =&gt; &#123;</span><br><span class="line">     vm.$refs.cascader.$el.querySelector(&apos;.el-cascader__clearIcon&apos;).click();</span><br><span class="line">     vm.$nextTick(_ =&gt; &#123;</span><br><span class="line">        expect(vm.selectedOptions.length).to.be.equal(0);</span><br><span class="line">        done();</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://cn.vuejs.org/v2/guide/unit-testing.html" target="_blank" rel="noopener">单元测试</a></li><li><a href="http://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="noopener">Chai.js断言库API中文文档</a></li><li><a href="https://github.com/ElemeFE/element/tree/dev/test/unit" target="_blank" rel="noopener">Element</a></li><li><a href="https://segmentfault.com/a/1190000006895064" target="_blank" rel="noopener">前端单元测试之Karma环境搭建</a></li><li><a href="https://segmentfault.com/q/1010000009527765" target="_blank" rel="noopener">前端自动化测试是干嘛的？</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">测试框架 Mocha 实例教程</a></li><li><a href="http://karma-runner.github.io/1.0/index.html" target="_blank" rel="noopener">Karma官网</a></li></ul><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在使用vue-cli创建项目的时候，会提示要不要安装单元测试和e2e测试。既然官方推荐我们使用这两个测试框架，那么我们就动手去学习实践一下他们吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</title>
    <link href="https://violetjack.github.io/2017/05/19/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%BA%94%20%E2%80%94%E2%80%94%20%E4%BB%8EVUE-CLI%E6%9D%A5%E8%81%8A%E8%81%8AESLint/"/>
    <id>https://violetjack.github.io/2017/05/19/Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在用vue-cli写项目的时候，经常和ESLint打交道，也算是不打不相识啦。下面总结一下在学习Vue的时候遇到的一些问题。</p></blockquote><h1 id="ESLint简介"><a href="#ESLint简介" class="headerlink" title="ESLint简介"></a>ESLint简介</h1><p>关于ESLint的介绍网上很多，这里就简单说些有用的。<br>ESLint的作用是检查代码错误和统一代码风格的。由于每个人写代码的习惯都会有所不同，所以统一代码风格在团队协作中尤为重要。</p><h1 id="vue-cli的eslint相关"><a href="#vue-cli的eslint相关" class="headerlink" title="vue-cli的eslint相关"></a>vue-cli的eslint相关</h1><p>vue-cli在init初始化时会询问是否需要添加ESLint，确认之后在创建的项目中就会出现<code>.eslintignore</code>和<code>.eslintrc.js</code>两个文件。<br><code>.eslintignore</code>类似Git的<code>.gitignore</code>用来忽略一些文件不使用ESLint检查。<br><code>.eslintrc.js</code>是ESLint配置文件，用来设置插件、自定义规则、解析器等配置。</p><p><strong>.eslintrc.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// http://eslint.org/docs/user-guide/configuring</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  parser: &apos;babel-eslint&apos;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: &apos;module&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  // https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</span><br><span class="line">  extends: &apos;standard&apos;,</span><br><span class="line">  // required to lint *.vue files</span><br><span class="line">  plugins: [</span><br><span class="line">    &apos;html&apos;</span><br><span class="line">  ],</span><br><span class="line">  // add your custom rules here</span><br><span class="line">  &apos;rules&apos;: &#123;</span><br><span class="line">    // allow paren-less arrow functions</span><br><span class="line">    &apos;arrow-parens&apos;: 0,</span><br><span class="line">    // allow async-await</span><br><span class="line">    &apos;generator-star-spacing&apos;: 0,</span><br><span class="line">    // allow debugger during development</span><br><span class="line">    &apos;no-debugger&apos;: process.env.NODE_ENV === &apos;production&apos; ? 2 : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>解析器(parser)：</strong>使用了babel-eslint，这个可以在package.json中找到，说明我们已经安装过该解析器了。<br><strong>环境配置(env)：</strong>在浏览器中使用eslint。<br><strong>继承(extends)：</strong>该配置文件继承了<a href="https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style" target="_blank" rel="noopener">standard</a>规则，具体规则自己看文档，看不懂有<a href="https://github.com/feross/standard/blob/master/docs/RULES-zhcn.md" target="_blank" rel="noopener">中文版</a>的。<br><strong>规则(rules)：</strong>对于三个自定义规则，我特地查了官方文档。</p><blockquote><ul><li>arrow-parems 允许箭头函数参数使用括号,具体操作请看<a href="http://eslint.org/docs/rules/arrow-parens" target="_blank" rel="noopener">文档</a></li><li>generator-star-spacing 允许方法之间加星号，如<code>function * generator() {}</code>。<a href="http://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="noopener">文档</a>在此。特地查了下，发现这是ES6提供的<a href="https://imququ.com/post/generator-function-in-es6.html" target="_blank" rel="noopener">生成器函数</a>，回头学习下。</li><li>no-debugger’ 允许在开发环境下使用debugger。这个比较简单，不过还是贴下<a href="http://eslint.org/docs/rules/no-debugger" target="_blank" rel="noopener">文档</a>便于查看。</li></ul></blockquote><p><strong>注意：</strong>在<code>rules</code>中每个配置项后面第一个值是eslint规则的<strong>错误等级</strong>。</p><ul><li>“off” 或 0 - 关闭这条规则</li><li>“warn” 或 1 - 违反规则会警告（不会影响项目运行）</li><li>“error” 或 2 - 违反规则会报错（屏幕上一堆错误代码~）</li></ul><h1 id="遇到过的问题"><a href="#遇到过的问题" class="headerlink" title="遇到过的问题"></a>遇到过的问题</h1><p>由于一开始我不了解ESLint就写项目，不知道要看Standard的<a href="https://github.com/feross/standard/blob/master/docs/RULES-zhcn.md" target="_blank" rel="noopener">文档</a>，所以遇到了很多ESLint的错误和警告，分享下希望能对朋友们有帮助。</p><h3 id="1-Do-not-use-‘new’-for-side-effects"><a href="#1-Do-not-use-‘new’-for-side-effects" class="headerlink" title="1. Do not use ‘new’ for side effects"></a>1. Do not use ‘new’ for side effects</h3><p>该错误是由于我删除了<code>/* eslint-disable no-new*/</code>这段注释引发的，<code>/* eslint-disable */</code>这段注释的作用就是不让eslint检查注释下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>错误原因：</strong>不可以直接new一个新对象，需要将新对象赋值给一个变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue()</span><br></pre></td></tr></table></figure></p><h3 id="2-Strings-must-use-singlequote"><a href="#2-Strings-must-use-singlequote" class="headerlink" title="2. Strings must use singlequote"></a>2. Strings must use singlequote</h3><p><strong>错误原因：</strong>字符串必须用单引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">      msg: &quot;Welcome to Your Vue.js App&quot;, //双引号，报错！</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-Expected-space-s-after-“return”"><a href="#3-Expected-space-s-after-“return”" class="headerlink" title="3. Expected space(s) after “return”"></a>3. Expected space(s) after “return”</h3><p><strong>错误原因：</strong>括号两侧必须要有空格隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return&#123;// 没有空格报错</span><br><span class="line">  msg: &apos;Welcome to Your Vue.js App&apos;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startClock ()&#123;&#125; //)&#123;中间没有空格，报错！</span><br></pre></td></tr></table></figure></p><h3 id="4-Expected-indentation-of-8-spaces-but-found-6"><a href="#4-Expected-indentation-of-8-spaces-but-found-6" class="headerlink" title="4. Expected indentation of 8 spaces but found 6"></a>4. Expected indentation of 8 spaces but found 6</h3><p><strong>错误原因：</strong>使用两个空格进行缩进。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (this.IntervalID === &apos;&apos;) &#123;</span><br><span class="line">this.IntervalID = setInterval(this.countDown, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实ESLint的报错并不难懂，只要理解错误原因还是很好解决的。如果提前看看文档，更不会出现太多报错问题了。这个故事告诉我们<strong>看文档是很重要滴~%&gt;_&lt;%</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><strong>发现ESLint的报错都会在报错语句前面显示一个URL</strong>，点击进去可以看到详细的错误信息哦。这是我刚在写博客的时候发现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://eslint.org/docs/rules/no-new  Do not use &apos;new&apos; for side effects  </span><br><span class="line">E:\Github\EfficiencyTools\EfficiencyTool-VueMobile\src\main.js:15:1</span><br><span class="line">new Vue(&#123;</span><br></pre></td></tr></table></figure></p><p>这里的 <a href="http://eslint.org/docs/rules/no-new" target="_blank" rel="noopener">http://eslint.org/docs/rules/no-new</a> 就是ESLint规则报错的原因，还是很人性化的。</p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>推荐使用VSCode来编辑代码。按照着<a href="https://github.com/varHarrie/Dawn-Blossoms/issues/10" target="_blank" rel="noopener">VSCode拓展插件推荐——提高Node和Vue开发效率</a>来安装和配置插件后，写vue项目方便了很多。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实vue-cli的ESLint不需要我们配置太多，基本的都配置好了，如果你愿意完全可以照着vue-cli提供的规则去写代码。当我们需要修改一些规则的时候添加到rules中替换原有规则就可以了。一开始用ESLint写代码很烦，经常由于一些格式问题调试报错，让回去改格式。不过慢慢的就会发现使用ESLint之后代码的确可读性、美观性上都好了很多。<br>推荐使用ESLint来规范代码编辑~</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在用vue-cli写项目的时候，经常和ESLint打交道，也算是不打不相识啦。下面总结一下在学习Vue的时候遇到的一些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ESLint简介&quot;&gt;&lt;a href=&quot;#ESLint简介&quot; cla
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列四 —— Webpack学习实践</title>
    <link href="https://violetjack.github.io/2017/02/19/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E5%9B%9B%20%E2%80%94%E2%80%94%20Webpack%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/"/>
    <id>https://violetjack.github.io/2017/02/19/Vue.js学习系列四 —— Webpack学习实践/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这两周一直想写webpack的知识点，却发现webpack其实要将webpack说的具体内容还是挺多的。而且稀土掘金上一搜webpack有好多人都有去写webpack的知识点，所以本文中不再去重复别人的东西了，就简单记录一下我对webpack的理解。并按照老规矩附上demo以及我收藏的几篇不错的webpack入门文章以供学习参考~</p></blockquote><h1 id="一、什么是webpack"><a href="#一、什么是webpack" class="headerlink" title="一、什么是webpack"></a>一、什么是webpack</h1><h2 id="1-webpack是什么？"><a href="#1-webpack是什么？" class="headerlink" title="1. webpack是什么？"></a>1. webpack是什么？</h2><p>webpack是一个模块打包工具。<br><strong>用vue项目来举例：</strong>浏览器它是只认识js，不认识vue的。而我们写的代码后缀大多是.vue的，在每个.vue文件中都可能html、js、css甚至是图片资源；并且由于组件化，这些.vue文件之间还有错综复杂的关系。所以项目要被浏览器识别，我们就要使用webpack将它们打包成js文件以及相应的资源文件。<br>或者这么理解，我们以vue项目的形式编写项目逻辑，浏览器以他理解的方式来运行项目。webpack把我们的vue项目想表达的所有意图传递给浏览器让浏览器去运行。<br><em>PS：webpack功能不止于此，但这个功能是让我们项目能跑起来的必要条件！（个人理解，如有错误，还请批评指正）</em></p><h2 id="2-来个demo理解下"><a href="#2-来个demo理解下" class="headerlink" title="2. 来个demo理解下"></a>2. 来个demo理解下</h2><p>这里我们来理解下webpack是如何打包的~（转译会在loaders中提到）。首先我们写两个最简单的js<br><strong>hello.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;hello~~&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>app.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;hello app&quot;);</span><br><span class="line">require(&quot;./hello.js&quot;)</span><br></pre></td></tr></table></figure></p><p><code>app.js</code>中导入了<code>hello.js</code>，它们之间有导入关系。我们假如直接将<code>app.js</code>放到html中是会报错的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello app</span><br><span class="line">Uncaught ReferenceError: require is not defined at app.js:2</span><br></pre></td></tr></table></figure></p><p>如果我们要维持这种关系我们就必须使用打包工具进行打包。在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装webpack</span><br><span class="line">$ npm install webpack -g</span><br><span class="line">// 打包app.js</span><br><span class="line">$ webpack app.js bundle.js</span><br></pre></td></tr></table></figure></p><p>然后我们会发现项目中多了一个bundle.js文件，我们在html中导入这个js文件。<br><strong>index.html</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo01&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;demo01&lt;/h1&gt;</span><br><span class="line">    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>最后输出正确结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello app</span><br><span class="line">hello~~</span><br></pre></td></tr></table></figure></p><h1 id="二、webpack-config-js"><a href="#二、webpack-config-js" class="headerlink" title="二、webpack.config.js"></a>二、webpack.config.js</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>webpack.config.js文件是webpack的默认配置文件。之前我们使用命令行<code>$ webpack entry.js output.js</code>来实现打包，其实webpack可以有更多的打包配置，这些配置都是在webpack.config.js中完成的。下面是一个简单的webpack.config.js。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    entry: &quot;./app/entry.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  output:</span><br><span class="line">  &#123;</span><br><span class="line">    path: __dirname + &quot;/dist&quot;,</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;babel&apos;,</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>个人觉得这三个东西是最最重要的了，所以必须单独说说这三个配置。其他配置都可以去查阅资料慢慢来。</p><h2 id="2-entry-amp-output"><a href="#2-entry-amp-output" class="headerlink" title="2. entry&amp;output"></a>2. entry&amp;output</h2><p>entry是配置webpack的入口文件，上面的代码中我们将app目录下的entry.js作为入口文件。webpack会将与entry.js有关的资源都进行打包。<br>output是出口文件，即打包好的文件的存放地址和文件名。</p><p>这里有几种文件的输入输出情况。引用自<a href="https://llp0574.github.io/2016/11/29/getting-started-with-webpack2/" target="_blank" rel="noopener">Webpack 2 入门教程</a>。</p><h3 id="2-1-单文件，单输出"><a href="#2-1-单文件，单输出" class="headerlink" title="2.1 单文件，单输出"></a>2.1 单文件，单输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: __dirname + &quot;/src&quot;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &quot;./app.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &quot;/dist&quot;,</span><br><span class="line">    filename: &quot;[name].bundle.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-多文件，单输出"><a href="#2-2-多文件，单输出" class="headerlink" title="2.2 多文件，单输出"></a>2.2 多文件，单输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: __dirname + &quot;/src&quot;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [&quot;./home.js&quot;, &quot;./events.js&quot;, &quot;./vendor.js&quot;],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &quot;/dist&quot;,</span><br><span class="line">    filename: &quot;[name].bundle.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-多文件，多输出"><a href="#2-3-多文件，多输出" class="headerlink" title="2.3 多文件，多输出"></a>2.3 多文件，多输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: __dirname + &quot;/src&quot;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    home: &quot;./home.js&quot;,</span><br><span class="line">    events: &quot;./events.js&quot;,</span><br><span class="line">    contact: &quot;./contact.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &quot;/dist&quot;,</span><br><span class="line">    filename: &quot;[name].bundle.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大家可以动手实践一下，很好理解。打包出来的单个或者多个文件直接可以在html中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;./dist/entry.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-loaders"><a href="#3-loaders" class="headerlink" title="3. loaders"></a>3. loaders</h2><p>loader是webpack的加载器，可以帮我们处理各种非js文件。如css样式，vue、jsx、weex等后缀的代码，JPG、PNG图片等。所以我们一般会在package.json中看到各种<em>*</em>-loader。这些就是各类资源的loader加载器。<br>在module的loaders数组中可以有多个对象，每个对象就是一个加载器。下面是babel-loader的最简单配置方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.js$/,</span><br><span class="line">      loader: &apos;babel&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对象中的test是正则表达式，用于搜索后缀为.js的文件。loader是所用加载器名称。</p><h2 id="4-使用babel来转译ES6代码"><a href="#4-使用babel来转译ES6代码" class="headerlink" title="4. 使用babel来转译ES6代码"></a>4. 使用babel来转译ES6代码</h2><p>下面我们来一步步使用babel-loader将ES6语法用于项目中。<br>webpack打包的文件默认是不支持ES6的，我们需要用babel转译。</p><h3 id="4-1-安装babel"><a href="#4-1-安装babel" class="headerlink" title="4.1 安装babel"></a>4.1 安装babel</h3><p>这个配置其实我是抄的vue-cli，个人对babel用法还不是很熟。<br>在package.json中添加依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;babel-core&quot;: &quot;^6.22.1&quot;,</span><br><span class="line">  &quot;babel-loader&quot;: &quot;^6.2.10&quot;,</span><br><span class="line">  &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;,</span><br><span class="line">  &quot;babel-preset-es2015&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-preset-stage-2&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-register&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;^1.14.0&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>npm安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="4-2-在webpack-config-js中添加babel-loader的配置"><a href="#4-2-在webpack-config-js中添加babel-loader的配置" class="headerlink" title="4.2 在webpack.config.js中添加babel-loader的配置"></a>4.2 在webpack.config.js中添加babel-loader的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.js$/,</span><br><span class="line">      loader: &apos;babel&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-添加-babelrc"><a href="#4-3-添加-babelrc" class="headerlink" title="4.3 添加.babelrc"></a>4.3 添加.babelrc</h3><p>在项目根目录下添加.babelrc文件，文件内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-2&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;],</span><br><span class="line">  &quot;comments&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-4-使用ES6"><a href="#4-4-使用ES6" class="headerlink" title="4.4 使用ES6"></a>4.4 使用ES6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import good from &apos;./good.js&apos;</span><br></pre></td></tr></table></figure><h1 id="三、分析vue-cli"><a href="#三、分析vue-cli" class="headerlink" title="三、分析vue-cli"></a>三、分析vue-cli</h1><p>说了这么多，我的最终目的还是为了学习Vue.js。所以在对webpack有了一定的理解之后，就发现其实vue-cli并不是那么深不可测。</p><h2 id="1-结构分析"><a href="#1-结构分析" class="headerlink" title="1. 结构分析"></a>1. 结构分析</h2><ul><li>build —— 项目构建文件夹<ul><li>build.js —— 打包构建脚本（npm run build）</li><li>check-versions.js —— npm和node版本的查询</li><li>dev-client.js —— </li><li>dev-server.js —— 开发调试脚本（npm run dev）</li><li>utils.js —— 工具类</li><li>webpack.base.config.js —— Webpack配置文件</li><li>webpack.dev.config.js —— 开发版本Webpack配置文件，与webpack.base.config.js合并成完整的配置文件。</li><li>webpack.prod.config.js —— 生产版本Webpack配置文件，与webpack.base.config.js合并成完整的配置文件。</li></ul></li><li>config —— 配置文件夹，保存有各种配置参数（文件路径、服务器端口、功能开关）</li><li>src —— 代码文件夹</li><li>static<ul><li>.gitkeep —— 作用是将文件所在文件夹保留在git版本控制中。文件类型和.gitignore差不多。</li></ul></li><li>.babelrc —— babel配置文件</li><li>.editorconfig —— 编辑配置，确保使用各种编辑器时能有相同的编辑格式。</li><li>.gitignore —— git忽略文件</li><li>index.html —— 页面，最终显示在这个html中</li><li>package.json —— npm配置文件，包含了项目的信息、脚本、依赖库等重要信息。</li></ul><h2 id="2-创建简易cli"><a href="#2-创建简易cli" class="headerlink" title="2. 创建简易cli"></a>2. 创建简易cli</h2><p>理解完vue-cli的某些功能后，不难发现我们自己也可以搭建简易的vue-cli了。<br>官方的脚手架中除了有webpack打包，还包含了node脚本、开发和生产模式的切换、ESLint配置等功能。我们暂时不需要，将项目简化来更好的理解webpack。</p><h3 id="2-1-package-json"><a href="#2-1-package-json" class="headerlink" title="2.1 package.json"></a>2.1 package.json</h3><p>让我们来自己建立一个cli，首先创建一个空文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir demo05</span><br><span class="line">$ cd demo05</span><br></pre></td></tr></table></figure></p><p>初始化npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></p><p>然后复制vue-cli中的依赖库到package.json中（直接复制啦，具体依赖库的作用就不提啦~之后会写博客补上的）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;vue&quot;: &quot;^2.1.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;autoprefixer&quot;: &quot;^6.4.0&quot;,</span><br><span class="line">  &quot;babel-core&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-loader&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-plugin-transform-runtime&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-preset-es2015&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-preset-stage-2&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;babel-register&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">  &quot;chalk&quot;: &quot;^1.1.3&quot;,</span><br><span class="line">  &quot;connect-history-api-fallback&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">  &quot;css-loader&quot;: &quot;^0.25.0&quot;,</span><br><span class="line">  &quot;eventsource-polyfill&quot;: &quot;^0.9.6&quot;,</span><br><span class="line">  &quot;express&quot;: &quot;^4.13.3&quot;,</span><br><span class="line">  &quot;extract-text-webpack-plugin&quot;: &quot;^1.0.1&quot;,</span><br><span class="line">  &quot;file-loader&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">  &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.1.2&quot;,</span><br><span class="line">  &quot;function-bind&quot;: &quot;^1.0.2&quot;,</span><br><span class="line">  &quot;html-webpack-plugin&quot;: &quot;^2.8.1&quot;,</span><br><span class="line">  &quot;http-proxy-middleware&quot;: &quot;^0.17.2&quot;,</span><br><span class="line">  &quot;json-loader&quot;: &quot;^0.5.4&quot;,</span><br><span class="line">  &quot;semver&quot;: &quot;^5.3.0&quot;,</span><br><span class="line">  &quot;opn&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">  &quot;ora&quot;: &quot;^0.3.0&quot;,</span><br><span class="line">  &quot;shelljs&quot;: &quot;^0.7.4&quot;,</span><br><span class="line">  &quot;url-loader&quot;: &quot;^0.5.7&quot;,</span><br><span class="line">  &quot;vue-loader&quot;: &quot;^10.0.0&quot;,</span><br><span class="line">  &quot;vue-style-loader&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">  &quot;vue-template-compiler&quot;: &quot;^2.1.0&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;^1.13.2&quot;,</span><br><span class="line">  &quot;webpack-dev-middleware&quot;: &quot;^1.8.3&quot;,</span><br><span class="line">  &quot;webpack-hot-middleware&quot;: &quot;^2.12.2&quot;,</span><br><span class="line">  &quot;webpack-merge&quot;: &quot;^0.14.1&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="2-2-webpack-config-js"><a href="#2-2-webpack-config-js" class="headerlink" title="2.2 webpack.config.js"></a>2.2 webpack.config.js</h3><p>这里的webpack配置文件中的部分内容是从官方的 <code>webpack.base.config.js</code> 中复制出来的。正如我项目结构中所说的，vue-cli中的 <code>webpack.base.config.js</code> 是基础的配置文件。vue-cli中的 <code>webpack.dev.config.js</code> 和 <code>webpack.prod.config.js</code> 分别代表了开发和生产版本的webpack配置文件，他们与 <code>webpack.base.config.js</code> 合并成最后的webpack配置文件。这里我们只要找到 <code>webpack.base.config.js</code> 即可。<br>下面是完整配置代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&quot;path&quot;)</span><br><span class="line">var projectRoot = path.resolve(__dirname, &apos;../&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  // 输出文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;./dist/bundle.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 别名</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    fallback: [path.join(__dirname, &apos;../node_modules&apos;)],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.common.js&apos;,</span><br><span class="line">      &apos;src&apos;: path.resolve(__dirname, &apos;../src&apos;),</span><br><span class="line">      &apos;assets&apos;: path.resolve(__dirname, &apos;../src/assets&apos;),</span><br><span class="line">      &apos;components&apos;: path.resolve(__dirname, &apos;../src/components&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    // 加载器</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: &apos;vue&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;babel&apos;,</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: &apos;json&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url&apos;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-添加必要文件"><a href="#2-3-添加必要文件" class="headerlink" title="2.3 添加必要文件"></a>2.3 添加必要文件</h3><p>由于使用git、babel，所以我将vue-cli中的 <code>.gitignore</code> 和 <code>.babelrc</code> 直接复制过来。<br>还有，由于懒得写逻辑代码，这里我将 <code>src</code> 文件夹中所有内容也直接复制过来。<br>复制按成后进行webpack打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure></p><p>打包完成就会出现一个在 <code>dist</code> 目录下有一个 <code>bundle.js</code> 文件。有了打包文件，我们还需要创建一个 <code>index.html</code> 来显示效果，这个之后再说。<br>所以，最后的项目结构如下图</p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-b65832334ec76374.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p><h3 id="2-4-index-html"><a href="#2-4-index-html" class="headerlink" title="2.4 index.html"></a>2.4 index.html</h3><p>现在，到了呈现效果的时候了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Demo3&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>很简单，创建一个id为app的div元素用于显示Vue组件内容，然后将打包好的bundle.js引用进去。<br>现在，到项目目录中找到 <code>index.html</code> 页面，浏览器打开就可以看到效果啦~</p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-9e3fd5985b12e67a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><p><strong>注：</strong>简易cli项目的源码在 VueStudyDemos\WebpackDemos\demo5中</p><h1 id="四、相关资料推荐"><a href="#四、相关资料推荐" class="headerlink" title="四、相关资料推荐"></a>四、相关资料推荐</h1><p>这里推荐一下我学习webpack中发现的一些好的网站，分享一下。<br><a href="https://github.com/webpack-china/awesome-webpack-cn" target="_blank" rel="noopener">https://github.com/webpack-china/awesome-webpack-cn</a><br><a href="http://blog.guowenfh.com/2016/03/24/vue-webpack-01-base/" target="_blank" rel="noopener">http://blog.guowenfh.com/2016/03/24/vue-webpack-01-base/</a></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>拖了一个春节，终于把webpack的博客给写出来了。感觉在写完博客之后对webpack的理解深刻了许多，再次证明了“教是最好的学”这个理论。<br>新的一年，我要坚持好好写博客，享受分享带来的快乐。<br>之后计划学习一下eslint以及一些测试工具。然后试着用element和mint做两个小demo分享出来。然后了解一下node的相关知识。</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这两周一直想写webpack的知识点，却发现webpack其实要将webpack说的具体内容还是挺多的。而且稀土掘金上一搜webpack有好多人都有去写webpack的知识点，所以本文中不再去重复别人的东西了，就简单记录一下我对webpack的理解
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</title>
    <link href="https://violetjack.github.io/2017/01/09/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B8%89%20%E2%80%94%E2%80%94%20axios%E5%92%8C%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/"/>
    <id>https://violetjack.github.io/2017/01/09/Vue.js学习系列三 —— axios和网络传输相关知识的学习实践/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在学习了之前的路由vue-router和状态管理vuex之后，就应该是网络交互了。就学习尤大推荐的axios了。刚好本人对网络请求这块除了会get、put、post和delete这四个方法之外知之甚少，刚好补全上。</p></blockquote><p><strong>注意：</strong>Vue官方推荐的网络通信库不再是vue-resource了，推荐使用<a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios</a>。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="尤大的公告"></p><h1 id="axios安装"><a href="#axios安装" class="headerlink" title="axios安装"></a>axios安装</h1><p>npm:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure></p><p>bower:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure></p><p>Using cdn:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h1 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h1><p><code>GET</code>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Make a request for a user with a given ID</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// Optionally the request above could also be done as</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p><code>POST</code>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">   firstName: &apos;Fred&apos;,</span><br><span class="line">   lastName: &apos;Flintstone&apos;</span><br><span class="line"> &#125;)</span><br><span class="line"> .then(function (response) &#123;</span><br><span class="line">   console.log(response);</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(function (error) &#123;</span><br><span class="line">   console.log(error);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>同时执行多个请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // Both requests are now complete</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p><p>其实和其他的ajax库一样，基本用法都是差不多的。大家一看就知道怎么用。</p><h1 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h1><p>可以直接通过<code>config</code>来完成请求<br>axios(config)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: &apos;post&apos;,</span><br><span class="line">  url: &apos;/user/12345&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,</span><br><span class="line">    lastName: &apos;Flintstone&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>axios(url, [config])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Send a GET request (default method)</span><br><span class="line">axios(&apos;/user/12345&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h2><p>下面是axios支持的所有请求方法别名，便于各种请求。<br>注：<code>[...]</code>中的数据表示可以为空。<code>url</code>是ajax请求地址；<code>data</code>是提交的数据对象；<code>config</code>是配置对象，所有ajax配置都可以在<code>config</code>中实现。</p><ul><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(url[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(url[, data[, config]])</li><li>axios.patch(url[, data[, config]])</li></ul><h2 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h2><p>下列接口用于处理并发请求(同时处理多个多个request)</p><ul><li>axios.all(iterable)</li><li>axios.spread(callback)</li></ul><h2 id="axios实例"><a href="#axios实例" class="headerlink" title="axios实例"></a>axios实例</h2><p>可以用自定义的config创建一个axios实例<br>axios.create([config])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var instance = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://some-domain.com/api/&apos;,</span><br><span class="line">  timeout: 1000,</span><br><span class="line">  headers: &#123;&apos;X-Custom-Header&apos;: &apos;foobar&apos;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>下面是实例的所有可用方法，方法中的<code>config</code>会与axios实例中的config合并。（实例可以将一些通用的config先配置好）</p><ul><li>axios#request(config)</li><li>axios#get(url, [config])</li><li>axios#delete(url, [config])</li><li>axios#head(url, [config])</li><li>axios#post(url[, data[, config]])</li><li>axios#put(url[, data[, config]])</li><li>axios#patch(url[, data[, config]])</li></ul><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>重点来了，来看看Config。<br>下面列出了config的所有配置项，其中之后<code>url</code>是必填的。当<code>method</code>没有指定方法，默认为<code>GET</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // `url` is the server URL that will be used for the request</span><br><span class="line">  // 用来向服务器发送请求的url</span><br><span class="line">  url: &apos;/user&apos;,</span><br><span class="line"></span><br><span class="line">  // `method` is the request method to be used when making the request</span><br><span class="line"> // 请求方法</span><br><span class="line">  method: &apos;get&apos;, // default</span><br><span class="line"></span><br><span class="line">  // `baseURL` will be prepended to `url` unless `url` is absolute.</span><br><span class="line">  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs</span><br><span class="line">  // to methods of that instance.</span><br><span class="line">  // 假如`url`不是绝对路径，那么向服务器发送请求的URL将是`baseURL + url`</span><br><span class="line">  baseURL: &apos;https://some-domain.com/api/&apos;,</span><br><span class="line"></span><br><span class="line">  // `transformRequest` allows changes to the request data before it is sent to the server</span><br><span class="line">  // This is only applicable for request methods &apos;PUT&apos;, &apos;POST&apos;, and &apos;PATCH&apos;</span><br><span class="line">  // The last function in the array must return a string, an ArrayBuffer, or a Stream</span><br><span class="line">  transformRequest: [function (data) &#123;</span><br><span class="line">    // Do whatever you want to transform the data</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `transformResponse` allows changes to the response data to be made before</span><br><span class="line">  // it is passed to then/catch</span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    // Do whatever you want to transform the data</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `headers` are custom headers to be sent</span><br><span class="line">  headers: &#123;&apos;X-Requested-With&apos;: &apos;XMLHttpRequest&apos;&#125;,</span><br><span class="line"></span><br><span class="line">  // `params` are the URL parameters to be sent with the request</span><br><span class="line">  // Must be a plain object or a URLSearchParams object</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `paramsSerializer` is an optional function in charge of serializing `params`</span><br><span class="line">  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span><br><span class="line">  paramsSerializer: function(params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &apos;brackets&apos;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `data` is the data to be sent as the request body</span><br><span class="line">  // Only applicable for request methods &apos;PUT&apos;, &apos;POST&apos;, and &apos;PATCH&apos;</span><br><span class="line">  // When no `transformRequest` is set, must be of one of the following types:</span><br><span class="line">  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">  // - Browser only: FormData, File, Blob</span><br><span class="line">  // - Node only: Stream</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `timeout` specifies the number of milliseconds before the request times out.</span><br><span class="line">  // If the request takes longer than `timeout`, the request will be aborted.</span><br><span class="line">  timeout: 1000,</span><br><span class="line"></span><br><span class="line">  // `withCredentials` indicates whether or not cross-site Access-Control requests</span><br><span class="line">  // should be made using credentials</span><br><span class="line">  withCredentials: false, // default</span><br><span class="line"></span><br><span class="line">  // `adapter` allows custom handling of requests which makes testing easier.</span><br><span class="line">  // Return a promise and supply a valid response (see [response docs](#response-api)).</span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.</span><br><span class="line">  // This will set an `Authorization` header, overwriting any existing</span><br><span class="line">  // `Authorization` custom headers you have set using `headers`.</span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: &apos;janedoe&apos;,</span><br><span class="line">    password: &apos;s00pers3cret&apos;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `responseType` indicates the type of data that the server will respond with</span><br><span class="line">  // options are &apos;arraybuffer&apos;, &apos;blob&apos;, &apos;document&apos;, &apos;json&apos;, &apos;text&apos;, &apos;stream&apos;</span><br><span class="line">  responseType: &apos;json&apos;, // default</span><br><span class="line"></span><br><span class="line">  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span><br><span class="line">  xsrfCookieName: &apos;XSRF-TOKEN&apos;, // default</span><br><span class="line"></span><br><span class="line">  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span><br><span class="line">  xsrfHeaderName: &apos;X-XSRF-TOKEN&apos;, // default</span><br><span class="line"></span><br><span class="line">  // `onUploadProgress` allows handling of progress events for uploads</span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    // Do whatever you want with the native progress event</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `onDownloadProgress` allows handling of progress events for downloads</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    // Do whatever you want with the native progress event</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxContentLength` defines the max size of the http response content allowed</span><br><span class="line">  maxContentLength: 2000,</span><br><span class="line"></span><br><span class="line">  // `validateStatus` defines whether to resolve or reject the promise for a given</span><br><span class="line">  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`</span><br><span class="line">  // or `undefined`), the promise will be resolved; otherwise, the promise will be</span><br><span class="line">  // rejected.</span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &gt;= 200 &amp;&amp; status &lt; 300; // default</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxRedirects` defines the maximum number of redirects to follow in node.js.</span><br><span class="line">  // If set to 0, no redirects will be followed.</span><br><span class="line">  maxRedirects: 5, // default</span><br><span class="line"></span><br><span class="line">  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span><br><span class="line">  // and https requests, respectively, in node.js. This allows to configure options like</span><br><span class="line">  // `keepAlive` that are not enabled by default.</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line"></span><br><span class="line">  // &apos;proxy&apos; defines the hostname and port of the proxy server</span><br><span class="line">  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and supplies credentials.</span><br><span class="line">  // This will set an `Proxy-Authorization` header, overwriting any existing `Proxy-Authorization` custom headers you have set using `headers`.</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &apos;127.0.0.1&apos;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: &apos;mikeymike&apos;,</span><br><span class="line">      password: &apos;rapunz3l&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `cancelToken` specifies a cancel token that can be used to cancel the request</span><br><span class="line">  // (see Cancellation section below for details)</span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="分析Config"><a href="#分析Config" class="headerlink" title="分析Config"></a>分析Config</h2><p>配置参数很多，我们一个一个来了解它们</p><ul><li><strong>url</strong> —— 用来向服务器发送请求的url</li><li><strong>method</strong> —— 请求方法，默认是<code>GET</code>方法</li><li><strong>baseURL</strong> —— 基础URL路径，假如<code>url</code>不是绝对路径，如<code>https://some-domain.com/api/v1/login?name=jack</code>,那么向服务器发送请求的URL将会是<code>baseURL + url</code>。</li><li><strong>transformRequest</strong> —— <code>transformRequest</code>方法允许在请求发送到服务器之前修改该请求，此方法只适用于<code>PUT</code>、<code>POST</code>和<code>PATCH</code>方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</li><li><strong>transformResponse</strong> —— <code>transformResponse</code>方法允许在数据传递到then/catch之前修改<code>response</code>数据。此方法最后也要返回数据。</li><li><strong>headers</strong> —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</li><li><strong>params</strong> —— <code>params</code>是发送请求的查询参数对象，对象中的数据会被拼接成<code>url?param1=value1&amp;param2=value2</code>。</li><li><strong>paramsSerializer</strong> —— <code>params</code>参数序列化器。</li><li><strong>data</strong> —— <code>data</code>是在发送<code>POST</code>、<code>PUT</code>或者<code>PATCH</code>请求的数据对象。</li><li><strong>timeout</strong> —— 请求超时设置，单位为毫秒</li><li><strong>withCredentials</strong> —— 表明是否有跨域请求需要用到证书</li><li><strong>adapter</strong> —— <code>adapter</code>允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</li><li><strong>auth</strong> —— <code>auth</code>表明提供凭证用于完成http的身份验证。这将会在headers中设置一个<code>Authorization</code>授权信息。自定义<code>Authorization</code>授权要设置在<code>headers</code>中。</li><li><strong>responseType</strong> —— 表示服务器将返回响应的数据类型，有<code>arraybuffer</code>、<code>blob</code>、<code>document</code>、<code>json</code>、<code>text</code>、<code>stream</code>这6个类型，默认是<code>json</code>类似数据。</li><li><strong>xsrfCookieName</strong> —— 用作 xsrf token 值的 cookie 名称</li><li><strong>xsrfHeaderName</strong> —— 带有 xsrf token 值 http head 名称</li><li><strong>onUploadProgress</strong> ——  允许在上传过程中的做一些操作</li><li><strong>onDownloadProgress</strong> —— 允许在下载过程中的做一些操作</li><li><strong>maxContentLength</strong> —— 定义了接收到的response响应数据的最大长度。</li><li><strong>validateStatus</strong> —— <code>validateStatus</code>定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 <code>validateStatus</code> 返回 <code>true</code> (或设置为 <code>null</code> 或 <code>undefined</code> ),promise将被接收;否则,promise将被拒绝。</li><li><strong>maxRedirects</strong> —— <code>maxRedirects</code>定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。</li><li><strong>httpAgent</strong> —— 定义在使用http请求时的代理</li><li><strong>httpsAgent</strong> —— 定义在使用https请求时的代理</li><li><strong>proxy</strong> —— <code>proxy</code>定义代理服务器的主机名和端口，<code>auth</code></li><li><strong>cancelToken</strong> —— <code>cancelToken</code>定义一个 <code>cancel token</code> 用于取消请求</li></ul><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // `data` is the response that was provided by the server</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `status` is the HTTP status code from the server response</span><br><span class="line">  status: 200,</span><br><span class="line"></span><br><span class="line">  // `statusText` is the HTTP status message from the server response</span><br><span class="line">  statusText: &apos;OK&apos;,</span><br><span class="line"></span><br><span class="line">  // `headers` the headers that the server responded with</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `config` is the config that was provided to `axios` for the request</span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>response是通过promise的<code>then</code>方法来获取,具体使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&apos;/user/12345&apos;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">    console.log(response.data);</span><br><span class="line">    console.log(response.status);</span><br><span class="line">    console.log(response.statusText);</span><br><span class="line">    console.log(response.headers);</span><br><span class="line">    console.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>相对的，我们有时也会出现ajax报错，此时就会到我们的<code>catch</code>中去捕获异常<code>error</code>对象。</p><h1 id="为何放弃vue-resource"><a href="#为何放弃vue-resource" class="headerlink" title="为何放弃vue-resource"></a>为何放弃vue-resource</h1><p>尤大的原话：</p><blockquote><p>最近团队讨论了一下，Ajax 本身跟 Vue 并没有什么需要特别整合的地方，使用 fetch polyfill 或是 axios、superagent 等等都可以起到同等的效果，vue-resource 提供的价值和其维护成本相比并不划算，所以决定在不久以后取消对 vue-resource 的官方推荐。已有的用户可以继续使用，但以后不再把 vue-resource 作为官方的 ajax 方案。<br>知乎链接：<a href="https://www.zhihu.com/question/52418455/answer/130535375" target="_blank" rel="noopener">https://www.zhihu.com/question/52418455/answer/130535375</a></p></blockquote><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在学习了之前的路由vue-router和状态管理vuex之后，就应该是网络交互了。就学习尤大推荐的axios了。刚好本人对网络请求这块除了会get、put、post和delete这四个方法之外知之甚少，刚好补全上。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</title>
    <link href="https://violetjack.github.io/2016/12/31/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%BA%8C%20%E2%80%94%E2%80%94%20vuex%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E9%99%84DEMO%EF%BC%89/"/>
    <id>https://violetjack.github.io/2016/12/31/Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）/</id>
    <published>2016-12-30T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上次学习了vue-router的使用，让我能够在各个页面间切换，将页面搭建了起来。这次则要学习vue的状态管理模式——vuex。</p></blockquote><p><strong>注</strong>：本文只是个人对vuex学习的一些理解，要深刻掌握还需要认真查阅<a href="http://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h1><p>Vuex 是一个专为 Vue.js 的SPA单页组件化应用程序开发的<strong>状态管理模式</strong>插件。<br>由于Vue SPA应用的模块化，每个组件都有它各自的数据(state)、界面(view)、和方法(actions)。这些数据、界面和方法分布在各个组件中，当项目内容变得越来越多时，每个组件中的状态会变得很难管理。这是vuex就派上用场啦~下面我们看一个简单的vuex例子。</p><h2 id="1-单个组件中的状态"><a href="#1-单个组件中的状态" class="headerlink" title="1. 单个组件中的状态"></a>1. 单个组件中的状态</h2><p>假如只是在单个组件中要改变界面view很简单，只需要改变state数据源即可。如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      view: &#123;&#123; count &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;increment&quot;&gt;increment&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // state</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // actions</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>所以，单个组件中的原理图是这样的：</p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-29836e1cb7325526.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单个组件中的原理图"></p><h2 id="2-多个组件中的状态"><a href="#2-多个组件中的状态" class="headerlink" title="2. 多个组件中的状态"></a>2. 多个组件中的状态</h2><p>然而，我们作为组件化的SPA应用，必定会牵扯到多个组件间的通信。<br>比如有两个相同的组件A和B，它们共享一个数据count，并且都有一个方法可以操作这个count，我们使用vuex来写。<br><strong>A组件和B组件的代码（代码相同）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;increment&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment () &#123;</span><br><span class="line">        this.$store.commit(&apos;increment&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-5971ec429e2ac23b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果1"></p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-22872b0aa75b7f42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果2"></p><p>可以看到，这里的两个increment按钮点击都会同时改变两个count的数据，<strong>因为数据源count和方法increment都是全局的。</strong><br>正如下面官方原理图所画的，我们把<strong>全局数据源state、改变数据源的方法mutations、异步操作方法actions</strong>都放提取出来放到store中，实现全局数据状态单独管理的功能。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-9867083201b0c86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vuex官方原理图"></p><h1 id="二、安装-amp-配置"><a href="#二、安装-amp-配置" class="headerlink" title="二、安装&amp;配置"></a>二、安装&amp;配置</h1><h2 id="1-安装vuex"><a href="#1-安装vuex" class="headerlink" title="1. 安装vuex"></a>1. 安装vuex</h2><p>使用npm安装并保存到package.json中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure></p><p><strong>package.json</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;vuex&quot;: &quot;^2.1.1&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>配置方式和路由的配置方式差不多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">//创建Store实例</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  // 存储状态值</span><br><span class="line">  state: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 状态值的改变方法,操作状态值</span><br><span class="line">  // 提交mutations是更改Vuex状态的唯一方法</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 在store中定义getters（可以认为是store的计算属性）。Getters接收state作为其第一个函数</span><br><span class="line">  getters: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123; </span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 要改变状态值只能通过提交mutations来完成</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  // 将store实例注入到根组件下的所有子组件中</span><br><span class="line">  store</span><br><span class="line">  // 子组件通过this.$store来方位store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="三、核心概念"><a href="#三、核心概念" class="headerlink" title="三、核心概念"></a>三、核心概念</h1><h2 id="1-state"><a href="#1-state" class="headerlink" title="1. state"></a>1. state</h2><p>state就是全局的状态（数据源），我们可以用以下方式在Vue 组件中获得Vuex的state状态<br><strong>template</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>script</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this.$store.state.count)</span><br></pre></td></tr></table></figure></p><h2 id="2-getters"><a href="#2-getters" class="headerlink" title="2. getters"></a>2. getters</h2><p>getters其实可以认为是 store 的计算属性，用法和计算属性差不多。<br>定义getter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  done(state) &#123;</span><br><span class="line">    return state.count + 5;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用getter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this.$store.getters.done)</span><br></pre></td></tr></table></figure></p><h2 id="3-mutations"><a href="#3-mutations" class="headerlink" title="3. mutations"></a>3. mutations</h2><p>mutations是操作state的唯一方法，即只有mutations方法能够改变state状态值。</p><h3 id="3-1-基本操作"><a href="#3-1-基本操作" class="headerlink" title="3.1 基本操作"></a>3.1 基本操作</h3><p><strong>mutations对state的操作</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>组件通过commit提交mutations的方式来请求改变state</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&apos;increment&apos;)</span><br></pre></td></tr></table></figure></p><p>这样的好处是我们可以跟踪到每一次state的变化，以便及时分析和解决问题。</p><h3 id="3-2-提交载荷（Payload）"><a href="#3-2-提交载荷（Payload）" class="headerlink" title="3.2 提交载荷（Payload）"></a>3.2 提交载荷（Payload）</h3><p>mutations方法中是可以传参的，具体用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  // 提交载荷 Payload</span><br><span class="line">  add(state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&apos;add&apos;, 10)</span><br></pre></td></tr></table></figure><p>这里只是传了一个数字，在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读。</p><h3 id="3-3-注意"><a href="#3-3-注意" class="headerlink" title="3.3 注意"></a>3.3 注意</h3><p><strong>mutations方法必须是同步方法！</strong></p><h2 id="4-actions"><a href="#4-actions" class="headerlink" title="4. actions"></a>4. actions</h2><h3 id="4-1-基本操作"><a href="#4-1-基本操作" class="headerlink" title="4.1 基本操作"></a>4.1 基本操作</h3><p>之前说mutations方法必须只能是同步方法，为了处理异步方法，actions出现了。关于action和mutations的区别有以下几点：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li><li>Action 还是得通过 mutation 方法来修改state<br>同样是之前的increment方法,我们分别用同步和异步的action来验证上面所说的与mutations的不同之处：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (context) &#123;</span><br><span class="line">    context.commit(&apos;increment&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  incrementAsync (context) &#123;</span><br><span class="line">    // 延时1秒  </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      context.commit(&apos;increment&apos;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>不同于mutations使用commit方法，actions使用dispatch方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&apos;incrementAsync&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="4-2-context"><a href="#4-2-context" class="headerlink" title="4.2 context"></a>4.2 context</h3><p><strong>context是与 store 实例具有相同方法和属性的对象。</strong>可以通过<code>context.state</code>和<code>context.getters</code>来获取 state 和 getters。</p><h3 id="4-3-以载荷形式分发"><a href="#4-3-以载荷形式分发" class="headerlink" title="4.3 以载荷形式分发"></a>4.3 以载荷形式分发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">incrementAsyncWithValue (context, value) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    context.commit(&apos;add&apos;, value)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&apos;incrementAsyncWithValue&apos;, 5)</span><br></pre></td></tr></table></figure><h2 id="5-module"><a href="#5-module" class="headerlink" title="5. module"></a>5. module</h2><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。<br>为了解决以上问题，Vuex 允许我们将 store 分割到<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure></p><p>module其实还是对于大型的SPA应用来说的，暂时对module的应用和理解并没有太多，之后会补上这一块儿的内容。<br>想要了解更多module知识，请查阅<a href="http://vuex.vuejs.org/zh-cn/modules.html" target="_blank" rel="noopener">官方module文档</a></p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上次学习了vue-router的使用，让我能够在各个页面间切换，将页面搭建了起来。这次则要学习vue的状态管理模式——vuex。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：本文只是个人对vuex学习的一些理解，
      
    
    </summary>
    
    
      <category term="Vue.js学习系列" scheme="https://violetjack.github.io/tags/Vue-js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
