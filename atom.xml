<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vue试验场</title>
  
  <subtitle>专注于Vue相关知识的捣鼓</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://violetjack.github.io/"/>
  <updated>2018-02-07T01:57:59.161Z</updated>
  <id>https://violetjack.github.io/</id>
  
  <author>
    <name>VioletJack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js学习系列八 —— Vue源码学习之State学习</title>
    <link href="https://violetjack.github.io/2018/02/06/Vue.js%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E5%85%AB%20%E2%80%94%E2%80%94%20Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BState%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/06/Vue.js学习系列八 —— Vue源码学习之State学习/</id>
    <published>2018-02-06T08:20:52.000Z</published>
    <updated>2018-02-07T01:57:59.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于Vue源码学习的博客， <a href="http://hcysun.me/" target="_blank" rel="noopener">HcySunYang</a>的<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。<br>注意：本文所用Vue版本为 <code>2.5.13</code></p></blockquote><h1 id="关于源码学习"><a href="#关于源码学习" class="headerlink" title="关于源码学习"></a>关于源码学习</h1><p>关于学习源码，我有话要说~<br>一开始我学习Vue的源码，是将 <a href="https://github.com/vuejs/vue/blob/dev/dist/vue.js" target="_blank" rel="noopener">Vue.js</a> 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。<br>其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。<br>所以呢，我看源码的经验教训有如下几点：</p><ul><li>看代码，必须带着问题去找实现代码。</li><li>保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。</li><li>找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。</li><li>想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~</li><li>学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~</li></ul><h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><p>这里我们来解决从哪里开始看代码的流程，重点是<strong>找到Vue构造函数的实现</strong>。<br>首先，找到 <code>package.json</code> 文件，从中找到编译命令 <code>&quot;dev&quot;: &quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</code>，这里 <code>rollup</code> 是类似于 Webpack 的打包工具，打包文件在 <code>script/config.js</code> 中，找到该文件。找 <code>entry</code> 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 <code>dist/vue.js</code> 的配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Runtime+compiler development build (Browser)</span><br><span class="line">&apos;web-full-dev&apos;: &#123;</span><br><span class="line">  entry: resolve(&apos;web/entry-runtime-with-compiler.js&apos;),</span><br><span class="line">  dest: resolve(&apos;dist/vue.js&apos;),</span><br><span class="line">  format: &apos;umd&apos;,</span><br><span class="line">  env: &apos;development&apos;,</span><br><span class="line">  alias: &#123; he: &apos;./entity-decoder&apos; &#125;,</span><br><span class="line">  banner</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>好，这里就找到了 <code>web/entry-runtime-with-compiler.js</code> 这个路径，完整路径应该是 <code>src/platform/web/entry-runtime-with-compiler.js</code>。在这个文件中我们找到一个Vue对象import进来了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;./runtime/index&apos;</span><br></pre></td></tr></table></figure></p><p>我们顺着找到到 <code>src/platform/web/runtime/index.js</code> 这个文件，在文件中发现导入文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;core/index&apos;</span><br></pre></td></tr></table></figure></p><p>就顺着这个思路找，最终找到 <code>src/core/instance/index.js</code> 这个文件。<br>完整找到Vue实例入口文件的流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">script/config.js</span><br><span class="line">src/platform/web/entry-runtime-with-compiler.js</span><br><span class="line">src/platform/web/runtime/index.js</span><br><span class="line">src/core/index.js</span><br><span class="line">src/core/instance/index.js</span><br></pre></td></tr></table></figure></p><p>简单看看Vue构造函数的样子~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; initMixin &#125; from &apos;./init&apos;</span><br><span class="line">import &#123; stateMixin &#125; from &apos;./state&apos;</span><br><span class="line">import &#123; renderMixin &#125; from &apos;./render&apos;</span><br><span class="line">import &#123; eventsMixin &#125; from &apos;./events&apos;</span><br><span class="line">import &#123; lifecycleMixin &#125; from &apos;./lifecycle&apos;</span><br><span class="line">import &#123; warn &#125; from &apos;../util/index&apos;</span><br><span class="line"></span><br><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue) // 初始化</span><br><span class="line">stateMixin(Vue) // 状态混合</span><br><span class="line">eventsMixin(Vue) // 事件混合</span><br><span class="line">lifecycleMixin(Vue) // 生命周期混合</span><br><span class="line">renderMixin(Vue) // 渲染混合</span><br><span class="line"></span><br><span class="line">export default Vue</span><br></pre></td></tr></table></figure></p><p>可以看到Vue的构造函数，里面只做了 <code>this._init(options)</code> 行为。这个 <code>_init</code> 方法在执行 <code>initMixin</code> 方法的时候定义了。找到同目录下的 <code>init.js</code> 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">    const vm: Component = this</span><br><span class="line">    // a uid</span><br><span class="line">    vm._uid = uid++</span><br><span class="line"></span><br><span class="line">    let startTag, endTag</span><br><span class="line">    /* istanbul ignore if */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class="line">      endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class="line">      mark(startTag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // a flag to avoid this being observed</span><br><span class="line">    vm._isVue = true</span><br><span class="line">    // merge options</span><br><span class="line">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      // optimize internal component instantiation</span><br><span class="line">      // since dynamic options merging is pretty slow, and none of the</span><br><span class="line">      // internal component options needs special treatment.</span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 合并配置项</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    /* istanbul ignore else */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      initProxy(vm) // 初始化代理</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      vm._renderProxy = vm</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vm._self = vm // 暴露对象自身</span><br><span class="line">    initLifecycle(vm) // 初始化生命周期</span><br><span class="line">    initEvents(vm) // 初始化事件：on,once,off,emit</span><br><span class="line">    initRender(vm) // 初始化渲染：涉及到Virtual DOM</span><br><span class="line">    callHook(vm, &apos;beforeCreate&apos;) //  触发 beforeCreate 生命周期钩子</span><br><span class="line">    initInjections(vm) // 在初始化 data/props 前初始化Injections</span><br><span class="line">    initState(vm) // 初始化状态选项</span><br><span class="line">    initProvide(vm) // 在初始化 data/props 后初始化Provide</span><br><span class="line">    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject</span><br><span class="line">    callHook(vm, &apos;created&apos;) // 触发 created 生命周期钩子</span><br><span class="line"></span><br><span class="line">    /* istanbul ignore if */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      vm._name = formatComponentName(vm, false)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果Vue配置项中有el，直接挂在到DOM中</span><br><span class="line">    if (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抓住重点，<strong>我们是要来学习State的。</strong>从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。</p><h1 id="学习State"><a href="#学习State" class="headerlink" title="学习State"></a>学习State</h1><p>之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：</p><blockquote><p>了解Vue的数据选项的运行机制。</p></blockquote><p>在<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。</p><h2 id="通过data理解mvvm"><a href="#通过data理解mvvm" class="headerlink" title="通过data理解mvvm"></a>通过data理解mvvm</h2><p>这里我通过自己的思路再来整理下项目中data的实现。<br><strong>注：</strong>由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，<a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a>中讲的非常清晰明了。</p><p><strong>以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。</strong></p><p>在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：</p><ol><li>获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。</li><li>遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 <code>vm.name</code> 来修改和获取 data 中的 name 的值。</li><li>执行observe方法，监听data的变化。</li></ol><p>重点在 <code>observe</code> 方法，于是我们根据 import 关系找到 <code>src/core/observer/index.js</code> 文件。<code>observe</code> 方法通过传入的值最终返回一个Observer类的实例对象。<br>找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。<br>找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。<br><strong>找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。</strong>为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 <code>dep.depend()</code> 方法，在 set 方法中执行 <code>dep.notify()</code> 方法。这个先不多讲，最后进行联结说明。<br>找到同目录下的 <code>dep.js</code> 文件，文件不长。定义了 Dep 类和<code>pushTarget</code>、<code>popTarget</code> 方法。在 Dep 类中有我们之前提到的 <code>depend</code> 和 <code>notify</code> 方法。看下两个方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">depend () &#123;</span><br><span class="line">  if (Dep.target) &#123;</span><br><span class="line">    Dep.target.addDep(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notify () &#123;</span><br><span class="line">  // stabilize the subscriber list first</span><br><span class="line">  const subs = this.subs.slice()</span><br><span class="line">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].update()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 <code>depend</code> 方法中，Dep.target 就是一个 Watcher 实例，它的 <code>addDep</code> 方法最终会调用到 Dep 的 <code>addSubs</code> 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。<br>在 <code>notify</code> 方法中，将 Watcher 数组 subs 遍历，执行他们的 <code>update</code> 方法。<code>update</code> 最终会去执行 <code>watcher</code> 的回调函数。<br>即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。<br>这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~<br>Watcher的构造函数最终调用了 <code>get</code> 方法，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">get () &#123;</span><br><span class="line">   pushTarget(this)</span><br><span class="line">   let value</span><br><span class="line">   const vm = this.vm</span><br><span class="line">   try &#123;</span><br><span class="line">     value = this.getter.call(vm, vm)</span><br><span class="line">   &#125; catch (e) &#123;</span><br><span class="line">     if (this.user) &#123;</span><br><span class="line">       handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       throw e</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; finally &#123;</span><br><span class="line">     // &quot;touch&quot; every property so they are all tracked as</span><br><span class="line">     // dependencies for deep watching</span><br><span class="line">     if (this.deep) &#123;</span><br><span class="line">       traverse(value)</span><br><span class="line">     &#125;</span><br><span class="line">     popTarget()</span><br><span class="line">     this.cleanupDeps()</span><br><span class="line">   &#125;</span><br><span class="line">   return value</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><code>get</code> 方法做了如下几步：</p><ol><li>将当前 Watcher 实例传递给 Dep 的 Dep.target。</li><li>执行 Watcher 所监测的数据的 <code>getter</code> 方法。</li><li>最终，将 <code>Dep.target</code> 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。</li></ol><p>其中要注意的是，在第二步中数据的 <code>getter</code> 方法会执行到 <code>dep.depend()</code> 方法，<code>depend</code> 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~<br>这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 <code>notify</code> 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，<code>notify</code> 方法遍历执行 watcher 的 <code>update</code> 方法，<code>update</code> 方法最终遍历执行回调函数。</p><ol><li>执行 <code>observe</code> 方法，创建 Observer 执行 <code>walk</code> 为对象数据添加setter 和 getter</li><li>在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 <code>dep.depend()</code> 收集 watcher，在 setter 方法中执行 <code>dep.notify()</code> 方法，最终遍历执行 watcher 数组的回调函数。</li><li>Dep 类似于 Watcher 和 Observer 的中间件。</li><li>Watcher 用于监听变化，并执行回调函数。</li><li>当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target</li><li>Watcher 调用监测数据的 <code>getter</code>方法触发 <code>dep.depend()</code></li><li><code>dep.depend()</code>方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。</li><li>当被监测的数据内容发生改变时，执行 <code>setter</code> 方法，触发 <code>dep.notify()</code> 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。</li></ol><p>嗯……就是这样~之后把挖的坑填上！</p><h2 id="watch实现"><a href="#watch实现" class="headerlink" title="watch实现"></a>watch实现</h2><p>说完了 Data 的监听流程，说说 watch 应该就不难啦~<br>找到 <code>src/core/instance/state.js</code> 的 <code>initWatch</code> 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 <code>createWatcher</code> 方法。<br>继续看 <code>createWatcher</code> 方法，这个方法也很简单，最终返回 <code>vm.$watch(keyOrFn, handler, options)</code>。我们继续往下找~<br>在 <code>stateMixin</code> 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$watch = function (</span><br><span class="line">  expOrFn: string | Function,</span><br><span class="line">  cb: any,</span><br><span class="line">  options?: Object</span><br><span class="line">): Function &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (isPlainObject(cb)) &#123;</span><br><span class="line">    return createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">  &#125;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  options.user = true</span><br><span class="line">  const watcher = new Watcher(vm, expOrFn, cb, options)</span><br><span class="line">  if (options.immediate) &#123;</span><br><span class="line">    cb.call(vm, watcher.value)</span><br><span class="line">  &#125;</span><br><span class="line">  return function unwatchFn () &#123;</span><br><span class="line">    watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果回调函数 cb 是一个对象，那么返回并执行 <code>createWatcher</code> 函数，最终还是会走到 $watch 方法中。<br>否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。<br>那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  a: function(val, oldVal)&#123;</span><br><span class="line">    console.log(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以找到 <code>src/core/instance/observer/watcher.js</code> 中找到 <code>run</code> 方法。可以看到 <code>this.cb.call(this.vm, value, oldValue)</code> 这里的 cb 回调函数传递的参数就是 value 和 oldValue。<br>这里说个基础知识，函数使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener"> call 方法</a>执行，第一个参数是方法的this值，之后才是真正的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">run () &#123;</span><br><span class="line">    if (this.active) &#123;</span><br><span class="line">      const value = this.get()</span><br><span class="line">      if (</span><br><span class="line">        value !== this.value ||</span><br><span class="line">        // Deep watchers and watchers on Object/Arrays should fire even</span><br><span class="line">        // when the value is the same, because the value may</span><br><span class="line">        // have mutated.</span><br><span class="line">        isObject(value) ||</span><br><span class="line">        this.deep</span><br><span class="line">      ) &#123;</span><br><span class="line">        // set new value</span><br><span class="line">        const oldValue = this.value</span><br><span class="line">        this.value = value</span><br><span class="line">        if (this.user) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            this.cb.call(this.vm, value, oldValue)</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            handleError(e, this.vm, `callback for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.cb.call(this.vm, value, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。</strong></p><h2 id="props实现"><a href="#props实现" class="headerlink" title="props实现"></a>props实现</h2><p>接下来我们看看props，官网对props的定义如下：</p><blockquote><p>props 可以是数组或对象，用于接收来自父组件的数据。</p></blockquote><p>找到 <code>initProps</code> 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function initProps (vm: Component, propsOptions: Object) &#123;</span><br><span class="line">  const propsData = vm.$options.propsData || &#123;&#125;</span><br><span class="line">  const props = vm._props = &#123;&#125;</span><br><span class="line">  // cache prop keys so that future props updates can iterate using Array</span><br><span class="line">  // instead of dynamic object key enumeration.</span><br><span class="line">  const keys = vm.$options._propKeys = []</span><br><span class="line">  const isRoot = !vm.$parent</span><br><span class="line">  // root instance props should be converted</span><br><span class="line">  observerState.shouldConvert = isRoot</span><br><span class="line">  for (const key in propsOptions) &#123;</span><br><span class="line">    keys.push(key)</span><br><span class="line">    const value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    /* istanbul ignore else */</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      const hyphenatedKey = hyphenate(key)</span><br><span class="line">      if (isReservedAttribute(hyphenatedKey) ||</span><br><span class="line">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `&quot;$&#123;hyphenatedKey&#125;&quot; is a reserved attribute and cannot be used as component prop.`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class="line">        if (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            `Avoid mutating a prop directly since the value will be ` +</span><br><span class="line">            `overwritten whenever the parent component re-renders. ` +</span><br><span class="line">            `Instead, use a data or computed property based on the prop&apos;s ` +</span><br><span class="line">            `value. Prop being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      defineReactive(props, key, value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!(key in vm)) &#123;</span><br><span class="line">      proxy(vm, `_props`, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observerState.shouldConvert = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，props 和 data 类似。在 <code>initProps</code> 中无非做了两步：<code>defineReactive</code> 和 <code>proxy</code>，这两个方法我们在提到 data 的时候讲过了。<code>defineReactive</code> 为数据设置 setter、getter，<code>proxy</code> 方法将 <code>props</code> 中的属性映射到 Vue 实例 vm 上，便于我们可以用 <code>vm.myProps</code> 来获取数据。<br>至此，我有个疑问：data与props有何不同呢？<br>data使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。<br>另外，data和props有个不同的地方就是props是不建议改变的。详见<a href="https://cn.vuejs.org/v2/guide/components.html#单向数据流" target="_blank" rel="noopener">单向数据流</a><br>小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~</p><h2 id="computed实现"><a href="#computed实现" class="headerlink" title="computed实现"></a>computed实现</h2><p>再来说说computed，找到初始化computed方法 <code>src/core/instance/state.js</code> 中的 <code>initComputed</code> 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 <code>defineComputed</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function initComputed (vm: Component, computed: Object) &#123;</span><br><span class="line">  ...</span><br><span class="line">  for (const key in computed) &#123;</span><br><span class="line">    ...</span><br><span class="line">    if (!isSSR) &#123;</span><br><span class="line">      watchers[key] = new Watcher(</span><br><span class="line">        vm,</span><br><span class="line">        getter || noop,</span><br><span class="line">        noop,</span><br><span class="line">        computedWatcherOptions</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!(key in vm)) &#123;</span><br><span class="line">      defineComputed(vm, key, userDef)</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>defineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 <code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>。自此，我们可以通过 <code>vm.computedValue</code> 来获取计算属性结果了。<br><strong>小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。</strong></p><h2 id="methods实现"><a href="#methods实现" class="headerlink" title="methods实现"></a>methods实现</h2><p>继续在 <code>state.js</code> 中看到 <code>initMethods</code> 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function initMethods (vm: Component, methods: Object) &#123;</span><br><span class="line">  const props = vm.$options.props</span><br><span class="line">  for (const key in methods) &#123;</span><br><span class="line">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">      if (methods[key] == null) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; has an undefined value in the component definition. ` +</span><br><span class="line">          `Did you reference the function correctly?`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      if (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; has already been defined as a prop.`,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      if ((key in vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          `Method &quot;$&#123;key&#125;&quot; conflicts with an existing Vue instance method. ` +</span><br><span class="line">          `Avoid defining component methods that start with _ or $.`</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 <code>bind</code> 方法执行该函数。<br>找到这个 <code>bind</code> 方法，位置在 <code>src/shared/util.js</code> 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export function bind (fn: Function, ctx: Object): Function &#123;</span><br><span class="line">  function boundFn (a) &#123;</span><br><span class="line">    const l: number = arguments.length</span><br><span class="line">    return l</span><br><span class="line">      ? l &gt; 1</span><br><span class="line">        ? fn.apply(ctx, arguments)</span><br><span class="line">        : fn.call(ctx, a)</span><br><span class="line">      : fn.call(ctx)</span><br><span class="line">  &#125;</span><br><span class="line">  // record original fn length</span><br><span class="line">  boundFn._length = fn.length</span><br><span class="line">  return boundFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法返回一个执行 <code>methods</code> 中函数的方法（这种方法的执行方式比较快）。<br><strong>小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。</strong></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文纯属个人理解，如有任何问题，请及时指出，不胜感激~<br>最后提出一个看源码的小心得：</p><blockquote><p>我发现……看源码、跟流程，尽量将注意力集中在<strong>方法的执行</strong>和<strong>类的实例化</strong>行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。</p></blockquote><p>至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……<br>通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><p><a href="http://www.jianshu.com/p/8013d8d37bd0" target="_blank" rel="noopener">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/d6f7e11f18af" target="_blank" rel="noopener">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href="http://www.jianshu.com/p/8e5fb763c3d7" target="_blank" rel="noopener">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href="http://www.jianshu.com/p/aef34acd111f" target="_blank" rel="noopener">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href="http://www.jianshu.com/p/efb6fbed6fac" target="_blank" rel="noopener">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href="http://www.jianshu.com/p/073d25a3bba0" target="_blank" rel="noopener">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href="https://www.jianshu.com/p/ba7466d7101a" target="_blank" rel="noopener">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href="https://www.jianshu.com/p/15028f91226e" target="_blank" rel="noopener">Vue.js学习系列八 —— Vue源码学习之State学习</a></p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于Vue源码学习的博客， &lt;a href=&quot;http://hcysun.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HcySunYang&lt;/a&gt;的&lt;a href=&quot;http://hcysun.me/2017/03/03
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将表单从jQuery转Vue框架实践总结</title>
    <link href="https://violetjack.github.io/2018/02/06/%E5%B0%86%E8%A1%A8%E5%8D%95%E4%BB%8EjQuery%E8%BD%ACVue%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <id>https://violetjack.github.io/2018/02/06/将表单从jQuery转Vue框架实践总结/</id>
    <published>2018-02-06T08:20:52.000Z</published>
    <updated>2018-02-07T01:59:25.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作需要，将公司项目从jQuery转成Vue来写。这里分享下转变项目的过程并写了一个小demo，希望能对遇到同样问题的朋友一些帮助。<br>PS： 本人Android开发，兼职前端，前端知识浅薄，有什么不对的地方还请指出，大家共同进步。谢谢~<br>由于代码较多，我把源码放在了博客最后了。</p></blockquote><h1 id="jQuery和Vue的区别"><a href="#jQuery和Vue的区别" class="headerlink" title="jQuery和Vue的区别"></a>jQuery和Vue的区别</h1><p>jQuery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，其实和原生的HTML的区别只在于可以更方便的选取和操作DOM对象，而数据和界面是在一起的。比如需要获取label标签的内容：<code>$(&quot;lable&quot;).val();</code>,它还是依赖DOM元素的值。<br>Vue则是通过Vue对象将数据和View完全分离开来了。对数据进行操作不再需要引用相应的DOM对象，可以说数据和View是分离的，他们通过Vue对象这个vm实现相互的绑定。这就是传说中的MVVM。</p><h1 id="jQuery-to-Vue"><a href="#jQuery-to-Vue" class="headerlink" title="jQuery to Vue"></a>jQuery to Vue</h1><h2 id="1-导入Vue-js，去除jQuery。"><a href="#1-导入Vue-js，去除jQuery。" class="headerlink" title="1. 导入Vue.js，去除jQuery。"></a>1. 导入Vue.js，去除jQuery。</h2><p>下载Vue.js，导入工程,我将其放在头文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://cn.vuejs.org/guide/installation.html" target="_blank" rel="noopener">Vue.js下载地址</a></p><h2 id="2-根视图id绑定"><a href="#2-根视图id绑定" class="headerlink" title="2. 根视图id绑定"></a>2. 根视图id绑定</h2><p>为最外层的div标签定义id，然后使用Vue的el属性进行绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生信息登记&lt;/h2&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;label&gt;&#123;&#123; result &#125;&#125;&lt;/label&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="3-为input添加v-model"><a href="#3-为input添加v-model" class="headerlink" title="3. 为input添加v-model"></a>3. 为input添加v-model</h2><p>使用v-model属性将input标签的value值绑定到data的相应数据中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label&gt;姓名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">    &lt;input id=&quot;sex01&quot; type=&quot;radio&quot; value=&quot;1&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;sex01&quot;&gt;男&lt;/label&gt;</span><br><span class="line">    &lt;input id=&quot;sex02&quot; type=&quot;radio&quot; value=&quot;2&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;sex02&quot;&gt;女&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label&gt;年龄：&lt;/label&gt;</span><br><span class="line">    &lt;select v-model=&quot;age&quot;&gt;</span><br><span class="line">        &lt;option selected&gt;18&lt;/option&gt;</span><br><span class="line">        &lt;option&gt;19&lt;/option&gt;</span><br><span class="line">        &lt;option&gt;20&lt;/option&gt;</span><br><span class="line">        &lt;option&gt;21&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;&lt;/div&gt;&lt;div&gt;</span><br><span class="line">    &lt;label&gt;党员：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;member&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>注意上方的v-model，我们在Vue对象的data属性中绑定数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &apos;&apos;,</span><br><span class="line">        sex: &apos;&apos;,</span><br><span class="line">        age: &apos;&apos;,</span><br><span class="line">        member: &apos;&apos;,</span><br><span class="line">        result: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>到这里就实现了将表单input框和数据的绑定。更多Vue表单绑定可以查看<a href="http://cn.vuejs.org/guide/forms.html" target="_blank" rel="noopener">表单控件绑定</a></p><h2 id="4-删除id、name这些用于jQuery的属性"><a href="#4-删除id、name这些用于jQuery的属性" class="headerlink" title="4. 删除id、name这些用于jQuery的属性"></a>4. 删除id、name这些用于jQuery的属性</h2><p>在使用jQuery时，在HTML中需要定义大量的id、name之类的属性用于jQuery选择器获取元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; id=&quot;name&quot;&gt;</span><br><span class="line">...</span><br><span class="line">var name = $(&apos;#name&apos;).val();</span><br></pre></td></tr></table></figure></p><p>我们这里就不需要了。去除HTML中的这些属性。<br>（其实这里v-model和id的作用有些类似，都是一个桥梁作用。我在修改的时候偷懒直接将id改成v-model，后面的name不改~）</p><h2 id="5-将点击事件onclick改为v-on-click"><a href="#5-将点击事件onclick改为v-on-click" class="headerlink" title="5. 将点击事件onclick改为v-on:click"></a>5. 将点击事件onclick改为v-on:click</h2><p>Vue提供了v-on来监听DOM事件，如demo中的点击事件监听属性v-on:click。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&quot;btnCommit&quot; v-on:click=&quot;commit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btnReset&quot; v-on:click=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>然后在Vue对象的methods属性中创建这两个事件方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue (&#123;</span><br><span class="line">    ...</span><br><span class="line">    methods: &#123;</span><br><span class="line">        commit: function () &#123;...&#125;,</span><br><span class="line">        reset: function () &#123;...&#125;,</span><br><span class="line">    ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>另外，Vue还提供了其他v-on:属性，如v-on:change、v-on:keyup等。具体请看：<a href="http://cn.vuejs.org/guide/events.html" target="_blank" rel="noopener">方法与事件处理</a></p><h2 id="6-引用数据"><a href="#6-引用数据" class="headerlink" title="6. 引用数据"></a>6. 引用数据</h2><p>作为MVVM，当然是双向绑定的。Vue用v-model属性使input可以修改数据内容，实现界面修改数据；使用双大括号来引用数据内容，实现数据修改界面。<br>具体写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&#123;&#123; result &#125;&#125;&lt;/label&gt;</span><br><span class="line">...</span><br><span class="line">data: &#123;</span><br><span class="line">    result: &apos;hello world&apos;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上引用后，数据<code>hello world</code>将会实时同步显示在labal标签上，每当result数据有所改变，label的内容立即会改变。</p><h2 id="7-替换ready方法"><a href="#7-替换ready方法" class="headerlink" title="7. 替换ready方法"></a>7. 替换ready方法</h2><p>jQuery中为我们提供了一个document的ready方法，Vue中有ready属性，它们的触发时间差不多，具体要参考各自的生命周期。<br><strong>jQuery写法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&quot;加载完成&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>Vue写法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue (&#123;</span><br><span class="line">    ...</span><br><span class="line">    ready: function () &#123;</span><br><span class="line">        alert(&quot;加载完成&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="8-修改获取和修改元素属性的方式"><a href="#8-修改获取和修改元素属性的方式" class="headerlink" title="8.修改获取和修改元素属性的方式"></a>8.修改获取和修改元素属性的方式</h2><p>这是jQuery和Vue的最大不同点了。先看代码:<br><strong>jQuery:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var name = $(&apos;#name&apos;).val();</span><br><span class="line">var sex = &apos;&apos;;</span><br><span class="line">if (getChackedValue(&apos;input[name=sex]&apos;) == 1)&#123;</span><br><span class="line">    sex = &apos;男&apos;</span><br><span class="line">&#125;else if (getChackedValue(&apos;input[name=sex]&apos;) == 2)&#123;</span><br><span class="line">    sex = &apos;女&apos;</span><br><span class="line">&#125;</span><br><span class="line">var age = $(&apos;#age&apos;).val();</span><br><span class="line">var member = &apos;&apos;;</span><br><span class="line">if($(&apos;#member&apos;).is(&apos;:checked&apos;)) &#123;</span><br><span class="line">    member = &apos;党员&apos;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    member = &quot;非党员&quot;;</span><br><span class="line">&#125;</span><br><span class="line">var result = name + &apos; &apos; + sex + &apos; &apos; + age + &apos; &apos; + member;</span><br><span class="line">$(&apos;#result&apos;).text(result);</span><br></pre></td></tr></table></figure></p><p>这是显示表单结果的函数。jQuery是通过美元符号$来获取指定元素，然后通过val()、text()等方法获取指定元素的内容或者为指定元素赋值。<br><strong>Vue：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var name = this.name;</span><br><span class="line">var sex = &apos;&apos;;</span><br><span class="line">if (this.sex == 1)&#123;</span><br><span class="line">    sex = &apos;男&apos;;</span><br><span class="line">&#125;else if (this.sex == 2)&#123;</span><br><span class="line">    sex = &apos;女&apos;;</span><br><span class="line">&#125;</span><br><span class="line">var age = this.age;</span><br><span class="line">var member = &apos;&apos;;</span><br><span class="line">if (this.member)&#123;</span><br><span class="line">    member = &apos;党员&apos;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    member = &apos;非党员&apos;</span><br><span class="line">&#125;</span><br><span class="line">var result = name + &apos; &apos; + sex + &apos; &apos; + age + &apos; &apos; + member;</span><br><span class="line">this.result = result;</span><br></pre></td></tr></table></figure></p><p>同样是显示表单结果的函数。Vue不需要获取DOM元素，只需要获得和修改data对象中的数据就可以了。<br>这里需要注意的是：要用jQuery获得或者修改一组radio很麻烦，需要操作checked属性；而Vue处理radio只需通过数据，数据内容就是radio的value值，修改value值radio就会自动选择目标项。checkbox也是如此，jQuery要使用checked，而Vue只需要知道checkbox绑定的data为true或者false就可以知道checkbox是否被选中。</p><h2 id="9-Vue使用watch方法测试"><a href="#9-Vue使用watch方法测试" class="headerlink" title="9. Vue使用watch方法测试"></a>9. Vue使用watch方法测试</h2><p>Vue的watch方法真的挺好用，当程序出现问题时可以将出问题的data使用watch打log，每当该数据发生变化时，watch方法都会被触发。很好用~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    &apos;sex&apos;: function (val, oldVal) &#123;</span><br><span class="line">        console.log(&apos;oldVal = &apos; + oldVal + &apos; val = &apos; + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结心得"><a href="#总结心得" class="headerlink" title="总结心得"></a>总结心得</h1><p>jQuery完全是通过美元符号来对各种元素进行操作！根据HTML元素的id、name等属性来获取到元素并对其进行取值、赋值、修改属性能行为。<br>Vue的使用过程 是：先绘制HTML界面，然后在需要绑定数据的地方写下v-model、v-on等这些绑定属性和方法，在显示数据内容的地方使用双大括号显示内容。然后在Vue中，el属性绑定根视图的id，data属性定义并初始化v-model、双大括号用到的数据和一些其他数据。methods属性定义在v-on中用到的和一些其他方法。更新界面修改数据实现。而修改数据通过操作界面实现。<br>写完了这个demo后，感觉到Vue的确有它的魅力所在。它的MVVM让业务逻辑变得更加清晰和简单。</p><h1 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h1><h2 id="jQueryPage"><a href="#jQueryPage" class="headerlink" title="jQueryPage"></a>jQueryPage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;jquery-2.2.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生信息登记&lt;/h2&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;姓名：&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; id=&quot;name&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">            &lt;input id=&quot;sex01&quot; type=&quot;radio&quot; value=&quot;1&quot; name=&quot;sex&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;sex01&quot;&gt;男&lt;/label&gt;</span><br><span class="line">            &lt;input id=&quot;sex02&quot; type=&quot;radio&quot; value=&quot;2&quot; name=&quot;sex&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;sex02&quot;&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;年龄：&lt;/label&gt;</span><br><span class="line">            &lt;select id=&quot;age&quot;&gt;</span><br><span class="line">                &lt;option selected&gt;18&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;19&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;20&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;21&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;党员：&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;member&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button id=&quot;btnCommit&quot; onclick=&quot;commit()&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;button id=&quot;btnReset&quot; onclick=&quot;reset()&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;label id=&quot;result&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            alert(&quot;加载完成&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        function commit() &#123;</span><br><span class="line">            var name = $(&apos;#name&apos;).val(); </span><br><span class="line">            var sex = &apos;&apos;;</span><br><span class="line">            if (getChackedValue(&apos;input[name=sex]&apos;) == 1)&#123;</span><br><span class="line">                sex = &apos;男&apos;</span><br><span class="line">            &#125;else if (getChackedValue(&apos;input[name=sex]&apos;) == 2)&#123;</span><br><span class="line">                sex = &apos;女&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            var age = $(&apos;#age&apos;).val();</span><br><span class="line">            var member = &apos;&apos;;</span><br><span class="line">            if($(&apos;#member&apos;).is(&apos;:checked&apos;)) &#123;</span><br><span class="line">                member = &apos;党员&apos;;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                member = &quot;非党员&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            var result = name + &apos; &apos; + sex + &apos; &apos; + age + &apos; &apos; + member;</span><br><span class="line">            $(&apos;#result&apos;).text(result);</span><br><span class="line">        &#125;</span><br><span class="line">        function reset() &#123;</span><br><span class="line">            $(&apos;#result&apos;).text(&apos;&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        function getChackedValue (CheckboxId) &#123;</span><br><span class="line">            var value = 0;</span><br><span class="line">            var i = 0;</span><br><span class="line">            $(CheckboxId).each(function () &#123;</span><br><span class="line">                if($(CheckboxId).eq(i).is(&apos;:checked&apos;))                &#123;</span><br><span class="line">                    value = $(CheckboxId).eq(i).val(); </span><br><span class="line">                   return;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;);</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="VuePage"><a href="#VuePage" class="headerlink" title="VuePage"></a>VuePage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:v-on=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生信息登记&lt;/h2&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;姓名：&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; placeholder=&quot;请输入姓名&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">            &lt;input id=&quot;sex01&quot; type=&quot;radio&quot; value=&quot;1&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;sex01&quot;&gt;男&lt;/label&gt;</span><br><span class="line">            &lt;input id=&quot;sex02&quot; type=&quot;radio&quot; value=&quot;2&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;sex02&quot;&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;年龄：&lt;/label&gt;</span><br><span class="line">            &lt;select v-model=&quot;age&quot;&gt;</span><br><span class="line">                &lt;option selected&gt;18&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;19&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;20&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;21&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;党员：&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;member&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button id=&quot;btnCommit&quot; v-on:click=&quot;commit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;button id=&quot;btnReset&quot; v-on:click=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;label&gt;&#123;&#123; result &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &apos;&apos;,</span><br><span class="line">                sex: &apos;&apos;,</span><br><span class="line">                age: &apos;&apos;,</span><br><span class="line">                member: &apos;&apos;,</span><br><span class="line">                result: &apos;&apos;</span><br><span class="line">            &#125;, </span><br><span class="line">            ready: function () &#123;</span><br><span class="line">                alert(&quot;加载完成&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                commit: function () &#123;</span><br><span class="line">                    var name = this.name;</span><br><span class="line">                    var sex = &apos;&apos;;</span><br><span class="line">                    if (this.sex == 1)&#123;</span><br><span class="line">                        sex = &apos;男&apos;;</span><br><span class="line">                    &#125;else if (this.sex == 2)&#123;</span><br><span class="line">                        sex = &apos;女&apos;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var age = this.age;</span><br><span class="line">                    var member = &apos;&apos;;</span><br><span class="line">                    if (this.member)&#123;</span><br><span class="line">                        member = &apos;党员&apos;;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        member = &apos;非党员&apos;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var result = name + &apos; &apos; + sex + &apos; &apos; + age + &apos; &apos; + member;</span><br><span class="line">                    this.result = result;</span><br><span class="line">                &#125;,</span><br><span class="line">                reset: function () &#123;</span><br><span class="line">                    this.result = &apos;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line">                &apos;sex&apos;: function (val, oldVal) &#123;</span><br><span class="line">                    console.log(&apos;oldVal = &apos; + oldVal + &apos; val = &apos; + val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工作需要，将公司项目从jQuery转成Vue来写。这里分享下转变项目的过程并写了一个小demo，希望能对遇到同样问题的朋友一些帮助。&lt;br&gt;PS： 本人Android开发，兼职前端，前端知识浅薄，有什么不对的地方还请指出，大家共同进步。谢谢~&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>巧用jQuery选择器写表单办法总结（提高效率）</title>
    <link href="https://violetjack.github.io/2018/02/06/%E5%B7%A7%E7%94%A8jQuery%E9%80%89%E6%8B%A9%E5%99%A8%E5%86%99%E8%A1%A8%E5%8D%95%E5%8A%9E%E6%B3%95%E6%80%BB%E7%BB%93%EF%BC%88%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%EF%BC%89/"/>
    <id>https://violetjack.github.io/2018/02/06/巧用jQuery选择器写表单办法总结（提高效率）/</id>
    <published>2018-02-06T08:20:52.000Z</published>
    <updated>2018-02-07T02:00:24.555Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相信很多小伙伴都会遇到需要做表单的需求，就像我现在做的医院项目，茫茫多的表单无穷无尽。一开始做表单使用最笨的方法：一个个span去定义ID，每个数据都用ajax获取后赋值显示，然后在表单提交前一个个用jQuery根据ID获取元素的value，组成一个model来提交给服务器。<br>后来发现使用jQuery可以大大简化这个过程。于是我修改了工作方法，总结了我的一些提高写表单效率的方法。</p></blockquote><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>表单中存在最多的无非就是文本、文本框、单选框、多选框。而一些表单中会有几十个甚至几百个选项。我们的目标就是以最高的效率来完成这些表单的数据获取和数据提交。<br><strong>注意：如果元素ID和服务器上获取的json字段的名字是一样的，那么这篇文章或许能对你提高工作效率有所帮助。</strong></p><h2 id="文本和文本框"><a href="#文本和文本框" class="headerlink" title="文本和文本框"></a>文本和文本框</h2><p>对于文本和文本框，我们通常需要为元素添加ID来绑定和获取数据。</p><h3 id="将数据显示到界面中"><a href="#将数据显示到界面中" class="headerlink" title="将数据显示到界面中"></a>将数据显示到界面中</h3><ul><li>用for循环遍历解析成功的JSON数据</li><li>通过if判断过滤数据是span的还是input的。</li><li>将数据传给和数据名同名的ID元素。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (var key in json) &#123;</span><br><span class="line">   //过滤type为text的文本框</span><br><span class="line">   if ($(&apos;#&apos; + key).attr(&apos;type&apos;) == &apos;text&apos;) &#123;</span><br><span class="line">       $(&apos;#&apos; + key).val(json[key]);</span><br><span class="line">   &#125;</span><br><span class="line">   if($(&apos;#&apos; + key).prop(&apos;tagName&apos;) == &apos;SPAN&apos;)&#123;</span><br><span class="line">       $(&apos;#&apos; + key).text(json[key]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="快速获取数据对象用于提交服务器"><a href="#快速获取数据对象用于提交服务器" class="headerlink" title="快速获取数据对象用于提交服务器"></a>快速获取数据对象用于提交服务器</h3><ul><li>定义空model对象。</li><li>通过jQuery选择器获取目标元素的value。</li><li>将数据传入model中，对象元素的字段就是HTML元素的ID。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var model = &#123;&#125;;</span><br><span class="line">$(&apos;input[type=&quot;text&quot;]&apos;).each(function () &#123;</span><br><span class="line">   model[$(this).attr(&apos;id&apos;)]=$(this).val();</span><br><span class="line">&#125;);</span><br><span class="line">$(&apos;span&apos;).each(function () &#123;</span><br><span class="line">   model[$(this).attr(&apos;id&apos;)]=$(this).text();</span><br><span class="line">&#125;);</span><br><span class="line">console.log(model);</span><br></pre></td></tr></table></figure></li></ul><p>按照如下方法，我们只需要照着后端提供的数据字段给HTML定义id，而JS就不需要写太多代码就可以完成表单了。再也不怕表单字段太多了。</p><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;jquery-2.2.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;姓名：&lt;input type=&quot;text&quot; id=&quot;name&quot;&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;性别：&lt;input type=&quot;text&quot; id=&quot;sex&quot;&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;年龄：&lt;input type=&quot;text&quot; id=&quot;age&quot;&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;时间：&lt;input type=&quot;text&quot; id=&quot;time&quot;&gt;&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;a：&lt;span id=&quot;param01&quot;&gt;1&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;b：&lt;span id=&quot;param02&quot;&gt;2&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;c：&lt;span id=&quot;param03&quot;&gt;3&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;d：&lt;span id=&quot;param04&quot;&gt;4&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button onclick=&quot;showResult()&quot;&gt;显示结果&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //多条input或者span的快速赋值</span><br><span class="line">        //data是模拟服务器返回的JSON数据</span><br><span class="line">        var data = &apos;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:&quot;女&quot;,&quot;age&quot;:22,&quot;time&quot;:&quot;2016-5-10&quot;,&quot;param01&quot;:111,&quot;param02&quot;:222,&quot;param03&quot;:333,&quot;param04&quot;:444&#125;&apos;;</span><br><span class="line">        //将数据显示到页面中</span><br><span class="line">        var json = eval(&apos;(&apos; + data + &apos;)&apos;);</span><br><span class="line">        for (var key in json) &#123;</span><br><span class="line">            if ($(&apos;#&apos; + key).attr(&apos;type&apos;) == &apos;text&apos;) &#123;</span><br><span class="line">                $(&apos;#&apos; + key).val(json[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            if($(&apos;#&apos; + key).prop(&apos;tagName&apos;) == &apos;SPAN&apos;)&#123;</span><br><span class="line">                $(&apos;#&apos; + key).text(json[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//获取文本和文本框的内容转为JSON对象</span><br><span class="line">        function showResult() &#123;</span><br><span class="line">            var model = &#123;&#125;;</span><br><span class="line">            $(&apos;input[type=&quot;text&quot;]&apos;).each(function () &#123;</span><br><span class="line">                model[$(this).attr(&apos;id&apos;)]=$(this).val();</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&apos;span&apos;).each(function () &#123;</span><br><span class="line">                model[$(this).attr(&apos;id&apos;)]=$(this).text();</span><br><span class="line">            &#125;);</span><br><span class="line">            console.log(model);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Radio和Checkbox"><a href="#Radio和Checkbox" class="headerlink" title="Radio和Checkbox"></a>Radio和Checkbox</h2><p>另外一种经常出现于表单中的就是radio、checkbox这些单选多选的元素了。这些元素通常用name命名一组选项。下面我同样用jQuery简化数据的显示和提交。</p><h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><p>和之前的文本一样，用for循环遍历json数据，然后通过if过滤后显示到界面。不同之处是这边是通过name来显示和绑定数据的。<br><strong>注：对radio和checkbox处理的方法写在了后面，所以复制粘贴的同学们请注意别漏了~</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(var key in json)&#123;</span><br><span class="line">   if ($(&apos;input[name=&apos; + key +  &apos;]&apos;).attr(&apos;type&apos;) == &apos;radio&apos;) &#123;</span><br><span class="line">      showRadioValue(key, json[key]);</span><br><span class="line">   &#125;</span><br><span class="line">   if ($(&apos;input[name=&apos; + key +  &apos;]&apos;).attr(&apos;type&apos;) == &apos;checkbox&apos;) &#123;</span><br><span class="line">     showCheckBoxValue(key, json[key]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取数据model的方法"><a href="#获取数据model的方法" class="headerlink" title="获取数据model的方法"></a>获取数据model的方法</h3><ul><li>定义空model对象。</li><li>定义name避免重复添加。</li><li>遍历所有radio获取结果传给model</li><li>遍历所有checkbox获取结果传给model</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function showResult() &#123;</span><br><span class="line">    var model = &#123;&#125;;</span><br><span class="line">    var radioName = &apos;&apos;;</span><br><span class="line">    var checkboxName = &apos;&apos;;</span><br><span class="line">    $(&quot;input[type=&apos;radio&apos;]&quot;).each(function () &#123;</span><br><span class="line">        if($(this).attr(&apos;name&apos;) != radioName)&#123;</span><br><span class="line">            radioName = $(this).attr(&apos;name&apos;);</span><br><span class="line">            model[radioName] = getRadioValue(radioName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;input[type=&apos;checkbox&apos;]&quot;).each(function () &#123;</span><br><span class="line">        if($(this).attr(&apos;name&apos;) != checkboxName)&#123;</span><br><span class="line">            checkboxName = $(this).attr(&apos;name&apos;);</span><br><span class="line">            model[checkboxName] = getCheckboxValue(checkboxName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理radio和checkbox的一些方法"><a href="#处理radio和checkbox的一些方法" class="headerlink" title="处理radio和checkbox的一些方法"></a>处理radio和checkbox的一些方法</h3><p>这里我对radio和checkbox的显示和获取结果写了几个方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">function showRadioValue(name, value) &#123;</span><br><span class="line">    $(&apos;input[name=&apos; + name +  &apos;]&apos;).each(function () &#123;</span><br><span class="line">        if(value == $(this).val())&#123;</span><br><span class="line">            $(this).attr(&apos;checked&apos;, &apos;true&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getRadioValue(name) &#123;</span><br><span class="line">    var value = 0;</span><br><span class="line">    var i = 0;</span><br><span class="line">    $(&apos;input[name=&apos; + name + &apos;]&apos; ).each(function () &#123;</span><br><span class="line">        if ($(&apos;input[name=&apos; + name + &apos;]&apos;).eq(i).is( &apos;:checked&apos;)) &#123;</span><br><span class="line">            value = $(&apos;input[name=&apos; + name + &apos;]&apos;).eq(i).val();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;);</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showCheckBoxValue (name, value) &#123;</span><br><span class="line">    var values = value.split(&apos;,&apos; );</span><br><span class="line">    var row = 1;</span><br><span class="line">    $(&apos;input[name=&quot;&apos; + name + &apos;&quot;]&apos;).each( function () &#123;</span><br><span class="line">        if (values[row] == 1) &#123;</span><br><span class="line">            $(this).attr(&quot;checked&quot; , &apos;true&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        row++;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCheckboxValue (name) &#123;</span><br><span class="line">    var text = &quot;&quot; ;</span><br><span class="line">    $(&apos;input[name=&quot;&apos; + name + &apos;&quot;]&apos;).each( function () &#123;</span><br><span class="line">        var t = &apos;&apos; ;</span><br><span class="line">        if ($(this ).is(&apos;:checked&apos;)) &#123;</span><br><span class="line">            t = &quot;1&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            t = &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        text += &quot;,&quot; + t;</span><br><span class="line">    &#125;);</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;jquery-2.2.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param01&quot; value=&quot;1&quot;&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param01&quot; value=&quot;2&quot;&gt;2&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param01&quot; value=&quot;3&quot;&gt;3&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param02&quot; value=&quot;1&quot;&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param02&quot; value=&quot;2&quot;&gt;2&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param02&quot; value=&quot;3&quot;&gt;3&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param03&quot; value=&quot;1&quot;&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param03&quot; value=&quot;2&quot;&gt;2&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;param03&quot; value=&quot;3&quot;&gt;3&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param04&quot;&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param04&quot;&gt;2&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param04&quot;&gt;3&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param04&quot;&gt;3&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param05&quot;&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param05&quot;&gt;2&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param05&quot;&gt;3&lt;/label&gt;</span><br><span class="line">            &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;param05&quot;&gt;3&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button onclick=&quot;showResult()&quot;&gt;显示结果&lt;/button&gt;</span><br><span class="line">        &lt;label id=&quot;result&quot;&gt;result&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //多条radio或者checkbox的快速赋值</span><br><span class="line">        var data = &apos;&#123;&quot;param01&quot;:&quot;1&quot;,&quot;param02&quot;:&quot;3&quot;,&quot;param03&quot;:&quot;2&quot;,&quot;param04&quot;:&quot;,1,0,0,0&quot;,&quot;param05&quot;:&quot;,0,0,1,1&quot;&#125;&apos;;</span><br><span class="line">        var json =eval( &apos;(&apos; + data + &apos;)&apos;);</span><br><span class="line">        for(var key in json)&#123;</span><br><span class="line">            if ($(&apos;input[name=&apos; + key +  &apos;]&apos;).attr(&apos;type&apos;) == &apos;radio&apos;) &#123;</span><br><span class="line">                showRadioValue(key, json[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            if ($(&apos;input[name=&apos; + key +  &apos;]&apos;).attr(&apos;type&apos;) == &apos;checkbox&apos;) &#123;</span><br><span class="line">                showCheckBoxValue(key, json[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function showRadioValue(name, value) &#123;</span><br><span class="line">            $(&apos;input[name=&apos; + name +  &apos;]&apos;).each(function () &#123;</span><br><span class="line">                if(value == $(this).val())&#123;</span><br><span class="line">                    $(this).attr(&apos;checked&apos;, &apos;true&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function getRadioValue(name) &#123;</span><br><span class="line">            var value = 0;</span><br><span class="line">            var i = 0;</span><br><span class="line">            $(&apos;input[name=&apos; + name + &apos;]&apos; ).each(function () &#123;</span><br><span class="line">                if ($(&apos;input[name=&apos; + name + &apos;]&apos;).eq(i).is( &apos;:checked&apos;)) &#123;</span><br><span class="line">                    value = $(&apos;input[name=&apos; + name + &apos;]&apos;).eq(i).val();</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;);</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function showCheckBoxValue (name, value) &#123;</span><br><span class="line">            var values = value.split(&apos;,&apos; );</span><br><span class="line">            var row = 1;</span><br><span class="line">            $(&apos;input[name=&quot;&apos; + name + &apos;&quot;]&apos;).each( function () &#123;</span><br><span class="line">                if (values[row] == 1) &#123;</span><br><span class="line">                    $(this).attr(&quot;checked&quot; , &apos;true&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">                row++;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function getCheckboxValue (name) &#123;</span><br><span class="line">            var text = &quot;&quot; ;</span><br><span class="line">            $(&apos;input[name=&quot;&apos; + name + &apos;&quot;]&apos;).each( function () &#123;</span><br><span class="line">                var t = &apos;&apos; ;</span><br><span class="line">                if ($(this ).is(&apos;:checked&apos;)) &#123;</span><br><span class="line">                    t = &quot;1&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    t = &quot;0&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                text += &quot;,&quot; + t;</span><br><span class="line">            &#125;);</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function showResult() &#123;</span><br><span class="line">            var model = &#123;&#125;;</span><br><span class="line">            var radioName = &apos;&apos;;</span><br><span class="line">            var checkboxName = &apos;&apos;;</span><br><span class="line">            $(&quot;input[type=&apos;radio&apos;]&quot;).each(function () &#123;</span><br><span class="line">                if($(this).attr(&apos;name&apos;) != radioName)&#123;</span><br><span class="line">                    radioName = $(this).attr(&apos;name&apos;);</span><br><span class="line">                    model[radioName] = getRadioValue(radioName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&quot;input[type=&apos;checkbox&apos;]&quot;).each(function () &#123;</span><br><span class="line">                if($(this).attr(&apos;name&apos;) != checkboxName)&#123;</span><br><span class="line">                    checkboxName = $(this).attr(&apos;name&apos;);</span><br><span class="line">                    model[checkboxName] = getCheckboxValue(checkboxName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            console.log(model);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>如果有一些特殊处理的内容（如时间格式文本），可以先遍历后在遍历之后单独进行赋值。</li><li>以上方法可以用于所有以ID定义的用于显示和获取数据的HTML元素。</li><li>用好jQuery的选择器可以获取到任何所需的元素、元素集合。</li><li>在each()方法中<code>$(this)</code>表示当前元素。</li><li>获取所选ID的元素标签：<code>$(&#39;#&#39; + key).prop(&#39;tagName&#39;) == &#39;SPAN&#39;</code>，注意：标签结果<code>&#39;SPAN&#39;</code>都是大写的,可以打log验证。</li><li>不断找规律、总结提炼，找出最好的偷懒方法，尽量避免体力劳动。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;相信很多小伙伴都会遇到需要做表单的需求，就像我现在做的医院项目，茫茫多的表单无穷无尽。一开始做表单使用最笨的方法：一个个span去定义ID，每个数据都用ajax获取后赋值显示，然后在表单提交前一个个用jQuery根据ID获取元素的value，组成一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://violetjack.github.io/2018/02/06/hello-world/"/>
    <id>https://violetjack.github.io/2018/02/06/hello-world/</id>
    <published>2018-02-06T05:45:39.152Z</published>
    <updated>2018-02-06T05:45:39.152Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
