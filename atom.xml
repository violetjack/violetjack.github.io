<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VioletJack 技术日志</title>
  
  <subtitle>专注！坚持！求真！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://violetjack.github.io/"/>
  <updated>2019-02-15T15:52:10.234Z</updated>
  <id>https://violetjack.github.io/</id>
  
  <author>
    <name>VioletJack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从 Vue 转 React 的一些体验</title>
    <link href="https://violetjack.github.io/2019/02/15/vue-react/"/>
    <id>https://violetjack.github.io/2019/02/15/vue-react/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2019-02-15T15:52:10.234Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原本打算自己写一写 Vue 转 React 的体验的，但是掘金上一搜发现一些不错的文章。这里就不进行技术细节上的对比了，只说下体验。</p></blockquote><h1 id="使用-Vue-和-React-的区别"><a href="#使用-Vue-和-React-的区别" class="headerlink" title="使用 Vue 和 React 的区别"></a>使用 Vue 和 React 的区别</h1><p>如果对于两者的区别感兴趣可以看下下面两篇文章：</p><ul><li><a href="https://juejin.im/post/5c2de832f265da6172659b45" target="_blank" rel="noopener">「Vue」与「React」–使用上的区别</a></li><li><a href="https://juejin.im/post/5b8b56e3f265da434c1f5f76" target="_blank" rel="noopener">个人理解Vue和React区别</a></li></ul><p>看了上面两篇文章简单整理出以下几点区别：</p><ol><li>Vue 使用 setter/getter 实现双向绑定，React 根据数据渲染页面。</li><li>Vue 使用 props 向子组件通信，使用 events 向父组件通信。React 通过 props 传递数据和回调函数进行父子组件间通信。</li><li>Vue 使用 mixins 而 React 使用 HOC 高阶组件组合功能。</li><li>Vue 使用 provide/inject 进行跨层级组件通信，React 通过 context 进行跨层级组件通信。</li><li>模板渲染方式上，Vue 通过 v-if/v-show/v-for 语法糖封装的逻辑来渲染，而 React 通过原生 JavaScript 代码逻辑来渲染。</li><li>状态管理上，Vuex 和 Redux 思路差不多。但是 Vuex 是双向绑定的，状态可变；而 Redux 的数据是不可变的，采取整体替换的方式更新状态。</li><li>Vue 中的 computed 和 watch 属性在 React 中并没有，需要手写逻辑控制或者使用外部工具，如 mobx。</li><li>Vue 使用 slot 标签来实现组件嵌套，而 React 通过将需要嵌套的组件当做 props 传给子组件的方式来实现嵌套。</li><li>Vue 和 React 的生命周期必然是不同的。</li></ol><h1 id="写-React-的体验"><a href="#写-React-的体验" class="headerlink" title="写 React 的体验"></a>写 React 的体验</h1><p>之前写惯了 Vue，在写 React 的时候给我几个感受：</p><ul><li>相比于 Vue 提供的一整套语法糖来实现渲染，React 的对渲染细节的控制能力比 Vue 好，更自由。</li><li>相比于 Vue 的类 HTML 写法让人看着很自然很舒服，React 的函数式编程让整体代码显得有些乱，应该是我还不习惯函数式编程的缘故把。</li><li>React 的社区真的很活跃，所以相关框架和库非常多。就我接手的两个 React 项目分别用到了 dva、umi、mobx 等不同的框架和库，而 Vue 大多数都是用的 Vue 提供的全家桶来进行开发。</li><li>ant design 真的很棒，据说有一个团队在维护它，相对而言 Vue 的几个组件库的功能数量和组件质量上就稍微差一些了。</li><li>在 React 中用到了像 class、注解等很多新特性，感觉很高级。Vue 项目并没有加这些新特性。由于 React 的自由度，社区把各种新语法都在 React 上玩起来了。</li><li>虽然大家各种对比前端三大框架，其实底层逻辑还是 JavaScript、HTML 和 CSS。我最近学习的 this、箭头函数、class、原型、ES6特性等知识点对我上手 React 的确有很大的帮助。所以说万变不离其宗，学好基础和底层逻辑最重要。</li></ul><h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><ol><li>遇到新技术一定仔细阅读完文档，可以避免很多不必要的坑。比如我在写 React 项目的时候花了一天时间写了一个组件，结果回头一看 antd 里面有差不多一样的 demo，实现的还比我好。</li><li>解决类似问题的技术的技术逻辑必然也是类似的，通过类比联想的方式学习相似技术可以提高不少的效率。</li><li>遇到问题要仔细阅读文档、Google 查找，在确认没有答案之后再询问他人，随意的打断他人问一些低级问题是非常不礼貌、不专业的。</li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>个人认为，如果前端基础足够扎实，上手这些框架都并非难事，只要熟悉了框架以及相关库的用法就可以得心应手了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原本打算自己写一写 Vue 转 React 的体验的，但是掘金上一搜发现一些不错的文章。这里就不进行技术细节上的对比了，只说下体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;使用-Vue-和-React-的区别&quot;&gt;&lt;a href=&quot;#使
      
    
    </summary>
    
    
      <category term="React" scheme="https://violetjack.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 类型全知道</title>
    <link href="https://violetjack.github.io/2019/02/14/type/"/>
    <id>https://violetjack.github.io/2019/02/14/type/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2019-02-15T16:00:20.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天来聊聊 JavaScript 的类型。</p></blockquote><h1 id="JavaScript-的七大基本类型"><a href="#JavaScript-的七大基本类型" class="headerlink" title="JavaScript 的七大基本类型"></a>JavaScript 的七大基本类型</h1><ul><li>undefined 未定义</li><li>null 空值</li><li>boolean 布尔值</li><li>string 字符串</li><li>number 数字</li><li>object 对象</li><li>symbol 符号（ES6）</li></ul><p>怎么知道是有这么七个值呢，使用 typeof 运算符来查看。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-43607c1c53f7dca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="typeof"></p><p>上图中，大多数都如我们想的那样，但是有两个特例：</p><ol><li>可以看到 <code>typeof null</code> 理论上应该返回 <code>&#39;null&#39;</code> 但却返回的是 <code>&#39;object&#39;</code>，这是一个存在20多年由来已久的bug，所以要判断对象是否为 null 时需要注意。</li><li>当我们打印 <code>typeof function() {}</code> 的时候返回的类型是 <code>&#39;function&#39;</code>，是不是说明 function 也是基本类型呢？但其实 function 是 object 的子集，下面说引用类型的时候会提到。</li></ol><h1 id="null、undefined-和-undeclared"><a href="#null、undefined-和-undeclared" class="headerlink" title="null、undefined 和 undeclared"></a>null、undefined 和 undeclared</h1><p>在 JavaScript 的类型中有三种表示变量“不存在”的方式，null、undefined 和 undeclared。那么它们的区别是什么呢？看代码~</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-354f1c86c7c9d36e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三种空"></p><ul><li>我们定义了变量 a 却没有给他赋值，所以 a 就是 undefined</li><li>我们没有定义变量 b，所以报错 b is not defined，我们称之为 undeclared。注意这和 undefined 是有区别的。</li><li>我们定义了变量 c 并给他赋值 null，所以 b 就是 null</li></ul><p>小结下：undefined 是定义了变量却没有赋值；undeclared 是没有定义变量更没有赋值，会报错；null 是定义了变量并且赋值空值 null。</p><h1 id="JavaScript-中的那些引用类型"><a href="#JavaScript-中的那些引用类型" class="headerlink" title="JavaScript 中的那些引用类型"></a>JavaScript 中的那些引用类型</h1><p>所有的引用类型都是 Object。我猜测由于在 JavaScript 中对于 Object 的访问是引用形式的，所以称之为引用类型。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 是一个函数，它可以用于创建对象，也可以用它带的 API 方法操作对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object API</span></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">var</span> object2 = <span class="built_in">Object</span>.freeze(object1);</span><br></pre></td></tr></table></figure><p>为什么可以使用这些 API？因为在 Object 函数的原型（关于原型可以看之前的文章）中有定义这些 API 方法。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-2ecc22f6b5162ed1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="api 方法在这里"></p><p>其他更多的 Object API 可以查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener">Object - JavaScript | MDN</a>。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>同样的，Array 函数用于创建数组和提供操作数组的 API。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create array</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// api</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr1);</span><br><span class="line">arr1.push(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>同样的，推荐查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array - JavaScript | MDN</a> 获取更多 API 信息。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Data 用于创建时间对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br></pre></td></tr></table></figure><p>Date 函数通过传递不同的参数在生产不同的时间对象，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">Date - JavaScript | MDN</a>。</p><p>注：在 ES6 中可以通过静态方法 Date.now() 来获取当前时间。</p><h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><p>RegExp 构造函数创建了一个正则表达式对象，用于将文本与一个模式匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex1 = <span class="regexp">/\w+/</span>; </span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\w+'</span>); <span class="comment">// 不推荐</span></span><br></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Function 构造函数 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个 Function 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Function</span>( <span class="string">"a"</span>, <span class="string">"return a * 2;"</span> ); <span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="包装器对象（Boolean、String-和-Number）"><a href="#包装器对象（Boolean、String-和-Number）" class="headerlink" title="包装器对象（Boolean、String 和 Number）"></a>包装器对象（Boolean、String 和 Number）</h2><blockquote><p>Boolean、String 和 Number 分别是基本类型 boolean、string 和 number 的包装器对象，有很多共性，所以就拿来一起讲了。</p></blockquote><h3 id="创建值"><a href="#创建值" class="headerlink" title="创建值"></a>创建值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> bool2 = <span class="built_in">Boolean</span>(<span class="literal">true</span>) <span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>(<span class="string">'hello world'</span>) <span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="number">100</span>) <span class="comment">// 不推荐</span></span><br></pre></td></tr></table></figure><p>可以看到，第二种创建方式非常的画蛇添足，但是这种写法可以有别的用处。</p><h3 id="自动包装"><a href="#自动包装" class="headerlink" title="自动包装"></a>自动包装</h3><p>上面我们定义了三个不同基本类型的变量，这几个变量后面可以加一些方法来进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool.toString();</span><br><span class="line">str.split(<span class="string">' '</span>)</span><br><span class="line">num..toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>为什么明明基本类型没有这些属性和方法却可以使用呢？<br>这就要提到这三个基本类型的自动包装特性了。即虽然这三个基本类型没有属性，但是当我们调用其属性和函数时，会自动包装成相应的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(bool).toString()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(str).split(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(num).toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>可以看下 String 的原型中的确包含了 string 类型用到的所有的属性和方法。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-1e612c6730b31699.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="string"></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>对象包装器另外一个作用 —— 强制类型转换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>); <span class="comment">// 'null'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">12138</span>); <span class="comment">// '12138'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"123"</span>)  <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>直接使用包装器函数就可以对值进行强制类型转换行为。</p><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><p>Global 表示全局对象，具体的内容暂时没有找到，先贴一段网上的解释：</p><blockquote><p>《JavaScript高级程序设计》中谈到，global对象可以说是ECMAScript中最特别的一个对象了，因为不管你从什么角度上看，这个对象都是不存在的。从某种意义上讲，它是一个终极的“兜底儿对象”，换句话说呢，就是不属于任何其他对象的属性和方法，最终都是它的属性和方法。我理解为，这个global对象呢，就是整个JS的“老祖宗”，找不到归属的那些“子子孙孙”都可以到它这里来认祖归宗。所有在全局作用域中定义的属性和函数，都是global对象的属性和方法，比如isNaN()、parseInt()以及parseFloat()等，实际都是它的方法；还有就是常见的一些特殊值，如：NaN、undefined等都是它的属性，以及一些构造函数Object、Array等也都是它的方法。总之，记住一点：global对象就是“老祖宗”，所有找不到归属的就都是它的。</p></blockquote><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。举几个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-1</span>);     <span class="comment">// 取绝对值 1</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">20</span>);   <span class="comment">//  取最大值 20</span></span><br><span class="line"><span class="built_in">Math</span>.random(); <span class="comment">// 取随机数</span></span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>Symbol 函数是 ES6 添加的，用于表示有唯一性的特殊值。创建方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'this is a symbol'</span>)</span><br></pre></td></tr></table></figure><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>Error 函数用于创建错误对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err1 = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I was created using a function call!'</span>)</span><br><span class="line"><span class="keyword">var</span> err2 = <span class="built_in">Error</span>(<span class="string">'I was created using a function call!'</span>)</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文先是介绍了七大基本类型，之后有简单介绍了 JavaScript 中的引用类型。主要想达到归纳整理的作用，让大家知道都有哪些类型，而具体使用中则强烈推荐查阅 <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a> 来使用各种方法和属性。</p><p>希望本文对你有所帮助~明天聊聊我最近从 Vue 转 React 项目的一些体会，明天见！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天来聊聊 JavaScript 的类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JavaScript-的七大基本类型&quot;&gt;&lt;a href=&quot;#JavaScript-的七大基本类型&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="JavaScript 基础" scheme="https://violetjack.github.io/tags/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>聊聊对象行为委托</title>
    <link href="https://violetjack.github.io/2019/02/13/behavior/"/>
    <id>https://violetjack.github.io/2019/02/13/behavior/</id>
    <published>2019-02-12T16:00:00.000Z</published>
    <updated>2019-02-15T16:00:47.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨天我们聊到了对象的原型，知道了有 new 和 Object.create() 两种操作原型的方式。今天我们来对比下使用这两种方式进行面向对象编程的特点。</p></blockquote><h1 id="使用-new-关键字写面向类"><a href="#使用-new-关键字写面向类" class="headerlink" title="使用 new 关键字写面向类"></a>使用 new 关键字写面向类</h1><p>先来一段面向类的代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.me = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identify = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    Foo.call(<span class="keyword">this</span>, who);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar(<span class="string">"b1"</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar(<span class="string">"b2"</span>);</span><br><span class="line"></span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure><p>当然也可以用 ES6 的 class 语法糖。class 的出现避免了在函数的 <code>prototype</code> 上添加属性的奇怪的行为。</p><h1 id="混乱不堪的原型关系"><a href="#混乱不堪的原型关系" class="headerlink" title="混乱不堪的原型关系"></a>混乱不堪的原型关系</h1><p>无论是 function 还是 class，其背后还是逃不开对于 prototype 的操作。而原型中各种关系令人头疼。下面是这段代码的关系图：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-b78fe4bbd7d6532a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型关系"></p><p>抛开函数与 Function 和 Object 的关系，我们来捋一捋代码中的逻辑。</p><ol><li>Foo 函数的 prototype 上创建了函数 identify</li><li>Foo 函数的 prototype 引用了 Object 的原型（原型链理论）</li><li>Bar 函数 prototype 引用了以 Foo 的 prototype 为原型创建的对象</li><li>Bar 函数的 prototype 上创建了函数 speak</li><li>以 Bar 为构造器分别 new 了两个对象 b1 和 b2，b1 和 b2 的原型引用了 Bar 函数的 prototype</li><li>由于 Bar 进行了修改原型的操作，所以没有 constructor 函数。</li><li>所以根据原型链理论，Bar 的 prototype 和 b1、b2 的 constructor 都指向了 Foo 函数的 constructor。</li></ol><p>就这么个逻辑（这还没有包括函数与对象之前的关系），我表示我讨厌在 prototype 上去添加属性，这显得非常乱。</p><p>最后输出的 b1 对象的原型结构如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-1cd13125458907a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型结构"></p><h1 id="行为委托闪亮登场"><a href="#行为委托闪亮登场" class="headerlink" title="行为委托闪亮登场"></a>行为委托闪亮登场</h1><p>可以看到上面的写法导致指向非常混乱，实际上我们并不需要了解这么多逻辑。下面介绍一种方式完全不管 prototype 真正面向对象的写法 —— 行为委托。</p><p>就拿上面的例子来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Foo = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.me = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    identify: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bar = <span class="built_in">Object</span>.create(Foo);</span><br><span class="line">Bar.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b1.init(<span class="string">"b1"</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b2.init(<span class="string">"b2"</span>);</span><br><span class="line"></span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure><p>其中的关键就是完全使用对象来写面向对象编程，而避免使用 new 一个构造器的写法。这里我们也来理一理逻辑：</p><ol><li>创建 Foo 对象，它包含 init 和 identify 两个函数属性。</li><li>创建 Bar 对象原型继承 Foo 对象。</li><li>在 Bar 对象上添加 speak 方法。</li><li>创建 b1 和 b2 对象原型继承 Bar 对象。</li><li>使用原型链上的 init 函数为 b1 和 b2 对象传入数据。</li><li>通过原型链调用 speak 函数。</li></ol><p>这种写法的原型关系图就简单了很多：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-bdc4c082cbe29864.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型关系"></p><p>可以看到与第一中方法比少了函数构造器，少了函数构造器就没了 constructor 和 prototype。完全通过对象与对象之间的原型继承引用关系来实现面向对象的编程思想。</p><p>最后看下输出的 b1 对象的原型结构：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-20caa15116450797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型结构"></p><h1 id="行为委托的好处"><a href="#行为委托的好处" class="headerlink" title="行为委托的好处"></a>行为委托的好处</h1><ul><li>行为委托避免使用 new 构造器形式来实现面向对象，减少了大量构造器所带出的复杂关系。</li><li>行为委托只使用对象之间的原型继承关系，让整个代码逻辑变得非常清晰。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这里介绍了行为委托这一种面向对象的设计思想，它让面向对象编程变得更加简洁、更加自然。</p><p>当然，这只是一种设计方式。如果执意要用 new 写法来写面向对象编程当然没有问题，推荐使用 class 语法糖，它可以将操作 prototype 的行为给隐藏起来，这使得代码更像 Java（引用对象的特性并未改变，所以只是看着像），从而让代码更好理解。</p><p>赶快去试试行为委托吧，我认为它是种很适合 JavaScript 的设计模式。</p><p>明天我们聊聊 JavaScript 的类型~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;昨天我们聊到了对象的原型，知道了有 new 和 Object.create() 两种操作原型的方式。今天我们来对比下使用这两种方式进行面向对象编程的特点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;使用-new-关键字写面向类&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="JavaScript 基础" scheme="https://violetjack.github.io/tags/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 JavaScript 的原型</title>
    <link href="https://violetjack.github.io/2019/02/12/prototype/"/>
    <id>https://violetjack.github.io/2019/02/12/prototype/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-15T16:01:53.492Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript 中的原型也是一个非常让人头疼的东西，很多前端同学对此也是一知半解，比如我。今天我们就好好捋一捋这个原型。</p></blockquote><h1 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h1><p>下面就是创建对象的几种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    a: <span class="number">123</span>,</span><br><span class="line">    b: <span class="string">'hello world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o1.b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">33</span></span><br><span class="line">    <span class="keyword">this</span>.b = <span class="string">'hello o2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> fun2()</span><br><span class="line"><span class="built_in">console</span>.log(o2.b)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">365</span></span><br><span class="line">        <span class="keyword">this</span>.b = <span class="string">'hello class'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> Fun3()</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure><p>有人说这是三种创建方式，但是我认为其实是两种创建方式（因为 class 语法糖的本质还是 function）：<strong>直接定义对象</strong>和<strong>使用 new 关键词构造对象</strong>。</p><h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><p>当我们创建了一个对象之后，就产生了原型（<code>Object.create(null)</code> 是特例）。</p><h2 id="prototype-和-proto-的区别"><a href="#prototype-和-proto-的区别" class="headerlink" title="prototype 和 __proto__ 的区别"></a>prototype 和 <code>__proto__</code> 的区别</h2><p><code>__proto__</code> 是一个非正式的属性，很多环境中不支持该属性。它指向当前对象的原型。如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-1002cf3d69276266.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="__proto__"></p><p>上面的代码是一段原型继承，可以看到对象 obj1 继承了对象 obj，所以 obj1 的 <code>__proto__</code> 就指向了 obj，而 obj 的 <code>__proto__</code> 则指向了 Object。所有对象的原型链最终都将指向 Object。</p><p>而关于 prototype 我摘录了一段话：</p><blockquote><p>当你创建函数时，JS 会为这个函数自动添加 <code>prototype</code> 属性，值是一个有 constructor 属性的对象。而一旦你把这个函数当作构造函数（<code>constructor</code>）调用（即通过<code>new</code>关键字调用），那么 JS 就会帮你创建该构造函数的实例，实例继承构造函数 <code>prototype</code> 的所有属性和方法。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1987062-c600260dc91c2314.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prototype"></p><p>可以看到，对象 bar 的 <code>__proto__</code> 属性指向了函数 func 的 <code>prototype</code>。</p><p>总结下，<code>__proto__</code> 指向原型，而 <code>prototype</code> 是函数独有且构造的对象原型指向 <code>prototype</code>。</p><h2 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h2><p>每个对象都是原型，而对象之间是可以继承的。所以就产生了原型链。看图说话：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-aa7441f2c85bb6f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链"></p><p>很好理解了，我们创建了四个对象逐层进行原型继承。最后打印 obj3 对象可以看到 <code>obj3 -&gt; obj2 -&gt; obj1 -&gt; obj -&gt; Object</code> 这就是原型链。</p><p>如果我要在 obj3 对象上访问 a 属性，那么 JavaScript 就会顺着原型链逐层往下找，最终在 obj 对象上找到了a 属性，这就是原型链查找数据的方式。如果找到 Object 也没有找到属性就返回 <code>undefined</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-07ac0815c99f5d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链查找"></p><h1 id="为对象指定原型的两种方式"><a href="#为对象指定原型的两种方式" class="headerlink" title="为对象指定原型的两种方式"></a>为对象指定原型的两种方式</h1><p>那么如何为对象添加原型呢？</p><h2 id="1-new-关键字"><a href="#1-new-关键字" class="headerlink" title="1. new 关键字"></a>1. new 关键字</h2><p>第一种就是通过构造器的方式来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">11</span></span><br><span class="line">    <span class="keyword">this</span>.b = <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.c = <span class="number">33</span></span><br><span class="line">Foo.prototype.func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(f))</span><br></pre></td></tr></table></figure><p>当然，不得不说的是 ES6 的 class 语法糖写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">11</span></span><br><span class="line">        <span class="keyword">this</span>.b = <span class="number">22</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><p>两者其实是一样的效果，但是 class 写法更接近常规的类写法。（终于可以让 function 回归它原本的作用上了。）</p><h2 id="2-Object-create-obj-面向对象"><a href="#2-Object-create-obj-面向对象" class="headerlink" title="2. Object.create(obj) 面向对象"></a>2. Object.create(obj) 面向对象</h2><p>Object.create() 可以很好的实现原型继承行为，也能通过 Object API 来修改原型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">456</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, &#123; <span class="attr">c</span>: <span class="number">789</span> &#125;)</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj)</span><br><span class="line">obj2.e = <span class="number">555</span></span><br></pre></td></tr></table></figure><p>代码输出结果如下图，的确实现了为对象指定原型的行为。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-b592d69f559248af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型继承和修改"></p><h1 id="引用流还是复制流？"><a href="#引用流还是复制流？" class="headerlink" title="引用流还是复制流？"></a>引用流还是复制流？</h1><p>使用 JavaScript 原型是特别要主义的一个点是：<strong>JavaScript 对于原型的继承是一种引用行为</strong>，即所引用的对象改变，继承对象的原型也会改变。</p><p>与之相反的，有些语言会使用复制的方式。即在原型继承时复制一份原型到当前对象，从此被复制的对象和复制对象再无瓜葛。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>随着 Object.create() 等一系列新 API 和 ES6 的 class 写法的出现，使用 function 作为构造器并使用 prototype 来修改原型的方式将逐渐被抛弃。但是由于历史原因这部分知识还是要理解其中原理的。</p><p>而 <code>__proto__</code> 属性是非正式属性，不适合在通用场景下使用。</p><p>而对于原型的写法，我认为有两种不错的处理方式：</p><blockquote><ol><li>完全使用 class 构造器写法来替代使用 function 构造器的写法来进行<strong>面向类</strong>的开发方式。</li><li>放弃原型写法，使用 Object 系列 API 进行<strong>面向对象</strong>的开发（行为委托就是这样的方式）。</li></ol></blockquote><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>关于原型，先聊这么多。明天我们聊聊基于 Object API 来实现的面向对象模式 —— 行为委托，敬请期待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JavaScript 中的原型也是一个非常让人头疼的东西，很多前端同学对此也是一知半解，比如我。今天我们就好好捋一捋这个原型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;创建对象的方式&quot;&gt;&lt;a href=&quot;#创建对象的方式&quot; class=
      
    
    </summary>
    
    
      <category term="JavaScript 基础" scheme="https://violetjack.github.io/tags/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 JavaScript 的 this</title>
    <link href="https://violetjack.github.io/2019/02/11/this/"/>
    <id>https://violetjack.github.io/2019/02/11/this/</id>
    <published>2019-02-10T16:00:00.000Z</published>
    <updated>2019-02-15T16:03:25.964Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 中的 this 一直是比较让人头疼，也是面试特别容易问及的问题。下面就参照这《你不知道的 JavaScript》来学习下 this 这个神奇的东西。</p><h1 id="this-到底指向何处"><a href="#this-到底指向何处" class="headerlink" title="this 到底指向何处"></a>this 到底指向何处</h1><blockquote><p>this 是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。 this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p></blockquote><p>所以，this 并不只是简单地指向函数或者对象自身。</p><h1 id="this-的四种绑定方式"><a href="#this-的四种绑定方式" class="headerlink" title="this 的四种绑定方式"></a>this 的四种绑定方式</h1><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><p>所谓的默认绑定就是 this 的默认绑定方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>严格模式下这种默认绑定形式不成立。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>隐式绑定是指 this 所在函数在有<strong>上下文</strong>的前提下的绑定，如 <code>obj.foo();</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>对象中的函数只是引用关系，即对象和函数存在于两个地方。所以在别的地方使用函数，与隐式绑定的对象就没有关系了。看下两个例子：</p><ol><li>其中 <code>var myFoo = obj.foo</code> 的 myFoo 变量引用的是 foo() 函数，与 obj 并无关系。所以 myFoo 的执行函数行为就变成了默认绑定，打印结果为 1。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFoo = obj.foo</span><br><span class="line">myFoo(); <span class="comment">// 默认绑定，值为 1</span></span><br></pre></td></tr></table></figure><ol><li>在回调函数中其实也会出现 this 绑定丢失的情况，回调函数 obj.foo 引用的是 foo 函数，与 obj 对象并无关系。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(obj.foo, <span class="number">300</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h2><p>显式绑定就是指使用 call、apply、bind 来指定某个上下文进行绑定，它们的一个作用就只为函数硬绑定一个上下文对象。</p><p>之前的回调函数使用 bind 进行修改后打印出了我们 obj 对象中的 a 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(obj.foo.bind(obj), <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>call 和 apply 也是类似的，通过对函数指定上下文来进行硬绑定，且硬绑定只能绑定一次。</p><blockquote><p><code>call()</code> 方法的作用和 <code>apply()</code> 方法类似，区别就是 <code>call()</code> 方法接受的是参数列表，而 <code>apply()</code> 方法接受的是一个参数数组。</p></blockquote><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><p>new 关键字创建对象的过程其实也是一个绑定上下文的过程，所以使用 new 创建的对象的 this 也要格外注意。</p><blockquote><p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><ol><li>创建（或者说构造）一个全新的对象。</li><li>这个新对象会被执行 [[ 原型 ]] 连接。</li><li>这个新对象会绑定到函数调用的 this 。</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( bar.a ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>可以看到 new 行为的第三步就是进行 this 绑定，我们也可以从代码看到 new 行为的确有绑定 this 的能力。</p><h2 id="this-四种绑定方式排序"><a href="#this-四种绑定方式排序" class="headerlink" title="this 四种绑定方式排序"></a>this 四种绑定方式排序</h2><p>既然四种绑定都能够改变 this 的指向，那么这四种绑定的优先级是怎样的呢？结论是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new 绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</span><br></pre></td></tr></table></figure><p>虽然很少会出现多个场景绑定一个 this 的情况，但是知道下也能以防万一。</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>关于 this 最后要说的就是 ES6 的箭头函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的 this 在此法上继承自 foo()</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>它完全等同于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// lexical capture of this</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self.a);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>关于箭头函数只要记住 <code>var self = this;</code> 就够了。</p><p>它其实是通过词法作用域保存当前 this 上下文传递给回调函数。本质上是抛弃了 this 原有的机制。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>我们从四种常见 this 绑定方式和箭头函数这两个角度系统的学习了 this 绑定的知识点，相信之后你再也不怕 this 相关的知识点了！</p><p>本文还有很多可以改进的地方，如有任何意见和问题，欢迎留言指出。谢谢~</p><h1 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h1><ul><li>你不知道的 JavaScript （上册）</li><li><a href="https://juejin.im/entry/57c25064d342d3006b216070" target="_blank" rel="noopener">Know this, use this! (总结 this 的常见用法)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 中的 this 一直是比较让人头疼，也是面试特别容易问及的问题。下面就参照这《你不知道的 JavaScript》来学习下 this 这个神奇的东西。&lt;/p&gt;
&lt;h1 id=&quot;this-到底指向何处&quot;&gt;&lt;a href=&quot;#this-到底指向何处&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript 基础" scheme="https://violetjack.github.io/tags/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 作用域详解</title>
    <link href="https://violetjack.github.io/2019/01/12/scope/"/>
    <id>https://violetjack.github.io/2019/01/12/scope/</id>
    <published>2019-01-11T16:00:00.000Z</published>
    <updated>2019-02-15T16:09:04.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于<a href="https://zhuanlan.zhihu.com/c_1045249924572676096" target="_blank" rel="noopener">贝壳社区FE</a>专栏，欢迎关注！</p></blockquote><h1 id="一、什么是作用域"><a href="#一、什么是作用域" class="headerlink" title="一、什么是作用域"></a>一、什么是作用域</h1><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><blockquote><ul><li><strong>分词/词法分析(Tokenizing/Lexing)</strong><br>这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代 码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2 、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。</li><li><strong>解析/语法分析(Parsing)</strong><br>这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”(Abstract Syntax Tree，AST)。<br>var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下 来是一个叫作 Identifier(它的值是 a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子 节点。</li><li><strong>代码生成</strong><br>将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息 息相关。<br>抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指 令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。</li></ul></blockquote><p>简而言之：</p><ol><li>将代码以词为单位拆分成一个个词法单元。</li><li>解析词法单元转换成 AST 语法树。</li><li>生成机器指令。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1987062-5b4473c428c6d144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译过程"></p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>整个编译过程有三个角色需要登场：</p><ul><li><strong>引擎</strong> 负责整个 JavaScript 程序的编译及执行过程。</li><li><strong>编译器</strong> 负责语法分析及既期代码生成。</li><li><strong>作用域</strong> 负责收集并维护所有声明的变量组成的一系列查询。</li></ul><p>那么整个 <code>var a = 2;</code> 的编译过程如下：</p><ul><li><strong>编译器</strong>拿到 <code>var a = 2;</code> 这段代码，进行语法分析。</li><li><strong>编译器</strong>分析到 <code>var a</code>，向<strong>作用域</strong>进行变量定义操作。<ul><li>如果<strong>作用域</strong>中已有 a 变量，直接通知<strong>编译器</strong>。</li><li>如果<strong>作用域中</strong>没有 a 变量，创建 a 变量并通知<strong>编译器</strong>。</li></ul></li><li><strong>编译器</strong>收到通知，继续执行并将 <code>a = 2</code> 这段代码编译为机器语言传给<strong>引擎</strong>。</li><li><strong>引擎</strong>拿到 <code>a = 2</code> 向<strong>作用域</strong>中去查找 a 变量，准备赋值操作。<ul><li>如果 a 所在作用域下有 a 变量，<strong>作用域</strong>直接通知<strong>引擎</strong>。</li><li>如果 a 所在作用域下没有 a 变量，则不断向外部作用域查找 a 变量。<ul><li>在外部作用域找到 a 变量，<strong>作用域</strong>通知<strong>引擎</strong>。</li><li>在外部作用域找 a 变量直到全局作用域下也没有找到，<strong>作用域</strong>通知<strong>引擎</strong>未找到 a 变量。</li></ul></li></ul></li><li><strong>引擎</strong>收到通知<ul><li>如果找到 a 变量，<strong>引擎</strong>在<strong>作用域</strong>内对变量 a 赋值。</li><li>如果没有找到 a 变量，<strong>引擎</strong>发出 <code>Refence Error</code> 错误。</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1987062-22a485401f80754d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p><h2 id="作用域的好处"><a href="#作用域的好处" class="headerlink" title="作用域的好处"></a>作用域的好处</h2><ul><li>安全性 —— 变量和函数可以定义在最小作用域下。</li><li>减少命名冲突 —— 作用域帮我们较少命名冲突发生的概率。</li><li>代码复用性 —— 好的局部作用域可以提升代码的复用性。</li></ul><h1 id="二、LHS-与-RHS"><a href="#二、LHS-与-RHS" class="headerlink" title="二、LHS 与 RHS"></a>二、LHS 与 RHS</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>我对于 LHS 和 RHS 的理解是：所有赋值操作都是 LHS，如 <code>a = 2;</code>；而所有的取值操作都是 RHS，如 <code>console.log(a);</code>。</p><blockquote><p>当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。 —— 《你不知道的 JavaScript》</p></blockquote><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><p>在非严格模式下，当变量 a 未被定义，像 <code>console.log(a)</code> 这样的RHS 查找会报 <code>ReferenceError</code> 的错误，而像 <code>b = 2</code> 这样的 LHS 查找会在全局作用域下创建变量并进行赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// type: RHS, output: ReferenceError</span></span><br><span class="line">b = <span class="number">2</span>; <span class="comment">// type: LHS, output: 2</span></span><br></pre></td></tr></table></figure><p>而在严格模式下，LHS 和 RHS 的效果是相同的，都会报 <code>ReferenceError</code>。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>在以上例子中有 3 次 RHS 和 1 次 LHS</p><ul><li>RHS <code>foo(2)</code> 查找 foo 函数。</li><li>LHS <code>foo(2)</code> 隐藏着 <code>a = 2</code> 赋值行为。</li><li>RHS <code>console.log(a)</code> 查找 console 对象</li><li>RHS <code>console.log(a)</code> 查找 a 变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = foo(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>找出 3 次 LHS 4 次 RHS。</p><ul><li>RHS: <code>foo(2)</code> 查找 foo 函数。</li><li>LHS: <code>foo(2)</code> 隐藏有 <code>a = 2</code> 赋值行为。</li><li>LHS: <code>var c = foo(2)</code> 是赋值行为。</li><li>RHS: <code>var b = a</code> 查找 a 变量。</li><li>LHS: <code>var b = a</code> 是赋值行为。</li><li>RHS: <code>return a + b</code> 查找 a 变量。</li><li>RHS: <code>return a + b</code> 查找 b 变量。</li></ul><h1 id="三、词法作用域及欺骗词法"><a href="#三、词法作用域及欺骗词法" class="headerlink" title="三、词法作用域及欺骗词法"></a>三、词法作用域及欺骗词法</h1><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>词法作用域就是指我们代码词法所表示的作用域。看下如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a, b, c );</span><br><span class="line">  &#125;</span><br><span class="line">  bar( b * <span class="number">3</span> ); </span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">2</span> ); <span class="comment">// 2, 4, 12</span></span><br></pre></td></tr></table></figure><p>这段代码的词法作用域如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-1641a475f9ce9427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="词法作用域"></p><p>其实就是我们在代码编写时所定义的作用域即词法作用域。</p><h2 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a>欺骗词法</h2><p>当然也有不按词法规则来的写法，称为欺骗词法。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>类似于 <code>eval()</code> 方法会将字符串解析成 JS 语言的执行。它将破坏词法作用域的规则。如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'var a = 3'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>with 这个冷门的关键词通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 单调乏味的重复 "obj" </span></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line">obj.b = <span class="number">3</span>;</span><br><span class="line">obj.c = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 简单的快捷方式 </span></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  a = <span class="number">3</span>;</span><br><span class="line">  b = <span class="number">4</span>;</span><br><span class="line">  c = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种赋值方式看似等价。但如果赋值目标是 obj 对象中没有的变量，两种赋值效果是不同的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.d = <span class="number">11</span>;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 1, b:2, c:3, d: 11 &#125; </span></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  d = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 1, b:2, c:3 &#125; </span></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p>可以看到在 with 函数中的对于变量 d 的赋值行为（LHS）是定义在了 window 对象上的。</p><h1 id="四、函数作用域和块作用域"><a href="#四、函数作用域和块作用域" class="headerlink" title="四、函数作用域和块作用域"></a>四、函数作用域和块作用域</h1><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>通常情况下，函数内的变量无法在函数外调用。即变量存在于函数作用域下，所以函数作用域起到了局部变量或者变量隐藏的作用。如下例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>以上写法将 foo 方法中的 a 变量隐藏了起来。不过也产生了一个问题 —— 全局作用域下多了一个 foo 函数变量。解决这种污染的方式是立即执行函数（IIFE），我们将上面的代码进行改造：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>这种写法就可以将 foo 函数变量也隐藏起来，避免对全局作用域的濡染。</p><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>块级作用域存在于 <code>if</code>, <code>for</code>, <code>while</code>, <code>{}</code> 等语法中，这些作用域中使用 var 定义的变量是不在这个作用域内的。</p><p>块作用域和函数定义域的区别在于：函数定义域隐藏函数内的变量，而块作用域隐藏块中的变量。举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数作用域，隐藏变量a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块作用域，隐藏变量 i</span></span><br><span class="line"><span class="comment">// 不隐藏变量 a （不是函数作用域）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><h3 id="with-与-try-catch"><a href="#with-与-try-catch" class="headerlink" title="with 与 try/catch"></a>with 与 try/catch</h3><p>with 和 catch 关键字都会创建块级作用域，因为他们创建的作用域在外部作用域中无效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>(obj) &#123;</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="literal">undefined</span>(); <span class="comment">// 执行一个非法操作来强制制造一个异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 能够正常执行! </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(err); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><h3 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h3><p>let 和 const 关键字可以将变量绑定到所在的任意作用域中。换句话说，<strong>let 和 const 为其声明的变量隐式地了所在的块作用域。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>可见 const 和 let 能够保证变量隐藏在所在作用域中。</p><h3 id="var-与-let-的差异"><a href="#var-与-let-的差异" class="headerlink" title="var 与 let 的差异"></a>var 与 let 的差异</h3><p>由于 ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p>而 ES6 所提出的 let 和 const 为 JavaScript 带来了块作用域解决了这个问题。</p><p>下面列出4点 var 与 let 的差异之处：</p><ol><li>let 不存在变量提升。(var 的变量提升下文有提及)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol><li>let 在块作用域内定义了变量后不受外部作用域变量影响。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol><li>不允许重复申明。</li><li>最大的不同是在于 let 作用域块作用域，而 var 只作用域函数作用域和全局作用域。</li></ol><h1 id="五、变量提升"><a href="#五、变量提升" class="headerlink" title="五、变量提升"></a>五、变量提升</h1><p>在使用 var 定义变量和使用 function 定义函数时，会出现变量提升的情况。</p><h2 id="编译顺序"><a href="#编译顺序" class="headerlink" title="编译顺序"></a>编译顺序</h2><p>看几个例子来理解下变量提升：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line"><span class="comment">// JavaScript 的处理逻辑</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="comment">// JavaScript 的处理逻辑</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined </span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JavaScript 的处理逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined </span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p><strong>为什么呢？</strong>回忆一下上文说到的编译过程就能理解了。看图！</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-22a485401f80754d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p><p>可以看到编译器会将变量都定义到作用域中，然后再编译代码给引擎去执行代码命令。<strong>即 <code>var  a = 2；</code> 是被拆开执行的且 <code>var a</code> 变量会提前被定义。</strong></p><p>再来看一个不靠谱的函数定义方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// "b"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果与《你不知道的 JavaScript》中的有所不同，在 node v10.5.0 中输出的是 <code>TypeError</code> 而非 <code>b</code>。这个差异有待考证。</p><h2 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h2><p>虽然函数和变量都会提升，但是编译器会先提升函数，再是变量。看如下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时是函数定义，但是第二种是定义变量的形式，所以遵从函数优先原则，以上代码会变为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo; <span class="comment">// 无意义</span></span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="六、闭包"><a href="#六、闭包" class="headerlink" title="六、闭包"></a>六、闭包</h1><p>下面是人见人怕的闭包。</p><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>当<strong>函数</strong>可以<strong>记住并访问所在的词法作用域</strong>时，就产生了闭包。<br>当<strong>函数</strong>可以<strong>记住并访问所在的词法作用域</strong>时，就产生了闭包。<br>当<strong>函数</strong>可以<strong>记住并访问所在的词法作用域</strong>时，就产生了闭包。<br>重要的定义说三遍！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line"><span class="built_in">console</span>.log(baz()); <span class="comment">// 2 &lt;-- 这就是闭包</span></span><br></pre></td></tr></table></figure><p>按照我们对于函数作用域的理解，函数作用域外是无法获取函数作用域内的变量的。</p><p>但是通过闭包，函数作用域被持久保存，并且闭包函数可以访问到作用域下的变量。</p><p>下面再展示几个闭包便于理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = baz; <span class="comment">// 将 baz 分配给全局变量 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// &lt;-- 闭包!</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  bar(baz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// &lt;-- 闭包!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="string">"Hello, closure!"</span>);</span><br><span class="line"><span class="comment">// timer 持有 wait 函数作用域，所以是闭包。</span></span><br></pre></td></tr></table></figure><p>上面几个例子可以归纳下闭包的特性：</p><ol><li>闭包必定是函数。</li><li>函数可以在当前词法作用域外持有并访问词法作用域。</li></ol><p>就这么简单！按照这个定义其实所有的回调函数都属于是闭包。</p><h2 id="经典的循环面试题解析"><a href="#经典的循环面试题解析" class="headerlink" title="经典的循环面试题解析"></a>经典的循环面试题解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看以上写法最终输出的是什么呢？由于 var i = 0 是在全局作用域下，且没有任何地方存 i 的变化值，所以最终输出是 5 个 <code>6</code>。</p><p>解决方案有两种：</p><ol><li>使用闭包的持有作用域特性，为每一个 timer 函数封闭一个作用域保存当前的 i。</li><li>使用 let 块作用域封闭 for 循环中的作用域，保存当前的 i 值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块作用域写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li>《你不知道的 JavaScript（上）》</li><li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="https://codeburst.io/javascript-learn-understand-scope-f53d6592c726" target="_blank" rel="noopener">JavaScript: Learn &amp; Understand Scope</a></li><li><a href="https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/" target="_blank" rel="noopener">Everything you wanted to know about JavaScript scope</a></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文旨在更方便和全面的理解作用域的相关知识，希望能对你有所帮助<br>JavaScript 的作用域知识不管是在面试中还是在实际工作中都是非常重要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文首发于&lt;a href=&quot;https://zhuanlan.zhihu.com/c_1045249924572676096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;贝壳社区FE&lt;/a&gt;专栏，欢迎关注！&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="JavaScript 基础" scheme="https://violetjack.github.io/tags/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>我的 2018 年终总结</title>
    <link href="https://violetjack.github.io/2018/12/31/2018-sum/"/>
    <id>https://violetjack.github.io/2018/12/31/2018-sum/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-02-15T16:10:49.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下总结仅限于个人认知，如有错误还请指正！</p></blockquote><h1 id="年度关键词"><a href="#年度关键词" class="headerlink" title="年度关键词"></a>年度关键词</h1><p><strong>2018 年是我快速提升认知、清晰认识自我的一年。</strong></p><p>在工作上，我对工作有了新的理解。</p><ol><li>理解了工作所处的系统是如何运作的；</li><li>理解了工作价值的本质；</li><li>理解了技术工作者能力提升的本质。</li></ol><p>在生活上，我确定了追寻幸福生活的人生目标。</p><ol><li>开始追寻生活的意义感；</li><li>用心体会和珍惜周围人际关系的情谊；</li><li>践行极简主义为自己减负。</li></ol><p>在个人成长上，我对于事物的思维方式和做事方法有了很大的更新。</p><ol><li>刻意锻炼自己开放性思维和独立思考的能力；</li><li>逐渐体会到知行合一的重要性；</li><li>践行以终为始地聪明学习方式。</li></ol><h1 id="对工作的新理解"><a href="#对工作的新理解" class="headerlink" title="对工作的新理解"></a>对工作的新理解</h1><h2 id="工作系统的运作方式"><a href="#工作系统的运作方式" class="headerlink" title="工作系统的运作方式"></a>工作系统的运作方式</h2><h3 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h3><p>我们工作的团队分工明确、各司其职，是一个非常棒的团队。在这段时间的接触和学习之后我大致理解了一下我们团队的运作方式。</p><p>从生产方式角度来说：<br>后端使用的是 Java 语言和 Sprint Boot 框架进行开发，使用 MySQL 来存储数据的。后端同学通过 Restful API 的形式与前端通信数据，并将接口文档写在公司 wiki 上便于联调。虽然技术上用的是框架，但是我发现后端同学对于业务的理解、逻辑的处理、大量数据的处理上面是非常复杂的。</p><p>测试同学我了解的更多一些。测试妹子们需要充分理解产品业务需求，写出非常完整严密的测试用例，使用代理抓包来监测各个端的网络通信情况；精通 shell 脚本并使用 Jenkins 来管理前后端项目的发布，或者使用命令行操作服务器；操作 MySQL 对数据库进行测试；写 Python、JavaScript 来进行一些自动化测试。还需要辛苦地人肉测试大量的数据；需要严密的测试思维。所以说测试妹子并不是只会对着手机和网页点点点这么简单的~</p><p>对于咱们前端，技术栈上使用了 Vue 和 React 两种，在框架上使用北京贝壳开发的 redskull2 脚手架来生成项目。项目包含前端项目和一个基于 koa 的中间 node 层项目。前端项目负责页面展示、数据通信等正常前端工作；node 层负责数据转发、单点登录验证等（其实可以做更多）。当开发完成后，我们会将前端项目打包成 JS Bundle 静态资源发布到 CDN 上，并将 node 项目部署到带有域名的服务器上。访问方式就是访问 node 端路由，由 node 端获取静态前端项目进行渲染。当然咱们也承接各种小程序的开发~这个流程大家都一样。</p><p>对于我们老大，我能看到的他主要负责团队文化建设、项目资源支持、战略方向制定这三件事。他那种看不见具体行动却时刻影响着整个团队进程的那种细雨润无声的能力真的非常厉害。</p><h3 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h3><p>在公司的理解上，我学到了公司的三个层级、八大部门理论。<br>三个层级分别是：执行、管理和决策。<br>八大部门分别是：服务、产品、研发、财务、人力、行政、销售、市场</p><h2 id="是什么为工作带来价值？"><a href="#是什么为工作带来价值？" class="headerlink" title="是什么为工作带来价值？"></a>是什么为工作带来价值？</h2><h3 id="万物皆产品，要用工匠精神打磨好产品"><a href="#万物皆产品，要用工匠精神打磨好产品" class="headerlink" title="万物皆产品，要用工匠精神打磨好产品"></a>万物皆产品，要用工匠精神打磨好产品</h3><p>对于我之前的努力，无论是之前的开发工作还是技术写作，其实都缺少一种产品意识。</p><p>在了解了一些产品知识之后，突然发现其实很多东西都可以看作是一款产品。无论是生活用品、各种软件、个人品牌，甚至是这篇文章其实都是一款产品。</p><p>而产品其实会带来一个价值问题，即<strong>你的产品能创造多少价值？目标群体用户是谁？传播方式有哪些？</strong>而想在职业发展和个人影响力上有大的提升，一款出色的代表作是必不可少的。如乔布斯和苹果、傅盛和360、微信和张小龙、ES6和阮一峰。</p><p>所以，万物皆产品。想要快速成长，就要用工匠精神打磨好每一款产品。</p><h3 id="产品价值是什么？"><a href="#产品价值是什么？" class="headerlink" title="产品价值是什么？"></a>产品价值是什么？</h3><p>我听过一些关于产品的看法：</p><ul><li>产品的诞生主要就是帮人偷懒；</li><li>产品必须要针对目标用户群体提供价值；</li><li>产品只有能够给用户省时间、省钱和更好的体验才是有价值的产品；</li><li>我自己私自加了一条：产品在能够利用现有资源解决痛点、满足需求时它就是有价值的。</li></ul><h3 id="工作价值-能力-资源-态度"><a href="#工作价值-能力-资源-态度" class="headerlink" title="工作价值 = 能力 + 资源 + 态度"></a>工作价值 = 能力 + 资源 + 态度</h3><p>这是一个衡量自身职场价值的公式。</p><p>能力即技术、沟通、管理等实际工作能力；资源是自身的人脉资源、影响力等；而态度就是成长性、忠诚度这些素质。</p><p>回想起我当时怀着一腔热血和不太符合要求的技术能力面试通过，想必就是态度帮助了我。</p><p>而我之后要做的，就是提升的就是工作能力，积累外在资源。</p><h2 id="技术的价值和能力提升"><a href="#技术的价值和能力提升" class="headerlink" title="技术的价值和能力提升"></a>技术的价值和能力提升</h2><h3 id="做时间的朋友"><a href="#做时间的朋友" class="headerlink" title="做时间的朋友"></a>做时间的朋友</h3><p>先讲个反面例子，我之前虽然自诩是技术爱好者，但是我所花在技术上的时间大多都是了解新技术、追寻热门技术。虽然花了很多时间学习，但却用处很小，可能学了10个技术，5个快速过时，3个不常用，1个非常重要但是精力不够了~</p><p>而像《CSS世界》的作者张鑫旭，坚持几年只专注于 CSS 这么一门看似简单枯燥的技术。看似很傻很浪费时间，但是他的坚持却让他变成了 CSS 方面的专家。事实也证明，虽然前端技术日新月异，但是其实底层的前端使用的还是 HTML、JavaScript 和 CSS，他通过坚守 CSS 提升了影响力和基础能力。无论前端技术再变，他对于 CSS 的精通都有有用的。</p><p>所以说，对于日新月异的技术，应该要学习能够长久存在的底层技术，做时间的朋友。</p><h3 id="技术认知四阶段"><a href="#技术认知四阶段" class="headerlink" title="技术认知四阶段"></a>技术认知四阶段</h3><p>下面是我最近思考如何学习更加长久存在的技术时偶得的，我认为技术层次分为四个层次：</p><ul><li>简单使用，能够使用常用技术 API 解决业务问题，需要大量翻阅技术文档。</li><li>精通用法，对技术的各种 API 了如指掌，工作效率显著提升。</li><li>基本原理，能清晰使用流程图画出整个技术结构、运行流程和设计思想，能快速定位底层问题，并查找解决。</li><li>融会贯通，熟悉技术到源码级别。能够直接出手解决底层问题，也能创造新的工具和解决方案。</li></ul><p>个人感觉优秀的程序员应该要努力将自己的层次到底第三阶段。</p><h3 id="学习技术的本质"><a href="#学习技术的本质" class="headerlink" title="学习技术的本质"></a>学习技术的本质</h3><p>既然说了学习技术要学长久存在的，学习技术要学到能够理解基本逻辑画出运行流程和设计思路。其实就是在说我们要学习一些底层的、本质的技术。</p><p>就拿我熟悉的前端做比方，前端可以学习的框架非常多，而工作中也经常会用到不同的工具，如果说我每个工具都学习到简单使用程度，那么每个工具都需要花时间去学习、查阅资料和实践。</p><p>但其实，很多的工具和框架都是有共性的。对于每一个使用的工具深刻的理解和研究是有价值的，因为这些逻辑和思想是可迁移的。</p><p>所以说，为什么技术大牛学习技术特别快？不是他们脑子有多么聪明，只是他们经历的多了，理解了技术的本质逻辑和思想，所以可以通过对已有知识的类比快速理解一项新的技术。</p><p>学习本质的技术，提炼逻辑和思想，学会类比和复用。</p><h1 id="如何追寻幸福人生"><a href="#如何追寻幸福人生" class="headerlink" title="如何追寻幸福人生"></a>如何追寻幸福人生</h1><p>今年看了几本关于幸福的书《活出生命的意义》、《你要如何衡量你的人生》、《象与骑象人》、《向死而生》、《极简主义》、《断舍离》，这让我对生活的意义感和幸福感更加的看重。</p><h2 id="做有意义的事"><a href="#做有意义的事" class="headerlink" title="做有意义的事"></a>做有意义的事</h2><p>不论是《活出生命的意义》还是《肖生克的救赎》里都提到了一点，<strong>能够在艰难困苦中生存下去的人必然会给自己找一些有意义的事情去坚持。</strong>像前面两个例子里的主人公使用写作和雕刻来保持生活的意义感。</p><p>心理学上有一种病叫做神经性官能症，就是指在内心的空虚感和对现实世界的虚无感的煎熬下，导致患上像抑郁这类疾病。而治疗神经性官能症的最佳方案就是快速找到一些有意义的事情，哪怕只是做个手工活、参加公一项益活动、从事一项带来幸福感的工作等。</p><p>像我其实对自己的现状感觉挺幸福的，工作内容就是我喜欢做的事情，常常能在工作中产生心流。而工作内容也能够被周围环境所认可。在家里玩游戏和写作是我喜欢干的事情，写作能带给我充实感和意义感，而游戏这个不好说，但起码它也能给我带来心流。所以总体来说我还是很充实的。</p><p>萧伯纳说过：很多人过得不快乐，因为他们有太多时间去想自己是不是幸福。</p><p>所以幸福其实很简单，<strong>找到几件些让自己感觉充实和幸福的事情，并立即行动起来。</strong></p><h2 id="珍惜身边的关系"><a href="#珍惜身边的关系" class="headerlink" title="珍惜身边的关系"></a>珍惜身边的关系</h2><p>在李开复老师的《向死而生》中，当他知道自己身患重病时，才发现自己最求的不断扩大影响力来改变世界都是五彩泡沫，他在查出患了癌症之后在微博上感叹：癌症面前，人人平等。不管是有钱有权有名，最终都无足轻重。那一刻他唯一想到的就是陪伴家人、见见挚友。</p><p>自此以后，他也不再以改变世界为目标、效率至上。他变得慢下来，花更多时间陪伴老母亲、妻子和两个女儿，拜访好友。甚至会与自己相遇的每一个有缘人交谈。</p><p>年末的时候看了一部叫《幸福一家人》的电视剧，也让我非常感动。它的主题曲中有这么一句：</p><blockquote><p>曾以为，理想才是唯一。我忙着去追寻，忘了身后风景。</p></blockquote><p>所以，我一直要警示自己：<strong>为了梦想而努力的同时，一定也要珍惜身边的人，慢下来用心的陪伴。</strong>其实良好的人际关系也是幸福的关键因素。</p><h2 id="极简生活"><a href="#极简生活" class="headerlink" title="极简生活"></a>极简生活</h2><p>另外一个对生活的感悟就是做减法。</p><p>西方谚语说：“最富有的人不是拥有最多，而是需求最少。”吴军老师在他的《谷歌方法论》中也不断强调做减法的重要性。我们老大也一再提醒我要做减法。今年我也看了《断舍离》和《极简》这两本书。</p><p>但人总是有一种想拥有更多的本能欲望和一种道理都懂但不被生活教训一下就不能理解的天性。今年，自己就胸怀壮志的买了大量的书、定了宏大的目标、买了好几个专栏、想学习各种技术，但结果是什么呢？</p><p>结果就是将自己累个半死；承担着巨大的心理负担和压力；想学的太多就必然学不深。</p><p>我们老大有句话非常有哲理：“多就是少，少就是多。手里想抓的沙子越多流失的越快。”</p><p>我现在对于看书和学习的态度有很大变化，只有能够解决当下问题的知识才去学习并立即进行实践。那些可能会用到的很有用的知识其实都是妄念。就像软件开发，实现一个功能可以选的技术类型和方案有各式各样，但是最终让产品产生价值的必然只是当前在使用的技术。程序员并不需要将所有可用技术全部精通才能做出好产品来。</p><p>所以要不断给工作、生活和物品都做减法。减少大量妄念所带来的内耗和压力，专注的去做真正更有价值的事情。</p><h1 id="思维方式和做事方法的探寻"><a href="#思维方式和做事方法的探寻" class="headerlink" title="思维方式和做事方法的探寻"></a>思维方式和做事方法的探寻</h1><h2 id="思维开放，独立思考"><a href="#思维开放，独立思考" class="headerlink" title="思维开放，独立思考"></a>思维开放，独立思考</h2><h3 id="理解现实规律"><a href="#理解现实规律" class="headerlink" title="理解现实规律"></a>理解现实规律</h3><p>这是从《原则》一书中学到的：我们无法预测未来，我们能做的就是观察这个世界，理解现实世界的运行规律和原理，去总结出一条条原则，并依照原则行事。</p><h3 id="保持开放和谦逊的头脑"><a href="#保持开放和谦逊的头脑" class="headerlink" title="保持开放和谦逊的头脑"></a>保持开放和谦逊的头脑</h3><p>人总是有两个自我的 —— 情绪自我和理性自我。情绪自我会在面对冲突时激发战斗和逃避的本能，且情绪自我的力量远大于理性自我。所以面对外界各种不同信息的涌入，必须要让自己保持开放的头脑和谦逊的态度去倾听，在感受到情绪来临时不要妄下结论。</p><p>不要被情绪抑制理性的思考，训练自己的拥有开放和谦逊心态。这里也推荐一种控制情绪的方法 —— 正念冥想。亲测简单可行见效快~</p><h3 id="独立思考"><a href="#独立思考" class="headerlink" title="独立思考"></a>独立思考</h3><p>或许是因为十几年的中国式教育让我适应了别人说什么就去虚心接受的习惯。很少思考收到的信息中的问题、弊端和漏洞。</p><p>我体会比较深的一点在于项目评审会上，当产品描述完它的方案我，给我的感觉就是完美无瑕、逻辑严密、无可挑剔。但是其他同事总能一针见血的提出一些建设性的问题和建议。我自己的感觉是我特别同理心的顺着产品的思维往下走，顺着他的思路走入了他的思维模式中。</p><p>当然，我也学到了一些解决方法，就是提前预习资料，独立思考。</p><p>但是在独立思考这一点上，还是需要继续加强。建立起自己的一套思考模式，更好地分辨信息的对错优劣。</p><h2 id="知行合一"><a href="#知行合一" class="headerlink" title="知行合一"></a>知行合一</h2><h3 id="积极学习认知"><a href="#积极学习认知" class="headerlink" title="积极学习认知"></a>积极学习认知</h3><p>2018 年我看了 25 本书，听了 2 个得到专栏和 100 多篇书评，最大的收获就是在认知方面的提升。看到了很多之前从未想过的事情，也给自己带来了巨大的正能量。</p><p>所以，2019 年我还是要坚持看书，提升认知和眼界。看书真的是非常好的自我提升的方式，有人提过这么一个逻辑：<strong>从古至今，牛人没有几个是不看书的。</strong>逻辑虽不严密，但大体上没毛病~</p><h3 id="用行动理解认知"><a href="#用行动理解认知" class="headerlink" title="用行动理解认知"></a>用行动理解认知</h3><p>在看了大量的书之后，自己犯了两个错误。一是感受到认知的提升后感觉自己与别人之间有不同，产生了优越感。二是认知提升之后，心变得很大。感觉自己什么都懂，自己能够快速成为成功人士。但这一切都是错觉。</p><p>知道了前人的经验和知识其实并没有站在巨人的肩膀上。打个不太恰当的比方来说<strong>这只是看到了巨人的肩膀</strong>，真正要站在巨人的肩膀上还是得靠自己脚踏实地走上巨人的肩膀才行。</p><p>在实际的践行中，才能更好地理解和领悟到所学知识的一些要点和难点，反过来提升和纠正认知，再采取下一步行动。这种行知、知行的反复才是真正提升认知和能力的途径。</p><h3 id="知到深处便是行；行到极致便是知。"><a href="#知到深处便是行；行到极致便是知。" class="headerlink" title="知到深处便是行；行到极致便是知。"></a>知到深处便是行；行到极致便是知。</h3><p>我逐渐开始理解我们老大为何如此推崇王阳明的知行合一，因为这就是他知行合一之后的感悟和认知。</p><p>所以，其他的不说了，多多看书，积极思考，踏实践行吧！</p><h2 id="聪明的学习方式"><a href="#聪明的学习方式" class="headerlink" title="聪明的学习方式"></a>聪明的学习方式</h2><p>今年在学习方式上也收获了很多。</p><h3 id="整体学习"><a href="#整体学习" class="headerlink" title="整体学习"></a>整体学习</h3><p>整体学习法是一本叫《如何高效学习》的书中学到的。作者史蒂芬杨在10天内搞定了线性代数，一年内搞定思念大学课程。这种学习达人的秘籍就是整体学习法。</p><p>他的方法我倒还没有机会践行，但是给我的启发已经开始起作用了。就是在学习技术的时候，不要上来就死扣文档，整体理解技术的实现方式和设计思想，通过画图的方式将这项技术整体勾勒出来。在理解了技术整体之后，学习其中的细节和用法会变得更加顺畅。</p><h3 id="策略学习"><a href="#策略学习" class="headerlink" title="策略学习"></a>策略学习</h3><p>策略学习这个东西在很多书中都有提到过。即我们看书和学习不要从头到尾开始看，必须带着目的去找到能解决当下问题和需求的知识看。</p><p>这是一种反常规的学习方式，一开始非常不习惯，总觉得自己缺了些什么。但这种以终为始的看书和学习方式，真的可以大大提高学习的效率。</p><p>我就在一周内看完了《JavaScript 高级程序设计》,用的就是策略学习的方法。核心是重点知识细看、次要知识可查。整体学习理解，明确学习重点和学习目标。</p><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>当然，还是有一些高知识密度的干货是我们必须拿下的，这时候就可以使用深度学习的方式来进行攻坚战。</p><p>当然，深度学习也可以用到之前说的整体学习法来提高效率和理解。最近我很喜欢用画流程图和结构图的学习方式。</p><h1 id="今年简史"><a href="#今年简史" class="headerlink" title="今年简史"></a>今年简史</h1><p>说了一堆认知，说下今年的历程（篇幅较长）。</p><p>17年10月，我宝贝女儿的出生触发了我生活轨迹的改变，多米诺骨牌由此推动。</p><p>在孩子出生后，发现自己很难有时间大段大段的时间看书，于是买了喜马拉雅的会员听书。</p><p>在喜马拉雅最爱听《天天听好书》的一个栏目，它天天会推送一些好书。听了那么多书，多很多成长类书籍产生了兴趣。</p><p>借阅和购买了大量书籍阅读，像《富爸爸穷爸爸》、《财务自由之路》、《跃迁》、《刻意练习》、《关键对话》等。这些书籍给我打开了一个完全不同的世界。之前我看到的世界就是家庭生活、工作以及一些技术论坛，但是通过阅读我发现了很多人生的可能性，开始产生了对于现状的强烈不满感。</p><p>2018年4月，我毅然决定从安逸的小公司开发工作上裸辞。在家修整两月自我沉淀、安心带娃。在这期间我坚持每天5点起床，花4-5个小时更新技术博客。</p><p>2018年5月，我意外收到了饿了么的一位前辈的邀请去参见面试。当时饿了么对于我而言是前端工程师的圣地，是我理想中打开我新世界的最佳选择。在匆忙准备之后我去饿了么总部和面试官聊了半小时，但由于我前端基础不过关遗憾失败。</p><p>故事当然没那么快结束。由于当时我真的非常想加入一家优秀的互联网公司打开我对新世界的门窗，我继续和那位前辈沟通，请教我的技术缺陷和提升方式，我也一直很感激他给我的一系列建议。所以我在一个月的时间里学习完了《JavaScript 高级程序设计》、《算法》并且将150道 LeetCode 算法题刷了3遍。当时基本情况是早上起来就学习，一直到晚上七八点。</p><p>努力了一个月后，那位前辈给了我一次再去饿了么面试的机会。我坚定的告诉自己这次一定要成功。但故事并没那么顺利~由于当时饿了么工位不多，所以HR认为我并不胜任仅有的几个工位。虽然再次失败，但是我还是由衷的感谢那位前辈给我这么大的帮助。</p><p>由于刚好同学结婚，所以修整了一个星期。回到上海重整旗鼓开始投简历刚过一天。那位前辈又给了我一次面试上海链家的机会。这次机会我终于把握住了，6月份成功入职现在的公司。</p><p>在链家的6个月，让我成长了非常多。了解了互联网公司和业务团队的工作方式、看到了那么多优秀的同事、提升了大量的认知、学习到了很多做事的经验，这其中很多内容都整理在上文中了。这里也非常感谢军哥、彪哥和晖姐的帮助。我从一个小白逐渐的开始适应了互联网公司的工作方式和节奏。</p><p>就在18年的最后一个月，我又折腾了一下自己。报名参加了古典老师的个人战略课。白天忙着上班，晚上学习课程、参加小组讨论、周末还要按时交作业，把我给累的够呛。所幸这些折腾很有价值，古典老师的课程质量很高，我也遇到了非常帮的助教和同组小伙伴。我们在相互激励下完成了为期一个月的课程，在小组讨论中总能擦除很多火花，收获非常多。具体的收获我会在之后的笔记中整理出来，主要是理解工作的价值和定位，做好自己的职业生涯规划。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>2018 是我认知提升巨大的一年，带动着的是我生活现状的巨大改变。2019 年我对自己的期望是：</p><blockquote><p>远处看系统，近处看本质。<br>学习有策略，知行要合一。<br>产品看价值，妄念做减法。<br>技术懂原理，类比可迁移。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下总结仅限于个人认知，如有错误还请指正！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;年度关键词&quot;&gt;&lt;a href=&quot;#年度关键词&quot; class=&quot;headerlink&quot; title=&quot;年度关键词&quot;&gt;&lt;/a&gt;年度关键词&lt;/h1&gt;&lt;p&gt;&lt;s
      
    
    </summary>
    
    
      <category term="年终总结" scheme="https://violetjack.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>element 源码学习四 —— color-picker 源码学习</title>
    <link href="https://violetjack.github.io/2018/03/31/element-code-04/"/>
    <id>https://violetjack.github.io/2018/03/31/element-code-04/</id>
    <published>2018-03-30T16:00:00.000Z</published>
    <updated>2018-04-03T01:50:38.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 element ui 中最让我好奇的组件之一就是 color-picker 着色器组件。这里还是通过几个问题来学习一下如何实现着色器的。</p></blockquote><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p>在前几篇博客中说起过 element 组件都位于 <code>package</code> 目录下，那么本次学习的颜色选择器就是在 <code>package/color-picker</code> 目录中。<br>简单说下目录结构：<br><img src="https://upload-images.jianshu.io/upload_images/1987062-34971b1038d38db9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"></p><ul><li><strong>src</strong> 源码文件夹<ul><li><strong>components</strong> 组件文件夹<ul><li><strong>alpha-slider.vue</strong> 透明度选择器</li><li><strong>hue-slider.vue</strong> 色调选择器</li><li><strong>picker-dropdown.vue</strong> 下拉界面（几个选择器的组合）</li><li><strong>sv-panel</strong> 颜色选择器</li></ul></li><li><strong>color.js</strong> 颜色处理逻辑</li><li><strong>draggable.js</strong> 选择器拖动效果逻辑</li><li><strong>main.vue</strong> color-picker 的整体界面实现。</li></ul></li><li><strong>cooking.conf.js</strong> <a href="http://cookingjs.github.io/zh-cn/index.html" target="_blank" rel="noopener">cooking</a> 配置</li><li><strong>index.js</strong> index文件，用于导出组件</li><li><strong>package.json</strong> 组件信息配置文件</li></ul><p>下面通过问答解决问题的方式来学习 color-picker 组件。</p><h1 id="回答几个源码问题"><a href="#回答几个源码问题" class="headerlink" title="回答几个源码问题"></a>回答几个源码问题</h1><h2 id="整体组件的结构是怎样的？"><a href="#整体组件的结构是怎样的？" class="headerlink" title="整体组件的结构是怎样的？"></a>整体组件的结构是怎样的？</h2><p>从整体结构来看，color-picker 的结构其实是多个组件的组合而成的。</p><ul><li><strong>显示颜色结果的 span</strong> 和<strong>选择颜色的下拉框</strong>组成整体的 color-picker 组件；</li><li>其中<strong>下拉框</strong>由以下组件组合而成；<ul><li>3个颜色选择器</li><li>1个input</li><li>1个清空button</li><li>1个确定button</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1987062-f84f7d12052e86d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件结构"></p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-c9e4c7f3c5b7a2aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构图"></p><h2 id="选择器的背景颜色变化是如何实现的？"><a href="#选择器的背景颜色变化是如何实现的？" class="headerlink" title="选择器的背景颜色变化是如何实现的？"></a>选择器的背景颜色变化是如何实现的？</h2><p>3 个颜色选择器都是由 CSS3 的线性渐变效果 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient" target="_blank" rel="noopener">linear-gradient()</a> 来实现的。下面是简化版~<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div01</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 27px;</span></span><br><span class="line"><span class="undefined">        height: 350px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">red</span> 0, <span class="selector-id">#ff0</span> 17%, <span class="selector-id">#0f0</span> 33%, <span class="selector-id">#0ff</span> 50%, <span class="selector-id">#00f</span> 67%, <span class="selector-id">#f0f</span> 83%, <span class="selector-tag">red</span> 100%);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg-white</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 450px;</span></span><br><span class="line"><span class="undefined">        height: 350px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-id">#fff</span>, <span class="selector-tag">rgba</span>(255, 255, 255, 0));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg-black</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 450px;</span></span><br><span class="line"><span class="undefined">        height: 350px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">top</span>, <span class="selector-id">#000</span>, <span class="selector-tag">transparent</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div02</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 450px;</span></span><br><span class="line"><span class="undefined">        height: 350px;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        background: rgb(213, 0, 255);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div03</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 27px;</span></span><br><span class="line"><span class="undefined">        width: 450px;</span></span><br><span class="line"><span class="undefined">        background: linear-gradient(to right, rgba(213, 0, 255, 0) 0%, rgb(213, 0, 255) 100%);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div02"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-black"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div03"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终结果如图所示：<img src="https://upload-images.jianshu.io/upload_images/1987062-0318237c94811e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="显示结果"></p><p>原来看似复杂的颜色选择器知识用了几个渐变就组合出来了，CSS 真的很强大！</p><h2 id="如何计算并获取选中的色值？"><a href="#如何计算并获取选中的色值？" class="headerlink" title="如何计算并获取选中的色值？"></a>如何计算并获取选中的色值？</h2><p>颜色结果的计算逻辑都在 color.js 中了，来简单看下代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hsv 转 hsl</span></span><br><span class="line"><span class="keyword">const</span> hsv2hsl = <span class="function"><span class="keyword">function</span>(<span class="params">hue, sat, val</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为 1.0</span></span><br><span class="line"><span class="keyword">const</span> isOnePointZero = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为百分比</span></span><br><span class="line"><span class="keyword">const</span> isPercentage = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take input from [0, n] and return it as [0, 1]</span></span><br><span class="line"><span class="keyword">const</span> bound01 = <span class="function"><span class="keyword">function</span>(<span class="params">value, max</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制转十六进制</span></span><br><span class="line"><span class="keyword">const</span> INT_HEX_MAP = &#123; <span class="number">10</span>: <span class="string">'A'</span>, <span class="number">11</span>: <span class="string">'B'</span>, <span class="number">12</span>: <span class="string">'C'</span>, <span class="number">13</span>: <span class="string">'D'</span>, <span class="number">14</span>: <span class="string">'E'</span>, <span class="number">15</span>: <span class="string">'F'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为十六进制颜色值</span></span><br><span class="line"><span class="keyword">const</span> toHex = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; r, g, b &#125;</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制转十进制</span></span><br><span class="line"><span class="keyword">const</span> HEX_INT_MAP = &#123; <span class="attr">A</span>: <span class="number">10</span>, <span class="attr">B</span>: <span class="number">11</span>, <span class="attr">C</span>: <span class="number">12</span>, <span class="attr">D</span>: <span class="number">13</span>, <span class="attr">E</span>: <span class="number">14</span>, <span class="attr">F</span>: <span class="number">15</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析十六进制</span></span><br><span class="line"><span class="keyword">const</span> parseHexChannel = <span class="function"><span class="keyword">function</span>(<span class="params">hex</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hsl 转 hsv</span></span><br><span class="line"><span class="keyword">const</span> hsl2hsv = <span class="function"><span class="keyword">function</span>(<span class="params">hue, sat, light</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rgb 转 hsv</span></span><br><span class="line"><span class="keyword">const</span> rgb2hsv = <span class="function"><span class="keyword">function</span>(<span class="params">r, g, b</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hsv 转 rgb</span></span><br><span class="line"><span class="keyword">const</span> hsv2rgb = <span class="function"><span class="keyword">function</span>(<span class="params">h, s, v</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>._hue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>._saturation = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>._value = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>._alpha = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.enableAlpha = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.format = <span class="string">'hex'</span>;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> option <span class="keyword">in</span> options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (options.hasOwnProperty(option)) &#123;</span><br><span class="line">        <span class="keyword">this</span>[option] = options[option];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.doOnChange();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置属性值</span></span><br><span class="line">  set(prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> prop === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> prop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop.hasOwnProperty(p)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.set(p, prop[p]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[<span class="string">'_'</span> + prop] = value;</span><br><span class="line">    <span class="keyword">this</span>.doOnChange();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取属性值 _hue</span></span><br><span class="line">  get(prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[<span class="string">'_'</span> + prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 颜色值转为 rgb 返回</span></span><br><span class="line">  toRgb() &#123;</span><br><span class="line">    <span class="keyword">return</span> hsv2rgb(<span class="keyword">this</span>._hue, <span class="keyword">this</span>._saturation, <span class="keyword">this</span>._value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 格式化传入的值</span></span><br><span class="line">  fromString(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">      <span class="keyword">this</span>._hue = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>._saturation = <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">this</span>._value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.doOnChange();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义计算出结果后：赋值、改变。</span></span><br><span class="line">    <span class="keyword">const</span> fromHSV = <span class="function">(<span class="params">h, s, v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._hue = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="number">360</span>, h));</span><br><span class="line">      <span class="keyword">this</span>._saturation = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="number">100</span>, s));</span><br><span class="line">      <span class="keyword">this</span>._value = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="number">100</span>, v));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.doOnChange();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 颜色变化逻辑，最后都会转为 HSV 三个值执行 fromHSV 方法 */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更具计算结果定义当前颜色值 value</span></span><br><span class="line">  doOnChange() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _hue, _saturation, _value, _alpha, format &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enableAlpha) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'hsl'</span>:</span><br><span class="line">          <span class="keyword">const</span> hsl = hsv2hsl(_hue, _saturation / <span class="number">100</span>, _value / <span class="number">100</span>);</span><br><span class="line">          <span class="keyword">this</span>.value = <span class="string">`hsla(<span class="subst">$&#123; _hue &#125;</span>, <span class="subst">$&#123; <span class="built_in">Math</span>.round(hsl[<span class="number">1</span>] * <span class="number">100</span>) &#125;</span>%, <span class="subst">$&#123; <span class="built_in">Math</span>.round(hsl[<span class="number">2</span>] * <span class="number">100</span>) &#125;</span>%, <span class="subst">$&#123; _alpha <span class="regexp">/ 100&#125;)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          break;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        case 'hsv':</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          this.value = `hsva($&#123; _hue &#125;, $&#123; Math.round(_saturation) &#125;%, $&#123; Math.round(_value) &#125;%, $&#123; _alpha /</span> <span class="number">100</span>&#125;</span>)`</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">const</span> &#123; r, g, b &#125; = hsv2rgb(_hue, _saturation, _value);</span><br><span class="line">          <span class="keyword">this</span>.value = <span class="string">`rgba(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123; _alpha <span class="regexp">/ 100 &#125;)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    &#125; else &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      switch (format) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        case 'hsl':</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          const hsl = hsv2hsl(_hue, _saturation /</span> <span class="number">100</span>, _value <span class="regexp">/ 100);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          this.value = `hsl($&#123; _hue &#125;, $&#123; Math.round(hsl[1] * 100) &#125;%, $&#123; Math.round(hsl[2] * 100) &#125;%)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          break;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        case 'hsv':</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          this.value = `hsv($&#123; _hue &#125;, $&#123; Math.round(_saturation) &#125;%, $&#123; Math.round(_value) &#125;%)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          break;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        case 'rgb':</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          const &#123; r, g, b &#125; = hsv2rgb(_hue, _saturation, _value);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          this.value = `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          break;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">        default:</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          this.value = toHex(hsv2rgb(_hue, _saturation, _value));</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;;</span></span></span></span><br></pre></td></tr></table></figure></p><p>其中，将工具方法和计算颜色的具体方法隐藏了，只看具体逻辑。<br>其实 color.js 主要是定义了一个 Color 类，简单说下其中一些方法的作用：</p><ul><li>set 用于设置 Color 中的变量。</li><li>get 用于获取 <code>_hue</code> <code>_saturation</code> <code>_value</code> <code>_alpha</code> 这四个值。</li><li>toRgb 方法将当前颜色的值（除了透明度）以 RGB 的形式返回。</li><li>fromString 方法将传入的颜色值解析成 HSV 格式，并赋值给 <code>_hue</code> <code>_saturation</code> <code>_value</code> 和 <code>_alpha</code>。</li><li>doOnChange 方法将会计算颜色值组成字符串传给 <code>value</code>。</li></ul><p>至此，Color 的大致功能就清晰了：<strong>解析传入的颜色值为 HSVA 格式分别表示为 <code>_hue</code> <code>_saturation</code> <code>_value</code> 和 <code>_alpha</code>，并且组合成颜色字符串传给 <code>value</code>。</strong><br>现在需要把获取到的颜色值传给显示结果的 span，那么就从 <code>main.vue</code> 的中显示颜色结果的 <code>&lt;span&gt;</code> 标签开始看起。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-color-picker__color-inner"</span> <span class="attr">:style</span>=<span class="string">"&#123; backgroundColor: displayedColor &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>背景色调用了 displayedColor 这个 computed 属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  computed: &#123;</span><br><span class="line">    displayedColor() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.value &amp;&amp; !<span class="keyword">this</span>.showPanelColor) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'transparent'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; r, g, b &#125; = <span class="keyword">this</span>.color.toRgb();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.showAlpha</span><br><span class="line">          ? <span class="string">`rgba(<span class="subst">$&#123; r &#125;</span>, <span class="subst">$&#123; g &#125;</span>, <span class="subst">$&#123; b &#125;</span>, <span class="subst">$&#123; <span class="keyword">this</span>.color.get(<span class="string">'alpha'</span>) <span class="regexp">/ 100 &#125;)`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">          : `rgb($&#123; r &#125;, $&#123; g &#125;, $&#123; b &#125;)`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    &#125;,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;</span></span></span></span><br></pre></td></tr></table></figure></p><p>这里的 <code>this.value</code> 是 props 中传入的属性。如果没有传入 <code>value</code> 并且没有选择过颜色，那么显示透明色；<br>而 <code>this.color</code> 是 Color 类的实例化对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="keyword">new</span> Color(&#123;</span><br><span class="line">   enableAlpha: <span class="keyword">this</span>.showAlpha,</span><br><span class="line">   format: <span class="keyword">this</span>.colorFormat</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>所以，就调用了我们上面所说的 <code>toRgb</code> 方法，最后返回颜色结果。<br>至此，实现了颜色的计算、获取和显示。</p><h2 id="颜色选择器如何获取和修改颜色值？"><a href="#颜色选择器如何获取和修改颜色值？" class="headerlink" title="颜色选择器如何获取和修改颜色值？"></a>颜色选择器如何获取和修改颜色值？</h2><p>在下拉菜单中 <code>hue-slider</code> 组件获取色调（哪种颜色）、<code>sv-panel</code> 获取具体的颜色值、<code>alpha-silder</code> 获取透明度。<br>这三个组件通过 props 获取父级组件传递的的 <code>color</code> 对象来显示颜色。如果颜色选择器的选择块移动后，通过修改 <code>color</code> 值来实现颜色的修改。</p><h2 id="颜色选择器的选择块如何实现"><a href="#颜色选择器的选择块如何实现" class="headerlink" title="颜色选择器的选择块如何实现"></a>颜色选择器的选择块如何实现</h2><p>选择颜色的过程其实就是选择器位移发生变化的过程。下面是作者参照 element 做的一个在有限范围内任意移动选择器的 demo：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        height: 500px;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        border: 1px solid black;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.drag</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 4px;</span></span><br><span class="line"><span class="undefined">        width: 4px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        border: 1px solid red;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">ref</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            top: cursorTop + 'px',</span></span></span><br><span class="line"><span class="tag"><span class="string">            left: cursorLeft + 'px'</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            cursorLeft: 0,</span></span><br><span class="line"><span class="undefined">            cursorTop: 0,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">            draggable(<span class="keyword">this</span>.$el, &#123;</span></span><br><span class="line"><span class="javascript">                drag: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.handleDrag(event);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                end: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.handleDrag(event);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.update();</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handleDrag(event) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> container = <span class="keyword">this</span>.$refs.container</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> el = <span class="keyword">this</span>.$el;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> rect = container.getBoundingClientRect();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> left = event.clientX - rect.left;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> top = event.clientY - rect.top;</span></span><br><span class="line"><span class="javascript">                left = <span class="built_in">Math</span>.max(<span class="number">0</span>, left);</span></span><br><span class="line"><span class="javascript">                left = <span class="built_in">Math</span>.min(left, rect.width - <span class="number">6</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                top = <span class="built_in">Math</span>.max(<span class="number">0</span>, top);</span></span><br><span class="line"><span class="javascript">                top = <span class="built_in">Math</span>.min(top, rect.height - <span class="number">6</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.cursorLeft = left;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.cursorTop = top;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> isDragging = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">draggable</span>(<span class="params">element, options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (Vue.prototype.$isServer) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> moveFn = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (options.drag) &#123;</span></span><br><span class="line"><span class="undefined">                options.drag(event);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> upFn = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, moveFn);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, upFn);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onselectstart = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.ondragstart = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            isDragging = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (options.end) &#123;</span></span><br><span class="line"><span class="undefined">                options.end(event);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        element.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (isDragging) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onselectstart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.ondragstart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, moveFn);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, upFn);</span></span><br><span class="line"><span class="javascript">            isDragging = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (options.start) &#123;</span></span><br><span class="line"><span class="undefined">                options.start(event);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>好吧，我知道代码太长了，要看效果请移步<a href="https://jsfiddle.net/VioletJack/ezttuvmf/1/" target="_blank" rel="noopener">此处</a>。<br>选择器的逻辑如下：</p><ul><li>根据 props 传入的颜色值初次计算选择器的位置。</li><li>拖动选择器，根据选择器位置、已知的 color 属性计算当前选择器位置的颜色结果。</li></ul><p>也就是说做一个选择器需要的就是<strong>一个可拖动的选择器</strong>和<strong>一套计算颜色的算法逻辑</strong>。比如在 <code>sv-silder</code> 中的算法逻辑如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算 cursor 位置</span></span><br><span class="line"><span class="keyword">this</span>.cursorLeft = saturation * width / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>.cursorTop = (<span class="number">100</span> - value) * height / <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 计算颜色</span></span><br><span class="line"><span class="keyword">this</span>.color.set(&#123;</span><br><span class="line">  saturation: left / rect.width * <span class="number">100</span>,</span><br><span class="line"> value: <span class="number">100</span> - top / rect.height * <span class="number">100</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>其他两个选择器原理也是类似的~</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至此，我对 color-picker 的一些疑惑都解开了，也写了一些 demo 来玩玩。对该组件有了大致的理解了~不得不感叹作者对于 CSS 和 Vue 的掌握真的非常熟练。学到了不少东西，感谢开源社区给我们提供了那么多好东西给我们使用和学习~<br>再下一篇文章中我想探索下其他一些有趣的 element 组件，敬请期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在 element ui 中最让我好奇的组件之一就是 color-picker 着色器组件。这里还是通过几个问题来学习一下如何实现着色器的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;源码地址&quot;&gt;&lt;a href=&quot;#源码地址&quot; class
      
    
    </summary>
    
    
      <category term="element源码学习" scheme="https://violetjack.github.io/tags/element%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>element 源码学习三 —— select 组件源码学习</title>
    <link href="https://violetjack.github.io/2018/03/20/element-code-03/"/>
    <id>https://violetjack.github.io/2018/03/20/element-code-03/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-03-21T05:32:55.813Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>select 选择器是个比较复杂的组件了，通过不同的配置可以有多种用法。有必要单独学习学习。</p></blockquote><h1 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h1><p>以下是 select 的 template 结构，已去掉了一部分代码便于查看整体结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"multiple"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"tags"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- collapse tags 多选时是否将选中值按文字的形式展示 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"collapseTags &amp;&amp; selected.length"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">disable-transitions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-select__tags-text"</span>&gt;</span>&#123;&#123; selected[0].currentLabel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">"selected.length &gt; 1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">disable-transitions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-select__tags-text"</span>&gt;</span>+ &#123;&#123; selected.length - 1 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 多选，多个 el-tag 组成 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition-group</span> @<span class="attr">after-leave</span>=<span class="string">"resetInputHeight"</span> <span class="attr">v-if</span>=<span class="string">"!collapseTags"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"item in selected"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"getValueKey(item)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">disable-transitions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-select__tags-text"</span>&gt;</span>&#123;&#123; item.currentLabel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可输入文本的查询框 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"query"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"filterable"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示结果框 read-only --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"reference"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"selectedLabel"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户显示清空和向下箭头 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"suffix"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉菜单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select-menu</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"popper"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">"visible &amp;&amp; emptyText !== false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-scrollbar</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tag</span>=<span class="string">"ul"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">wrap-class</span>=<span class="string">"el-select-dropdown__wrap"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">view-class</span>=<span class="string">"el-select-dropdown__list"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">"scrollbar"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-show</span>=<span class="string">"options.length &gt; 0 &amp;&amp; !loading"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 默认项（创建条目） --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">"query"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">created</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">"showNewOption"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 插槽，用于放 option 和 option-group --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- loading 加载中文本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">"emptyText &amp;&amp;</span></span></span><br><span class="line"><span class="tag"><span class="string">            (!allowCreate || loading || (allowCreate &amp;&amp; options.length === 0 ))"</span>&gt;</span></span><br><span class="line">          &#123;&#123; emptyText &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>具体都写在注释中了~从上面内容中可以看到，select 考虑了很多情况，如单选、多选、搜索、下拉框、图标等等。并且使用 slot 插槽来获取开发者传递的 option 和 option-group 组件。<br>可以发现在 select 中使用了多个外部组件，也就是说 el-select 是由多个组件组装成的一个复杂组件~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> ElInput <span class="keyword">from</span> <span class="string">'element-ui/packages/input'</span>;</span><br><span class="line"><span class="keyword">import</span> ElSelectMenu <span class="keyword">from</span> <span class="string">'./select-dropdown.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElOption <span class="keyword">from</span> <span class="string">'./option.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElTag <span class="keyword">from</span> <span class="string">'element-ui/packages/tag'</span>;</span><br><span class="line"><span class="keyword">import</span> ElScrollbar <span class="keyword">from</span> <span class="string">'element-ui/packages/scrollbar'</span>;</span><br></pre></td></tr></table></figure><h1 id="select-要实现的功能"><a href="#select-要实现的功能" class="headerlink" title="select 要实现的功能"></a>select 要实现的功能</h1><p>参照<a href="http://element-cn.eleme.io/#/zh-CN/component/select" target="_blank" rel="noopener">官方文档</a>的内容罗列出 select 的一些功能，后面跟上我对功能实现的理解：</p><ul><li>单选 —— 点击 <code>select</code> 弹出下拉框，点击 <code>option</code> 完成赋值。</li><li>禁用 —— <code>select</code> 和 <code>option</code> 都有 <code>disabled</code> 选项用于禁用。</li><li>清空 —— 如果 <code>select</code> 中有内容，鼠标悬浮在 <code>input</code> 上显示删除图标，点击执行删除操作。</li><li>多选（平铺展示和数字显示数量两种方式） —— 参数 model 变为数组，点击下拉菜单中的选项添加或删除数组中的值。</li><li>自定义模板 —— option 中定义了 <code>slot</code> 插槽，默认加了 <code>span</code> 显示内容。可以修改 <code>el-option</code> 标签中内容来自定义模板。</li><li>分组 —— 使用 option-group 组件来实现分组效果。</li><li>搜索 —— 通过正则匹配搜索项，不符合搜索项的控制 v-show 隐藏</li><li>创建条目 —— 在 <code>select</code> 中添加额外 <code>option</code>（一般 <code>option</code> 都是通过 <code>slot</code> 插槽传递的），如允许创建条目，则显示这条 <code>option</code> ,<code>option</code> 的内容显示为查询内容。</li></ul><h1 id="从几个问题去看源码逻辑"><a href="#从几个问题去看源码逻辑" class="headerlink" title="从几个问题去看源码逻辑"></a>从几个问题去看源码逻辑</h1><h2 id="如何实现基本单选功能？"><a href="#如何实现基本单选功能？" class="headerlink" title="如何实现基本单选功能？"></a>如何实现基本单选功能？</h2><p>分析下基本功能：点击 input，显示下拉菜单；鼠标选中一项 option，隐藏下拉菜单；input 中显示选中的结果。<br>所以这里看下显示内容的 input 都有些什么事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@focus=&quot;handleFocus&quot; // 处理 焦点</span><br><span class="line">@blur=&quot;handleBlur&quot; // 处理 焦点 离开</span><br><span class="line">@keyup.native=&quot;debouncedOnInputChange&quot;</span><br><span class="line">@keydown.native.down.stop.prevent=&quot;navigateOptions(&apos;next&apos;)&quot; // 向下按键，移动到下一个 option</span><br><span class="line">@keydown.native.up.stop.prevent=&quot;navigateOptions(&apos;prev&apos;)&quot; // 向上按键，移动到上一个 option</span><br><span class="line">@keydown.native.enter.prevent=&quot;selectOption&quot; // 回车按键，选中option</span><br><span class="line">@keydown.native.esc.stop.prevent=&quot;visible = false&quot;  // esc按键，隐藏下拉框</span><br><span class="line">@keydown.native.tab=&quot;visible = false&quot; // tab按键，跳转到下一个文本框，隐藏下拉框</span><br><span class="line">@paste.native=&quot;debouncedOnInputChange&quot; // </span><br><span class="line">@mouseenter.native=&quot;inputHovering = true&quot; // mouse enter 事件</span><br><span class="line">@mouseleave.native=&quot;inputHovering = false&quot; // mouse leave 事件</span><br></pre></td></tr></table></figure></p><p>从上面的这些事件中可以知道：选中方法为 <code>selectOption</code>（从英文字面意思都能知道~）；显示下拉框通过 <code>visible</code> 属性控制；以及其他按键的一些功能。这里主要主要看看 <code>selectOption</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selectOption() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.visible) &#123;</span><br><span class="line">    <span class="keyword">this</span>.toggleMenu();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options[<span class="keyword">this</span>.hoverIndex]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleOptionSelect(<span class="keyword">this</span>.options[<span class="keyword">this</span>.hoverIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>逻辑就是，如果下拉框未显示则执行 <code>toggleMenu</code> 方法触发下拉框，如果已显示下拉框则处理选择 option 的过程。看看这个 <code>toggleMenu</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toggleMenu() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.selectDisabled) &#123;</span><br><span class="line">    <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.visible) &#123;</span><br><span class="line">      (<span class="keyword">this</span>.$refs.input || <span class="keyword">this</span>.$refs.reference).focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>其实就是控制下拉菜单的显示和隐藏。如果显示的时候定焦在 <code>input</code> 和 <code>reference</code> 上，它们其实就是单选和多选的 input 框（多选 input 定义了 <code>ref=&quot;input&quot;</code> 单选 input 定义了 <code>ref=&quot;reference&quot;</code>）。<br>至此，下拉菜单的显示与隐藏解决了。然后我们去找 option 点击事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理选项选中事件</span></span><br><span class="line">handleOptionSelect(option) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">    <span class="comment">// 多选</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.value.slice();</span><br><span class="line">    <span class="keyword">const</span> optionIndex = <span class="keyword">this</span>.getValueIndex(value, option.value);</span><br><span class="line">    <span class="keyword">if</span> (optionIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 已选中，从数组中移除</span></span><br><span class="line">      value.splice(optionIndex, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.multipleLimit &lt;= <span class="number">0</span> || value.length &lt; <span class="keyword">this</span>.multipleLimit) &#123;</span><br><span class="line">      <span class="comment">// 未选中，传入数组</span></span><br><span class="line">      value.push(option.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, value);</span><br><span class="line">    <span class="keyword">this</span>.emitChange(value);</span><br><span class="line">    <span class="keyword">if</span> (option.created) &#123;</span><br><span class="line">      <span class="keyword">this</span>.query = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">this</span>.handleQueryChange(<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">this</span>.inputLength = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filterable) <span class="keyword">this</span>.$refs.input.focus();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 单选</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, option.value);</span><br><span class="line">    <span class="keyword">this</span>.emitChange(option.value);</span><br><span class="line">    <span class="keyword">this</span>.visible = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 渲染完成后</span></span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.scrollToOption(option);</span><br><span class="line">    <span class="keyword">this</span>.setSoftFocus();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>处理选中事件考虑了单选和多选两种情况。<br>如果是多选，检索选中 option 是否在 <code>value</code> 数组中，有则移除、无则添加到 <code>value</code> 数组中。然后 <code>$emit</code> 触发 <code>input</code> 事件，执行 <code>emitChange</code> 方法。如果 option 的 <code>created</code> 为 true，则清空查询内容。<br>如果是单选，<code>$emit</code> 触发 <code>input</code> 事件将选中值传递给父组件，执行 <code>emitChange</code> 方法，最后隐藏下拉菜单。<br>最后使用 <code>$nextTick</code> 方法处理下界面。<br>到这里，选中 option 后下拉菜单消失问题解决，只剩下显示结果到 input 中了。这个显示结果的过程是通过对 <code>visible</code> 属性的监听来完成的（一开始以为在 <code>emitChange</code> 结果发现那只是触发改变事件的）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">visible(val) &#123;</span><br><span class="line">  <span class="comment">// 在下拉菜单隐藏时</span></span><br><span class="line">  <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">    <span class="comment">// 处理图标</span></span><br><span class="line">    <span class="keyword">this</span>.handleIconHide();</span><br><span class="line">    <span class="comment">// 广播下拉菜单销毁事件</span></span><br><span class="line">    <span class="keyword">this</span>.broadcast(<span class="string">'ElSelectDropdown'</span>, <span class="string">'destroyPopper'</span>);</span><br><span class="line">    <span class="comment">// 取消焦点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.input) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.input.blur();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重置过程</span></span><br><span class="line">    <span class="keyword">this</span>.query = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.previousQuery = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.selectedLabel = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.inputLength = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.resetHoverIndex();</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.input &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.$refs.input.value === <span class="string">''</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.selected.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPlaceholder = <span class="keyword">this</span>.cachedPlaceHolder;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 如果不是多选，进行赋值现在 input 中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">      <span class="comment">// selected 为当前选中的 option</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.selected) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.filterable &amp;&amp; <span class="keyword">this</span>.allowCreate &amp;&amp;</span><br><span class="line">          <span class="keyword">this</span>.createdSelected &amp;&amp; <span class="keyword">this</span>.createdOption) &#123;</span><br><span class="line">          <span class="keyword">this</span>.selectedLabel = <span class="keyword">this</span>.createdLabel;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.selectedLabel = <span class="keyword">this</span>.selected.currentLabel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.filterable) <span class="keyword">this</span>.query = <span class="keyword">this</span>.selectedLabel;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 下拉菜单显示</span></span><br><span class="line">    <span class="comment">// 处理图片显示</span></span><br><span class="line">    <span class="keyword">this</span>.handleIconShow();</span><br><span class="line">    <span class="comment">// 广播下拉菜单更新事件</span></span><br><span class="line">    <span class="keyword">this</span>.broadcast(<span class="string">'ElSelectDropdown'</span>, <span class="string">'updatePopper'</span>);</span><br><span class="line">    <span class="comment">// 处理查询事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filterable) &#123;</span><br><span class="line">      <span class="keyword">this</span>.query = <span class="keyword">this</span>.remote ? <span class="string">''</span> : <span class="keyword">this</span>.selectedLabel;</span><br><span class="line">      <span class="keyword">this</span>.handleQueryChange(<span class="keyword">this</span>.query);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs.input.focus();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.remote) &#123;</span><br><span class="line">          <span class="keyword">this</span>.broadcast(<span class="string">'ElOption'</span>, <span class="string">'queryChange'</span>, <span class="string">''</span>);</span><br><span class="line">          <span class="keyword">this</span>.broadcast(<span class="string">'ElOptionGroup'</span>, <span class="string">'queryChange'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.broadcast(<span class="string">'ElInput'</span>, <span class="string">'inputSelect'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发 visible-change 事件</span></span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'visible-change'</span>, val);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>从 template 中可知，显示结果的 input 绑定的 <code>v-model</code> 是 <code>selectedLabel</code>，而 select 是通过获取下拉菜单的显示与隐藏事件来执行结果显示部分的功能的。最终 <code>selectedLabel</code> 获得到了选中的 option 的 <code>label</code> 内容。<br>这样，从 <strong>点击-单选-显示</strong> 的流程就实现了。还是很简单的。</p><h2 id="如何实现多选，多选选中后-option-右侧的勾以及-input-中的-tag-如何显示？"><a href="#如何实现多选，多选选中后-option-右侧的勾以及-input-中的-tag-如何显示？" class="headerlink" title="如何实现多选，多选选中后 option 右侧的勾以及 input 中的 tag 如何显示？"></a>如何实现多选，多选选中后 option 右侧的勾以及 input 中的 tag 如何显示？</h2><p>关于多选，在刚才讲单选的时候提及了一些了。所以有些代码就不贴出浪费篇幅了。具体逻辑如下：<br>先点击 input 执行 <code>selectOption</code> 方法显示下拉菜单，然后点击下拉菜单中的 option，执行 <code>handleOptionSelect</code> 方法将 option 的值都传给 <code>value</code> 数组。此时 <code>value</code> 数组改变，触发 watch 中的 <code>value</code> 变化监听方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">value(val) &#123;</span><br><span class="line">  <span class="comment">// 多选</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resetInputHeight();</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span> || (<span class="keyword">this</span>.$refs.input &amp;&amp; <span class="keyword">this</span>.query !== <span class="string">''</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentPlaceholder = <span class="string">''</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentPlaceholder = <span class="keyword">this</span>.cachedPlaceHolder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filterable &amp;&amp; !<span class="keyword">this</span>.reserveKeyword) &#123;</span><br><span class="line">      <span class="keyword">this</span>.query = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">this</span>.handleQueryChange(<span class="keyword">this</span>.query);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setSelected();</span><br><span class="line">  <span class="comment">// 非多选查询</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.filterable &amp;&amp; !<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputLength = <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>以上代码关键是执行了 <code>setSelected</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置选择项</span></span><br><span class="line">setSelected() &#123;</span><br><span class="line">  <span class="comment">// 单选</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.multiple) &#123;</span><br><span class="line">    <span class="keyword">let</span> option = <span class="keyword">this</span>.getOption(<span class="keyword">this</span>.value);</span><br><span class="line">    <span class="comment">// created 是指创建出来的 option，这里指 allow-create 创建的 option 项</span></span><br><span class="line">    <span class="keyword">if</span> (option.created) &#123;</span><br><span class="line">      <span class="keyword">this</span>.createdLabel = option.currentLabel;</span><br><span class="line">      <span class="keyword">this</span>.createdSelected = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.createdSelected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.selectedLabel = option.currentLabel;</span><br><span class="line">    <span class="keyword">this</span>.selected = option;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filterable) <span class="keyword">this</span>.query = <span class="keyword">this</span>.selectedLabel;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历获取 option</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.value)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      result.push(<span class="keyword">this</span>.getOption(value));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 赋值</span></span><br><span class="line">  <span class="keyword">this</span>.selected = result;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 重置 input 高度</span></span><br><span class="line">    <span class="keyword">this</span>.resetInputHeight();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>可以看到如果是多选，那么将 <code>value</code> 数组遍历，获取相应的 <code>option</code> 值，传给 <code>selected</code>。而多选界面其实就是对于这个 <code>selected</code> 的 v-for 遍历显示。显示的标签使用的是 element 的另外一个组件 <a href="http://element-cn.eleme.io/#/zh-CN/component/tag" target="_blank" rel="noopener">el-tag</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"item in selected"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"getValueKey(item)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-select__tags-text"</span>&gt;</span>&#123;&#123; item.currentLabel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里顺便提一句： option 的 <code>created</code> 参数用于标识是 <code>select</code> 组件中创建的那个用于创建条目的 <code>option</code>。而从 slot 插槽传入的 option 是不用传 <code>created</code> 参数的。</p><h2 id="如何实现搜索功能？"><a href="#如何实现搜索功能？" class="headerlink" title="如何实现搜索功能？"></a>如何实现搜索功能？</h2><p>从 template 中可知，select 有两个 input，一个用于显示结果，一个则用于查询搜索。我们来看下搜索内容的 input 文本框如何实现搜索功能：<br>在 input 中有 <code>@input=&quot;e =&gt; handleQueryChange(e.target.value)&quot;</code>这么一段代码。所以，handleQueryChange 方法就是关键所在了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理查询改变</span></span><br><span class="line">handleQueryChange(val) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.previousQuery === val) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">this</span>.previousQuery === <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    (<span class="keyword">typeof</span> <span class="keyword">this</span>.filterMethod === <span class="string">'function'</span> || <span class="keyword">typeof</span> <span class="keyword">this</span>.remoteMethod === <span class="string">'function'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.previousQuery = val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.previousQuery = val;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.visible) <span class="keyword">this</span>.broadcast(<span class="string">'ElSelectDropdown'</span>, <span class="string">'updatePopper'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.hoverIndex = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.multiple &amp;&amp; <span class="keyword">this</span>.filterable) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">this</span>.$refs.input.value.length * <span class="number">15</span> + <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.inputLength = <span class="keyword">this</span>.collapseTags ? <span class="built_in">Math</span>.min(<span class="number">50</span>, length) : length;</span><br><span class="line">    <span class="keyword">this</span>.managePlaceholder();</span><br><span class="line">    <span class="keyword">this</span>.resetInputHeight();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.remote &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>.remoteMethod === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hoverIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">this</span>.remoteMethod(val);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.filterMethod === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.filterMethod(val);</span><br><span class="line">    <span class="keyword">this</span>.broadcast(<span class="string">'ElOptionGroup'</span>, <span class="string">'queryChange'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.filteredOptionsCount = <span class="keyword">this</span>.optionsCount;</span><br><span class="line">    <span class="keyword">this</span>.broadcast(<span class="string">'ElOption'</span>, <span class="string">'queryChange'</span>, val);</span><br><span class="line">    <span class="keyword">this</span>.broadcast(<span class="string">'ElOptionGroup'</span>, <span class="string">'queryChange'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.defaultFirstOption &amp;&amp; (<span class="keyword">this</span>.filterable || <span class="keyword">this</span>.remote) &amp;&amp; <span class="keyword">this</span>.filteredOptionsCount) &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkDefaultFirstOption();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>其中，<code>remoteMethod</code> 和 <code>filterMethod</code> 方法是自定义的远程查询和本地过滤方法。如果没有自定义的这两个方法，则会触发广播给 <code>option</code> 和 <code>option-group</code> 组件 <code>queryChange</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// option.vue</span></span><br><span class="line">queryChange(query) &#123;</span><br><span class="line">  <span class="keyword">let</span> parsedQuery = <span class="built_in">String</span>(query).replace(<span class="regexp">/(\^|\(|\)|\[|\]|\$|\*|\+|\.|\?|\\|\&#123;|\&#125;|\|)/g</span>, <span class="string">'\\$1'</span>);</span><br><span class="line">  <span class="comment">// 匹配字符决定是否显示当前option</span></span><br><span class="line">  <span class="keyword">this</span>.visible = <span class="keyword">new</span> <span class="built_in">RegExp</span>(parsedQuery, <span class="string">'i'</span>).test(<span class="keyword">this</span>.currentLabel) || <span class="keyword">this</span>.created;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.visible) &#123;</span><br><span class="line">    <span class="keyword">this</span>.select.filteredOptionsCount--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>option 中通过正则匹配决定是否隐藏当前 option 组件，而 option-group 通过获取子组件，判断如果有子组件是可见的则显示，否则隐藏。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// option-group.vue</span></span><br><span class="line">queryChange() &#123;</span><br><span class="line">  <span class="keyword">this</span>.visible = <span class="keyword">this</span>.$children &amp;&amp;</span><br><span class="line">    <span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.$children) &amp;&amp;</span><br><span class="line">    <span class="keyword">this</span>.$children.some(<span class="function"><span class="params">option</span> =&gt;</span> option.visible === <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，其实 option 和 option-group 在搜索的时候只是隐藏掉了不匹配的内容而已。</p><h2 id="下拉菜单的显示和隐藏效果是如何实现的？下拉菜单本质是什么东西？"><a href="#下拉菜单的显示和隐藏效果是如何实现的？下拉菜单本质是什么东西？" class="headerlink" title="下拉菜单的显示和隐藏效果是如何实现的？下拉菜单本质是什么东西？"></a>下拉菜单的显示和隐藏效果是如何实现的？下拉菜单本质是什么东西？</h2><p>下拉菜单是通过 <a href="https://cn.vuejs.org/v2/api/#transition" target="_blank" rel="noopener">transition</a> 来实现过渡动画的。<br>下拉菜单 <code>el-select-menu</code> 本质上就是一个 div 容器而已。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"el-select-dropdown el-popper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:class</span>=<span class="string">"[&#123; 'is-multiple': $parent.multiple &#125;, popperClass]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"&#123; minWidth: minWidth &#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另外，在代码中经常出现的通知下拉菜单显示和隐藏的广播在 <code>el-select-menu</code> 的 <code>mounted</code> 方法中接收使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.referenceElm = <span class="keyword">this</span>.$parent.$refs.reference.$el;</span><br><span class="line">  <span class="keyword">this</span>.$parent.popperElm = <span class="keyword">this</span>.popperElm = <span class="keyword">this</span>.$el;</span><br><span class="line">  <span class="keyword">this</span>.$on(<span class="string">'updatePopper'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$parent.visible) <span class="keyword">this</span>.updatePopper();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.$on(<span class="string">'destroyPopper'</span>, <span class="keyword">this</span>.destroyPopper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="创建条目如何实现？"><a href="#创建条目如何实现？" class="headerlink" title="创建条目如何实现？"></a>创建条目如何实现？</h2><p>上文中提到过，就是在 select 中默认藏了一条 option，当创建条目时显示这个 option 并显示创建内容。点击这个 option 就可以把创建的内容添加到显示结果的 input 上了。</p><h2 id="如何展示远程数据？"><a href="#如何展示远程数据？" class="headerlink" title="如何展示远程数据？"></a>如何展示远程数据？</h2><p>通过为 select 设置 <code>remote</code> 和 <code>remote-method</code> 属性来获取远程数据。<code>remote-method</code> 方法最终将数据赋值给 option 的 v-model 绑定数组数据将结果显示出来即可。</p><h2 id="清空按钮显示和点击事件呢？"><a href="#清空按钮显示和点击事件呢？" class="headerlink" title="清空按钮显示和点击事件呢？"></a>清空按钮显示和点击事件呢？</h2><p>在显示结果的 input 文本框中有一个 <code>&lt;i&gt;</code> 标签，用于显示图标。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户显示清空和向下箭头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"suffix"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:class</span>=<span class="string">"['el-select__caret', 'el-input__icon', 'el-icon-' + iconClass]"</span></span></span><br><span class="line"><span class="tag"> @<span class="attr">click</span>=<span class="string">"handleIconClick"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终 input 右侧显示什么图标由 <code>iconClass</code> 决定，其中 <code>circle-close</code> 就是圆形查查，即清空按钮~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iconClass() &#123;</span><br><span class="line">  <span class="keyword">let</span> criteria = <span class="keyword">this</span>.clearable &amp;&amp;</span><br><span class="line">    !<span class="keyword">this</span>.selectDisabled &amp;&amp;</span><br><span class="line">    <span class="keyword">this</span>.inputHovering &amp;&amp;</span><br><span class="line">    !<span class="keyword">this</span>.multiple &amp;&amp;</span><br><span class="line">    <span class="keyword">this</span>.value !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">this</span>.value !== <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">return</span> criteria ? <span class="string">'circle-close is-show-close'</span> : (<span class="keyword">this</span>.remote &amp;&amp; <span class="keyword">this</span>.filterable ? <span class="string">''</span> : <span class="string">'arrow-up'</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p><code>handleIconClick</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理图标点击事件（删除按钮）</span></span><br><span class="line">handleIconClick(event) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.iconClass.indexOf(<span class="string">'circle-close'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.deleteSelected(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 删除选中</span></span><br><span class="line">deleteSelected(event) &#123;</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">this</span>.emitChange(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">this</span>.visible = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'clear'</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>最终，清空只是将文本清空掉并且关闭下拉菜单。其实当再次打开 select 的时候，option 还是选中在之前选中的那个位置，即 <code>HoverIndex</code> 没有变为 -1，不知道算不算 bug。</p><h2 id="option-的自定义模板是如何实现的？"><a href="#option-的自定义模板是如何实现的？" class="headerlink" title="option 的自定义模板是如何实现的？"></a>option 的自定义模板是如何实现的？</h2><p>很简单，使用了 slot 插槽。并且在 slot 中定义了默认显示方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; currentLabel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>第一次尝试用问题取代主题来写博客，这样看着中心是不是更明确一些？<br>最后，说下看完 select 组件的感受：</p><ul><li>element 通过自定义的广播方法进行父子组件间的通信。（好像以前Vue也有这个功能，后来弃用了。）</li><li>再复杂的组件都是由一个个基础的组件拼起来的。</li><li>select 功能还是挺复杂的，加上子组件 1000+ 行代码了。本文只是讲了基本功能的实现，值得深入学习。</li><li>学习了高手写组件的方式和写法~之后在自己写组件的时候可以参考。</li><li>方法、参数命名非常规范，一眼就能看懂具体用法。</li><li>知道了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">Array.some()</a> 方法~</li></ul><p>好吧，说好了一天写出来，结果断断续续花了三天才完成。有点高估自己能力啦~<br>说下之后的Vue实验室博客计划：计划再找两个复杂的 element 组件来学习，最后写一篇总结博客。然后试着自己去创建几个 UI 组件，学以致用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;select 选择器是个比较复杂的组件了，通过不同的配置可以有多种用法。有必要单独学习学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;整体结构&quot;&gt;&lt;a href=&quot;#整体结构&quot; class=&quot;headerlink&quot; title=&quot;整体结
      
    
    </summary>
    
    
      <category term="element源码学习" scheme="https://violetjack.github.io/tags/element%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>element 源码学习（番外篇） —— SASS 五分钟快速入门</title>
    <link href="https://violetjack.github.io/2018/03/14/element-code-extra/"/>
    <id>https://violetjack.github.io/2018/03/14/element-code-extra/</id>
    <published>2018-03-13T16:00:00.000Z</published>
    <updated>2018-03-21T05:33:03.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这算是 element 源码学习的番外篇，因为 element 中使用了大量 sass 来写样式。而 UI 框架的核心其实就是样式。所以，抽空把 sass 学了一遍，写了些小 demo 实践，总结成此文。</p></blockquote><h1 id="SASS-安装和调试"><a href="#SASS-安装和调试" class="headerlink" title="SASS 安装和调试"></a>SASS 安装和调试</h1><p>简单说下 sass 如何安装和编译调试。<br>参照<a href="http://sass-lang.com/install" target="_blank" rel="noopener">官网</a>，需要使用 gem 来安装 sass。如果是windows用户没有 gem 需要先安装 <a href="https://rubyinstaller.org/" target="_blank" rel="noopener">Ruby</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gem install sass</span><br></pre></td></tr></table></figure></p><p>如果有权限问题，需要加上 <code>sudo</code> 。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo gem install sass</span><br></pre></td></tr></table></figure></p><p>最后，通过查询 sass 版本号验证是否安装成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sass -v</span><br></pre></td></tr></table></figure></p><p>编译命令很简单，在项目目录下编译选中 <code>.scss</code>、<code>.sass</code> 文件即可。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sass hello.scss hello.css</span><br></pre></td></tr></table></figure></p><p>如果是学习 sass 这一个命令足矣，其他命令可参考<a href="https://www.w3cplus.com/sassguide/compile.html" target="_blank" rel="noopener">sass 编译</a></p><h1 id="语法简述"><a href="#语法简述" class="headerlink" title="语法简述"></a>语法简述</h1><p>下面我用自己对 sass 语法的理解，配合上 demo 快速过一遍 sass 基础语法。</p><h2 id="sass-文件和-scss-文件区别"><a href="#sass-文件和-scss-文件区别" class="headerlink" title="sass 文件和 scss 文件区别"></a>sass 文件和 scss 文件区别</h2><p>两者其实都是 sass 可以识别的文件，唯一不同点是 <code>.sass</code> 文件不使用大括号和分号。如下~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// .scss</span><br><span class="line">$default-color: #FFAACC;</span><br><span class="line">.selected &#123;</span><br><span class="line">    color: $default-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// .sass</span><br><span class="line">$default-color: #FFAACC</span><br><span class="line">.selected </span><br><span class="line">    color: $default-color</span><br><span class="line"></span><br><span class="line">// .css</span><br><span class="line">.selected &#123;</span><br><span class="line">  color: #FFAACC; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>官方文档推荐使用 <code>.scs</code>s 文件类型写法，避免 <code>.sass</code> 文件的严格格式要求报错。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>通过 <code>$</code> 符号来定义 sass 变量，变量在样式内外都可定义，用于各个样式中。定义的变量不会在编译后的 CSS 文件中显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$default-color: #FFAACC;</span><br><span class="line">$border-color: #AAFFCC;</span><br><span class="line">$default-border:  1px solid $border-color;</span><br><span class="line">$extra-color: #BBDD00;</span><br><span class="line"></span><br><span class="line">.selected &#123;</span><br><span class="line">    $scoped-width: 60px;</span><br><span class="line">    width: $scoped-width;</span><br><span class="line">    color: $default-color;</span><br><span class="line">    border: $default-border;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFAACC</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#AAFFCC</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>另外注意的一个点是在定义变量时使用的 <code>-</code> 和 <code>_</code> 的效果是一样的。即 <code>$border-color</code> 和 <code>$border_color</code> 指向的是同一个变量。</p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>为了避免一些代码的重复，引入了代码的嵌套。看一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.selected &#123;</span><br><span class="line">    color: #FFAA22;</span><br><span class="line">    h1 &#123;</span><br><span class="line">        color: #FFDD77</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 20px;</span><br><span class="line">        span &#123;</span><br><span class="line">            color: #012DD6;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FAFAFA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到的结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFAA22</span>; &#125;</span><br><span class="line">  <span class="selector-class">.selected</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFDD77</span>; &#125;</span><br><span class="line">  <span class="selector-class">.selected</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>; &#125;</span><br><span class="line">    <span class="selector-class">.selected</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#012DD6</span>; &#125;</span><br><span class="line">  <span class="selector-class">.selected</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FAFAFA</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>从中可以看到，嵌套可以将需要重复写选择器的过程嵌套到一个表达式中了。</p><h3 id="父选择器标识符-amp"><a href="#父选择器标识符-amp" class="headerlink" title="父选择器标识符 &amp;"></a>父选择器标识符 &amp;</h3><p>从上面的例子中看到有这么一段 <code>&amp;:hover</code> 而在编译结果中得到的结果是 <code>.selected:hover</code> ，其实 <code>&amp;</code> 标识符就代表了父级选择器。就这么简单，不理解的时候把父级选择题替换 <code>&amp;</code> 理解下就简单了。</p><h3 id="嵌套css"><a href="#嵌套css" class="headerlink" title="嵌套css"></a>嵌套css</h3><p>sass 中的嵌套是可以多个样式同时嵌套的。 用法见demo。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container .content &#123;</span><br><span class="line">    h1, h2, h3 &#123;margin-bottom: .8em&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译结果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.content</span> <span class="selector-tag">h1</span>, <span class="selector-class">.container</span> <span class="selector-class">.content</span> <span class="selector-tag">h2</span>, <span class="selector-class">.container</span> <span class="selector-class">.content</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: .<span class="number">8em</span>; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="子组合选择器和同层选择器"><a href="#子组合选择器和同层选择器" class="headerlink" title="子组合选择器和同层选择器"></a>子组合选择器和同层选择器</h3><p>关于 <code>&gt;</code>、<code>+</code> 和 <code>~</code> 这三个选择器，是 CSS3 中就有的。在 SASS 中同样适用。<br>简单说下三个选择器用途（参考<a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener"> CSS 选择器</a>）：</p><ul><li><code>div&gt;p</code> 选取父元素是 <div> 元素的每个 <p> 元素</p></div></li><li><code>div+p</code> 选择 <div> 元素之后紧跟的每个 <p> 元素</p></div></li><li><code>p~ul</code> 选择前面有 <p> 元素的每个 <ul> 元素。</ul></p></li></ul><p>看个官网的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">article &#123;</span><br><span class="line">    ~ article &#123; border-top: 1px dashed #ccc &#125;</span><br><span class="line">    &gt; section &#123; background: #eee &#125;</span><br><span class="line">    dl &gt; &#123;</span><br><span class="line">      dt &#123; color: #333 &#125;</span><br><span class="line">      dd &#123; color: #555 &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nav + &amp; &#123; margin-top: 0 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>动手编译出的结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>; &#125;</span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><p>属性嵌套说白了就是把 <code>margin-bottom</code> 这类有 <code>-</code> 符号隔开的属性拆分开来便于查看和编写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nav &#123;</span><br><span class="line">    border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    width: 1px;</span><br><span class="line">    color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这里把 <code>border-style</code> 等属性进行了拆分，结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>sass 提供了 sass 文件导入功能。可以做一些基础样式的复用。用法很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// var.scss</span><br><span class="line">$default-color: #AABBCC;</span><br><span class="line"></span><br><span class="line">.focused &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    margin: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// h1.scss</span><br><span class="line">h1 &#123;</span><br><span class="line">    color: #BBDDFF;</span><br><span class="line">    margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// demo.scss</span><br><span class="line">@import &quot;var01&quot;;</span><br><span class="line"></span><br><span class="line">$default-color: #FFAADD !default;</span><br><span class="line"></span><br><span class="line">.selected &#123;</span><br><span class="line">    color: $default-color;</span><br><span class="line">    @import &quot;h1&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码中将 <code>var.scss</code> 和 <code>h1.scss</code> 两个文件导入到了 <code>demo.scss</code> 中，最终生成结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.focused</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#AABBCC</span>; &#125;</span><br><span class="line">  <span class="selector-class">.selected</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#BBDDFF</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>从结果来说说导入的几个注意点：</p><ul><li>导入文件使用 <code>@import</code> 表达式来导入，导入可以是外部导入也可是嵌套导入。上面例子中 <code>var</code> 是外部导入，而 <code>h1</code> 是嵌套导入的。</li><li><code>$default-color: #FFAADD !default;</code> 中的 <code>!default</code> 是定义变量默认值的方式，如果导入文件中有同样的值优先使用导入的值，如果导入文件中没有这个值，使用默认值。</li><li>sass 中的 <code>@import</code> 与 css 中的 <code>@import</code> 不同，sass 中是编译的时候就直接导入生成 css 文件了，而 css 中，只有执行到 <code>@import</code> 时，浏览器才会去下载 css 文件，会导致页面加载变慢。</li></ul><h2 id="静默注释"><a href="#静默注释" class="headerlink" title="静默注释"></a>静默注释</h2><p>就是在 sass 是否保留注释内容的语法。保留注释的方式为：<strong>在CSS语法允许的地方，以 <code>/*...*/</code> 的方式写注释就能在生成的 css 文件中看到。</strong>再来看一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 不显示</span><br><span class="line">/* 显示 */</span><br><span class="line"></span><br><span class="line">.selected &#123;</span><br><span class="line">    //不显示</span><br><span class="line">    /* 显示 */</span><br><span class="line">    color: #FFAADD; // 不显示</span><br><span class="line">    margin:/* 不显示 */ 10px; /* 显示 */</span><br><span class="line">    /* 显示 */border: 1px dashed /* 不显示 */ #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不显示</span><br><span class="line">/* 显示 */</span><br></pre></td></tr></table></figure></p><p>编译结果正如注释所预测的。</p><h2 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h2><p>混合器在 element 的样式表中用的非常多，是个很强大的功能。混合器以 <code>@mixin</code> 来导出混合内容，使用 <code>@include</code> 来导入混合内容。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>我的理解是：<code>@mixin</code> 类似定义变量一样定义个混合器（编译的时候不显示 <code>@mixin</code> 的内容），<code>@include</code> 获取混合器来替换 <code>@include xxxx</code> 的这行内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// mixin.scss</span><br><span class="line">@mixin rounded-corners &#123;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.name &#123;</span><br><span class="line">    span &#123;</span><br><span class="line">        color: #FFAADD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// include.scss</span><br><span class="line">@import &quot;mixin&quot;;</span><br><span class="line"></span><br><span class="line">.notice &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    border: 2px solid #00aa00;</span><br><span class="line">    @include rounded-corners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里在官方 demo 上加了点代码验证问题。得到结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.name</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFAADD</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>; &#125;</span><br><span class="line">  <span class="selector-class">.notice</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>这个demo验证了：1. <code>@mixin</code> 是一个类似变量的内容。在 <code>@import</code> 导入的内容中只显示了 <code>.name</code> 样式。  2. <code>@include</code> 会替换 <code>@include xxx</code> 这段代码。就算 <code>@mixin</code> 中有各种写法都会应用到 <code>@include</code>中，如嵌套 CSS。</p><h3 id="混合器传参"><a href="#混合器传参" class="headerlink" title="混合器传参"></a>混合器传参</h3><p>混合器可以接收 <code>@include</code> 表达式传递的参数。而且，参数可以设置默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// mixin.scss</span><br><span class="line">@mixin link-colors($normal: white, $hover: white, $visited: white) &#123;</span><br><span class="line">    color: $normal;</span><br><span class="line">    &amp;:hover &#123; color: $hover; &#125;</span><br><span class="line">    &amp;:visited &#123; color: $visited; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// include.scss</span><br><span class="line">@import &quot;mixin&quot;;</span><br><span class="line"></span><br><span class="line">// 写法一，按照默认顺序传递参数</span><br><span class="line">a &#123;</span><br><span class="line">    @include link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 写法二，按照参数名传递参数</span><br><span class="line">b &#123;</span><br><span class="line">    @include link-colors(</span><br><span class="line">      $normal: blue,</span><br><span class="line">      $visited: green,</span><br><span class="line">      $hover: red</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译结果为:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">  <span class="selector-tag">b</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; &#125;</span><br><span class="line">  <span class="selector-tag">b</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></p><p>如果说 <code>@include</code> 中不传递参数 <code>@include link-colors();</code> ，那么生成结果的 color 都为默认值 white。</p><h3 id="element-中的混合"><a href="#element-中的混合" class="headerlink" title="element 中的混合"></a>element 中的混合</h3><p>在 element 源码中用了不少混合，有一种写法 sass 的快速入门中没有提到。就找一个简单的 el-card 样式来学习下来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;mixins/mixins&quot;;</span><br><span class="line">@import &quot;common/var&quot;;</span><br><span class="line"></span><br><span class="line">@include b(card) &#123;</span><br><span class="line">  border-radius: $--card-border-radius;</span><br><span class="line">  border: 1px solid $--card-border-color;</span><br><span class="line">  background-color: $--color-white;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  box-shadow: $--box-shadow-light;</span><br><span class="line">  color: $--color-text-primary;</span><br><span class="line"></span><br><span class="line">  @include e(header) &#123;</span><br><span class="line">    padding: #&#123;$--card-padding - 2 $--card-padding&#125;;</span><br><span class="line">    border-bottom: 1px solid $--card-border-color;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @include e(body) &#123;</span><br><span class="line">    padding: $--card-padding;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从中可以看到所有的属性都是使用了 <code>@include</code> 方式进行混合的。最终生成的 CSS 文件如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-card</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebeef5</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">12px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.1);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#303133</span>; &#125;</span><br><span class="line">  <span class="selector-class">.el-card__header</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">18px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ebeef5</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box; &#125;</span><br><span class="line">  <span class="selector-class">.el-card__body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>先看下导入，其中 <code>var</code> 文件是项目样式变量统一保存的地方；<code>mixin</code> 文件用于混合；再加上几个 <code>@include</code> 表达式，答案一定是在 <code>mixin</code> 中的。我们就直接找到 <code>@mixin b</code> 和 <code>@mixin e</code> 两个混合项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@mixin b($block) &#123;</span><br><span class="line">  $B: $namespace+&apos;-&apos;+$block !global; // 定义 B 变量：变量名 el-card</span><br><span class="line"></span><br><span class="line">  .#&#123;$B&#125; &#123;</span><br><span class="line">    @content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin e($element) &#123;</span><br><span class="line">  $E: $element !global;</span><br><span class="line">  $selector: &amp;;</span><br><span class="line">  $currentSelector: &quot;&quot;;</span><br><span class="line">  @each $unit in $element &#123;</span><br><span class="line">    $currentSelector: #&#123;$currentSelector + &quot;.&quot; + $B + $element-separator + $unit + &quot;,&quot;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @if hitAllSpecialNestRule($selector) &#123;</span><br><span class="line">    @at-root &#123;</span><br><span class="line">      #&#123;$selector&#125; &#123;</span><br><span class="line">        #&#123;$currentSelector&#125; &#123;</span><br><span class="line">          @content;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @else &#123;</span><br><span class="line">    @at-root &#123;</span><br><span class="line">      #&#123;$currentSelector&#125; &#123;</span><br><span class="line">        @content;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现有许多 sass 快速入门中没有提到过的语法： <code>@if</code>，<code>@else</code> 等等，这里查阅具体文档列出其功能：</p><ul><li>@if @else 这两者和任何编程语言的 if … else … 的用法是一样的，条件判断。if 中条件为 true 进入逻辑，否则使用 else 逻辑。</li><li>@at-root <a href="https://www.sasscss.com/docs/#at-root" target="_blank" rel="noopener">@at-root</a> 指令导致一个或多个规则被限定输出在文档的根层级上，而不是被嵌套在其父选择器下。</li><li>@content 样式内容块可以传递到混入（mixin）包含样式的位置。样式内容块将出现在混入内的任何 @content 指令的位置。这使得可以定义抽象 关联到选择器和指令的解析。</li><li>@each in 类似js用法，遍历列表获取每个value值。</li><li><code>#{...}</code> 是<a href="https://www.sasscss.com/docs/#interpolation_" target="_blank" rel="noopener">插值语法</a>，用于在选择器和属性名中使用 SassScript 变量，所以 <code>.#{$B}</code> 表达式，如果 <code>$B</code> 的值为 hello-world，那么表达式结果等于 <code>.hello-world</code></li></ul><p>其实看完这些用法，上面的代码就很好理解了。具体关于 element 样式学习的细节将在下篇博客中详细学习。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>个人感觉继承就是几个样式类写在一起。而且，继承是可以嵌套的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.error &#123;</span><br><span class="line">    border: 1px red;</span><br><span class="line">    background-color: #fdd;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">.seriousError &#123;</span><br><span class="line">    @extend .error;</span><br><span class="line">    border-width: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error02 &#123;</span><br><span class="line">    @extend .seriousError;</span><br><span class="line">    margin: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译结果为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span>, <span class="selector-class">.error02</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span>, <span class="selector-class">.error02</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error02</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>下面引用下继承的注意事项：</p><blockquote><ul><li>跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。</li><li>继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值，css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</li></ul></blockquote><p>所以，其实继承相比混合更简单。继承只是选择器的重复，而混合是用一段代码替换标签 <code>@include</code> 标签。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>由于 element 项目中使用了大量的 sass 样式，所以想了解 element 必须对 sass 有一定了解。本文简单解决了 sass 是什么？基础用法怎么用？两个问题。更加深入的 sass 语法涉及的不多，算是快速入门博客啦。<br>在了解了 sass，能够看懂 element 中的样式表后，就可以愉快的去学习 element 源码啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这算是 element 源码学习的番外篇，因为 element 中使用了大量 sass 来写样式。而 UI 框架的核心其实就是样式。所以，抽空把 sass 学了一遍，写了些小 demo 实践，总结成此文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
      
    
    </summary>
    
    
      <category term="element源码学习" scheme="https://violetjack.github.io/tags/element%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>element 源码学习二 —— 简单组件学习</title>
    <link href="https://violetjack.github.io/2018/03/11/element-code-02/"/>
    <id>https://violetjack.github.io/2018/03/11/element-code-02/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2018-03-21T05:32:42.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇博客中学习了项目的结构，这篇博客来学几个简单的组件的实现。</p></blockquote><p>在上一篇博客中我们提到了组件的源码都是存放在 <code>packages</code> 目录下的，所以我们从中挑一些组件来学习。先从简单的入手，来学习 button、radio、checkbox和InputNumber这四个组件的源码~</p><h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><p>找到 <code>packages/button/</code> 目录下，先看看 index.js 做了什么？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElButton <span class="keyword">from</span> <span class="string">'./src/button'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">ElButton.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(ElButton.name, ElButton);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ElButton;</span><br></pre></td></tr></table></figure></p><p>其实就是获取组件，然后全局注册组件。很好理解，我们自定义组件也经常这么干。看看组件内容吧~<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- packages/button/src/button.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"el-button"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">"disabled || loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:autofocus</span>=<span class="string">"autofocus"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:type</span>=<span class="string">"nativeType"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      type ? 'el-button--' + type : '',</span></span></span><br><span class="line"><span class="tag"><span class="string">      buttonSize ? 'el-button--' + buttonSize : '',</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-disabled': disabled,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-loading': loading,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-plain': plain,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-round': round</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-loading"</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"icon"</span> <span class="attr">v-if</span>=<span class="string">"icon &amp;&amp; !loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"$slots.default"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'ElButton'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取父级组件 provide 传递下来的数据。</span></span></span><br><span class="line"><span class="undefined">    inject: &#123;</span></span><br><span class="line"><span class="undefined">      elFormItem: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 属性 http://element-cn.eleme.io/#/zh-CN/component/button</span></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 类型 primary / success / warning / danger / info / text</span></span></span><br><span class="line"><span class="undefined">      type: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'default'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 尺寸 medium / small / mini</span></span></span><br><span class="line"><span class="javascript">      size: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 图标类名</span></span></span><br><span class="line"><span class="undefined">      icon: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 原生type属性 button / submit / reset</span></span></span><br><span class="line"><span class="undefined">      nativeType: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'button'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否加载中状态</span></span></span><br><span class="line"><span class="javascript">      loading: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用状态</span></span></span><br><span class="line"><span class="javascript">      disabled: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否朴素按钮</span></span></span><br><span class="line"><span class="javascript">      plain: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否默认聚焦</span></span></span><br><span class="line"><span class="javascript">      autofocus: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否圆形按钮</span></span></span><br><span class="line"><span class="javascript">      round: <span class="built_in">Boolean</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// elFormItem 尺寸获取</span></span></span><br><span class="line"><span class="undefined">      _elFormItemSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮尺寸计算</span></span></span><br><span class="line"><span class="undefined">      buttonSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 点击事件，使得组件的点击事件为 @click，与原生点击保持一致。</span></span></span><br><span class="line"><span class="undefined">      handleClick(evt) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, evt);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码已注释~其实 script 部分很简单：通过inject和props获取数据，计算方法计算尺寸，事件处理点击事件。关键点在于button中的几个class。说白了，其实这就是个原生的button组件，只是样式上有所不同。<br>样式文件都是存在 <code>packages/theme-chalk/</code> 目录下的。所以 button 的样式目录位于 <code>packages/theme-chalk/src/button.scss</code>。由于自己 CSS 非常渣，所以这步先跳过~</p><h1 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h1><p>来看下Radio。嗯……目录位置在 <code>packages/radio/</code> 目录下。index.js 文件和 button 是一样的 —— 导入组件、定义全局注册组件方法、导出。所以这边来看看 radio.vue 文件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- packages/button/src/radio.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"el-radio"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      border &amp;&amp; radioSize ? 'el-radio--' + radioSize : '',</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-disabled': isDisabled &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-focus': focus &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-bordered': border &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-checked': model === label &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">role</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:aria-checked</span>=<span class="string">"model === label"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:aria-disabled</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:tabindex</span>=<span class="string">"tabIndex"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">keydown.space.stop.prevent</span>=<span class="string">"model = label"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 图标部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-radio__input"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-disabled': isDisabled,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-checked': model === label</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- 图标效果 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-radio__inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"el-radio__original"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"radio"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">focus</span>=<span class="string">"focus = true"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">blur</span>=<span class="string">"focus = false"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disabled</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tabindex</span>=<span class="string">"-1"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-radio__label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"!$slots.default"</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Emitter <span class="keyword">from</span> <span class="string">'element-ui/src/mixins/emitter'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'ElRadio'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 混合选项</span></span></span><br><span class="line"><span class="undefined">    mixins: [Emitter],</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    inject: &#123;</span></span><br><span class="line"><span class="undefined">      elForm: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      elFormItem: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    componentName: <span class="string">'ElRadio'</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// value值</span></span></span><br><span class="line"><span class="undefined">      value: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Radio 的 value</span></span></span><br><span class="line"><span class="undefined">      label: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用</span></span></span><br><span class="line"><span class="javascript">      disabled: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 原生 name 属性</span></span></span><br><span class="line"><span class="javascript">      name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否显示边框</span></span></span><br><span class="line"><span class="javascript">      border: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Radio 的尺寸，仅在 border 为真时有效 medium / small / mini</span></span></span><br><span class="line"><span class="javascript">      size: <span class="built_in">String</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        focus: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 向上遍历查询父级组件是否有 ElRadioGroup，即是否在按钮组中</span></span></span><br><span class="line"><span class="undefined">      isGroup() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (parent) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (parent.$options.componentName !== <span class="string">'ElRadioGroup'</span>) &#123;</span></span><br><span class="line"><span class="undefined">            parent = parent.$parent;</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>._radioGroup = parent;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 重新定义 v-model 绑定内容的 get 和 set</span></span></span><br><span class="line"><span class="undefined">      model: &#123;</span></span><br><span class="line"><span class="undefined">        get() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.isGroup ? <span class="keyword">this</span>._radioGroup.value : <span class="keyword">this</span>.value;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        set(val) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">this</span>.isGroup) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.dispatch(<span class="string">'ElRadioGroup'</span>, <span class="string">'input'</span>, [val]);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, val);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// elFormItem 尺寸</span></span></span><br><span class="line"><span class="undefined">      _elFormItemSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算 radio 尺寸，用于显示带有边框的radio的尺寸大小</span></span></span><br><span class="line"><span class="undefined">      radioSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> temRadioSize = <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.isGroup</span></span><br><span class="line"><span class="javascript">          ? <span class="keyword">this</span>._radioGroup.radioGroupSize || temRadioSize</span></span><br><span class="line"><span class="undefined">          : temRadioSize;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用，如果radioGroup禁用则按钮禁用。</span></span></span><br><span class="line"><span class="undefined">      isDisabled() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.isGroup</span></span><br><span class="line"><span class="javascript">          ? <span class="keyword">this</span>._radioGroup.disabled || <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled</span></span><br><span class="line"><span class="javascript">          : <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 标签索引 0 or -1</span></span></span><br><span class="line"><span class="undefined">      tabIndex() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> !<span class="keyword">this</span>.isDisabled ? (<span class="keyword">this</span>.isGroup ? (<span class="keyword">this</span>.model === <span class="keyword">this</span>.label ? <span class="number">0</span> : <span class="number">-1</span>) : <span class="number">0</span>) : <span class="number">-1</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 处理 @change 事件，如果有按钮组，出发按钮组事件。</span></span></span><br><span class="line"><span class="undefined">      handleChange() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.model);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.isGroup &amp;&amp; <span class="keyword">this</span>.dispatch(<span class="string">'ElRadioGroup'</span>, <span class="string">'handleChange'</span>, <span class="keyword">this</span>.model);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>从代码中可以看到，radio不止是个input那么简单。后面还会显示的文本内容。script 部分的逻辑是：通过 inject 和 props 获取传参，data记录 radio 的 focus 状态。compute 中计算一些属性值；methods中处理onchange事件。radio 中多了些关于 radioGroup 的处理。具体我都写在注释中了。<br>另外要注意的还是 template 中的各类 class，radio的css文件想必也猜到了，文件位于 <code>packages/theme-chalk/src/radio.scss</code>。<strong>到这里就会发现：这些简单组件主要是样式上面的处理，对于逻辑上处理并不大。</strong><br>在 radio 中导入了 <code>element-ui/src/mixins/emitter.js</code> 文件，来看看它的作用是什么？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mixins/emitter.js</span></span><br><span class="line"><span class="comment">// 广播</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">componentName, eventName, params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历子组件</span></span><br><span class="line">  <span class="keyword">this</span>.$children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件名</span></span><br><span class="line">    <span class="keyword">var</span> name = child.$options.componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name === componentName) &#123;</span><br><span class="line">      <span class="comment">// 触发事件</span></span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 执行broadcast方法</span></span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat([params]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="comment">// 父级组件及其组件名</span></span><br><span class="line">      <span class="keyword">var</span> parent = <span class="keyword">this</span>.$parent || <span class="keyword">this</span>.$root;</span><br><span class="line">      <span class="keyword">var</span> name = parent.$options.componentName;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 有父级组件 同时 没有name 或者 name 不等于组件名</span></span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        <span class="comment">// parent 向上获取父级组件</span></span><br><span class="line">        parent = parent.$parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 触发 eventName 事件</span></span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(<span class="keyword">this</span>, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>由注释可见，dispatch 方法向上获取父级组件并触发 eventName 事件。broadcast 方法向下遍历子组件触发 eventName 事件。</p><p>至于 Vue 的 mixins 属性是干嘛的？</p><blockquote><p>混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p></blockquote><p>好啦，至于 radio 的 scss 解析？抱歉，暂时对scss不熟，之后补上~本篇关键将逻辑吧。</p><h1 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h1><p>找到 checkbox 的项目目录，index.js 逻辑是一样的~所以只需看看 checkbox.vue 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- packages/button/src/checkbox.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"el-checkbox"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      border &amp;&amp; checkboxSize ? 'el-checkbox--' + checkboxSize : '',</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-disabled': isDisabled &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-bordered': border &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-checked': isChecked &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">role</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:aria-checked</span>=<span class="string">"indeterminate ? 'mixed': isChecked"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:aria-disabled</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:id</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-checkbox__input"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-disabled': isDisabled,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-checked': isChecked,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-indeterminate': indeterminate,</span></span></span><br><span class="line"><span class="tag"><span class="string">        'is-focus': focus</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">aria-checked</span>=<span class="string">"mixed"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-checkbox__inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果有 true-value 或者 false-value --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"trueLabel || falseLabel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"el-checkbox__original"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disabled</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:true-value</span>=<span class="string">"trueLabel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:false-value</span>=<span class="string">"falseLabel"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">focus</span>=<span class="string">"focus = true"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">blur</span>=<span class="string">"focus = false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"el-checkbox__original"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"checkbox"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disabled</span>=<span class="string">"isDisabled"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"model"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">focus</span>=<span class="string">"focus = true"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">blur</span>=<span class="string">"focus = false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-checkbox__label"</span> <span class="attr">v-if</span>=<span class="string">"$slots.default || label"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"!$slots.default"</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Emitter <span class="keyword">from</span> <span class="string">'element-ui/src/mixins/emitter'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'ElCheckbox'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 混合 Emitter</span></span></span><br><span class="line"><span class="undefined">    mixins: [Emitter],</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    inject: &#123;</span></span><br><span class="line"><span class="undefined">      elForm: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      elFormItem: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    componentName: <span class="string">'ElCheckbox'</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// checkbox model</span></span></span><br><span class="line"><span class="javascript">        selfModel: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 焦点</span></span></span><br><span class="line"><span class="javascript">        focus: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 超过限制？</span></span></span><br><span class="line"><span class="javascript">        isLimitExceeded: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="undefined">      model: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取model值</span></span></span><br><span class="line"><span class="undefined">        get() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.isGroup</span></span><br><span class="line"><span class="javascript">            ? <span class="keyword">this</span>.store : <span class="keyword">this</span>.value !== <span class="literal">undefined</span></span></span><br><span class="line"><span class="javascript">              ? <span class="keyword">this</span>.value : <span class="keyword">this</span>.selfModel;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置 selfModel</span></span></span><br><span class="line"><span class="undefined">        set(val) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// checkbox group 的set逻辑处理</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">this</span>.isGroup) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 处理 isLimitExceeded</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.isLimitExceeded = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            (<span class="keyword">this</span>._checkboxGroup.min !== <span class="literal">undefined</span> &amp;&amp;</span></span><br><span class="line"><span class="javascript">              val.length &lt; <span class="keyword">this</span>._checkboxGroup.min &amp;&amp;</span></span><br><span class="line"><span class="javascript">              (<span class="keyword">this</span>.isLimitExceeded = <span class="literal">true</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            (<span class="keyword">this</span>._checkboxGroup.max !== <span class="literal">undefined</span> &amp;&amp;</span></span><br><span class="line"><span class="javascript">              val.length &gt; <span class="keyword">this</span>._checkboxGroup.max &amp;&amp;</span></span><br><span class="line"><span class="javascript">              (<span class="keyword">this</span>.isLimitExceeded = <span class="literal">true</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 触发 ElCheckboxGroup 的 input 事件</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.isLimitExceeded === <span class="literal">false</span> &amp;&amp;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.dispatch(<span class="string">'ElCheckboxGroup'</span>, <span class="string">'input'</span>, [val]);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 触发当前组件 input 事件</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, val);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 赋值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.selfModel = val;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否选中</span></span></span><br><span class="line"><span class="undefined">      isChecked() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (&#123;&#125;.toString.call(<span class="keyword">this</span>.model) === <span class="string">'[object Boolean]'</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.model;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.model)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.model.indexOf(<span class="keyword">this</span>.label) &gt; <span class="number">-1</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.model !== <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.model !== <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.model === <span class="keyword">this</span>.trueLabel;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否为按钮组</span></span></span><br><span class="line"><span class="undefined">      isGroup() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> parent = <span class="keyword">this</span>.$parent;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (parent) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (parent.$options.componentName !== <span class="string">'ElCheckboxGroup'</span>) &#123;</span></span><br><span class="line"><span class="undefined">            parent = parent.$parent;</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>._checkboxGroup = parent;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 判断 group，checkbox 的 value 获取</span></span></span><br><span class="line"><span class="undefined">      store() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>._checkboxGroup ? <span class="keyword">this</span>._checkboxGroup.value : <span class="keyword">this</span>.value;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用</span></span></span><br><span class="line"><span class="undefined">      isDisabled() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.isGroup</span></span><br><span class="line"><span class="javascript">          ? <span class="keyword">this</span>._checkboxGroup.disabled || <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled</span></span><br><span class="line"><span class="javascript">          : <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// elFormItem 的尺寸</span></span></span><br><span class="line"><span class="undefined">      _elFormItemSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// checkbox 尺寸，同样需要有边框才有效</span></span></span><br><span class="line"><span class="undefined">      checkboxSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> temCheckboxSize = <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.isGroup</span></span><br><span class="line"><span class="javascript">          ? <span class="keyword">this</span>._checkboxGroup.checkboxGroupSize || temCheckboxSize</span></span><br><span class="line"><span class="undefined">          : temCheckboxSize;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// value值</span></span></span><br><span class="line"><span class="undefined">      value: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 选中状态的值（只有在checkbox-group或者绑定对象类型为array时有效）</span></span></span><br><span class="line"><span class="undefined">      label: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置 indeterminate 状态，只负责样式控制</span></span></span><br><span class="line"><span class="javascript">      indeterminate: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用</span></span></span><br><span class="line"><span class="javascript">      disabled: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当前是否勾选</span></span></span><br><span class="line"><span class="javascript">      checked: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 原生 name 属性</span></span></span><br><span class="line"><span class="javascript">      name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 选中时的值</span></span></span><br><span class="line"><span class="javascript">      trueLabel: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 没有选中时的值</span></span></span><br><span class="line"><span class="javascript">      falseLabel: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span></span><br><span class="line"><span class="javascript">      id: <span class="built_in">String</span>, <span class="comment">/* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/</span></span></span><br><span class="line"><span class="javascript">      controls: <span class="built_in">String</span>, <span class="comment">/* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否显示边框</span></span></span><br><span class="line"><span class="javascript">      border: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Checkbox 的尺寸，仅在 border 为真时有效</span></span></span><br><span class="line"><span class="javascript">      size: <span class="built_in">String</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 添加数据到model</span></span></span><br><span class="line"><span class="undefined">      addToStore() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="javascript">          <span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.model) &amp;&amp;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.model.indexOf(<span class="keyword">this</span>.label) === <span class="number">-1</span></span></span><br><span class="line"><span class="undefined">        ) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.model.push(<span class="keyword">this</span>.label);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.model = <span class="keyword">this</span>.trueLabel || <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 处理 @change 事件，如果是 group 要处理 group 的 change 事件。</span></span></span><br><span class="line"><span class="undefined">      handleChange(ev) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.isLimitExceeded) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (ev.target.checked) &#123;</span></span><br><span class="line"><span class="javascript">          value = <span class="keyword">this</span>.trueLabel === <span class="literal">undefined</span> ? <span class="literal">true</span> : <span class="keyword">this</span>.trueLabel;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          value = <span class="keyword">this</span>.falseLabel === <span class="literal">undefined</span> ? <span class="literal">false</span> : <span class="keyword">this</span>.falseLabel;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, value, ev);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">this</span>.isGroup) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.dispatch(<span class="string">'ElCheckboxGroup'</span>, <span class="string">'change'</span>, [<span class="keyword">this</span>._checkboxGroup.value]);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    created() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果 checked 为 true，执行 addToStore 方法</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.checked &amp;&amp; <span class="keyword">this</span>.addToStore();</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    mounted() &#123; <span class="comment">// 为indeterminate元素 添加aria-controls 属性</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.indeterminate) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$el.setAttribute(<span class="string">'aria-controls'</span>, <span class="keyword">this</span>.controls);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其实和radio逻辑差不多。从上面的内容中已知 emitter.js 用于触发子组件或父组件的事件，而参数上与radio也差不多。不同点有，在显示checkbox时，如果有true-babel 或 false-babel 属性和没有这两个属性显示的是不同的 checkbox(v-if,v-else)。其他都差不多。<br>具体代码注释即可。</p><h1 id="InputNumber"><a href="#InputNumber" class="headerlink" title="InputNumber"></a>InputNumber</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">dragstart.prevent</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">      'el-input-number',</span></span></span><br><span class="line"><span class="tag"><span class="string">      inputNumberSize ? 'el-input-number--' + inputNumberSize : '',</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-disabled': inputNumberDisabled &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-without-controls': !controls &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123; 'is-controls-right': controlsAtRight &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    ]"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 减法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"el-input-number__decrease"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">role</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"controls"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-repeat-click</span>=<span class="string">"decrease"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;'is-disabled': minDisabled&#125;"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keydown.enter</span>=<span class="string">"decrease"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"`el-icon-$&#123;controlsAtRight ? 'arrow-down' : 'minus'&#125;`"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"el-input-number__increase"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">role</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"controls"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-repeat-click</span>=<span class="string">"increase"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;'is-disabled': maxDisabled&#125;"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keydown.enter</span>=<span class="string">"increase"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"`el-icon-$&#123;controlsAtRight ? 'arrow-up' : 'plus'&#125;`"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- el-input 内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"input"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">"currentValue"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">"inputNumberDisabled"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:size</span>=<span class="string">"inputNumberSize"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:max</span>=<span class="string">"max"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:min</span>=<span class="string">"min"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">"label"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keydown.up.native.prevent</span>=<span class="string">"increase"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keydown.down.native.prevent</span>=<span class="string">"decrease"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">blur</span>=<span class="string">"handleBlur"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">focus</span>=<span class="string">"handleFocus"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"handleInputChange"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 占位符模板 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"prepend"</span> <span class="attr">v-if</span>=<span class="string">"$slots.prepend"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"prepend"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"append"</span> <span class="attr">v-if</span>=<span class="string">"$slots.append"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"append"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> ElInput <span class="keyword">from</span> <span class="string">'element-ui/packages/input'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Focus <span class="keyword">from</span> <span class="string">'element-ui/src/mixins/focus'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> RepeatClick <span class="keyword">from</span> <span class="string">'element-ui/src/directives/repeat-click'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'ElInputNumber'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// options 混合</span></span></span><br><span class="line"><span class="javascript">    mixins: [Focus(<span class="string">'input'</span>)],</span></span><br><span class="line"><span class="undefined">    inject: &#123;</span></span><br><span class="line"><span class="undefined">      elForm: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      elFormItem: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义指令</span></span></span><br><span class="line"><span class="undefined">    directives: &#123;</span></span><br><span class="line"><span class="undefined">      repeatClick: RepeatClick</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      ElInput</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计数器步长</span></span></span><br><span class="line"><span class="undefined">      step: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">1</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置计数器允许的最大值</span></span></span><br><span class="line"><span class="undefined">      max: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">Infinity</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置计数器允许的最小值</span></span></span><br><span class="line"><span class="undefined">      min: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: -<span class="literal">Infinity</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绑定值</span></span></span><br><span class="line"><span class="undefined">      value: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否禁用计数器</span></span></span><br><span class="line"><span class="javascript">      disabled: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计数器尺寸 large, small</span></span></span><br><span class="line"><span class="javascript">      size: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 是否使用控制按钮</span></span></span><br><span class="line"><span class="undefined">      controls: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 控制按钮位置 right</span></span></span><br><span class="line"><span class="undefined">      controlsPosition: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 原生 name 属性</span></span></span><br><span class="line"><span class="javascript">      name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 输入框关联的label文字</span></span></span><br><span class="line"><span class="javascript">      label: <span class="built_in">String</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当前值</span></span></span><br><span class="line"><span class="undefined">        currentValue: 0</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    watch: &#123;</span></span><br><span class="line"><span class="undefined">      value: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 立即执行 get()</span></span></span><br><span class="line"><span class="javascript">        immediate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">        handler(value) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> newVal = value === <span class="literal">undefined</span> ? value : <span class="built_in">Number</span>(value);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (newVal !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">isNaN</span>(newVal)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (newVal &gt;= <span class="keyword">this</span>.max) newVal = <span class="keyword">this</span>.max;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (newVal &lt;= <span class="keyword">this</span>.min) newVal = <span class="keyword">this</span>.min;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.currentValue = newVal;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 触发 @input 事件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, newVal);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 最小禁用，无法再减</span></span></span><br><span class="line"><span class="undefined">      minDisabled() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>._decrease(<span class="keyword">this</span>.value, <span class="keyword">this</span>.step) &lt; <span class="keyword">this</span>.min;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 最大禁用，无法再加</span></span></span><br><span class="line"><span class="undefined">      maxDisabled() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>._increase(<span class="keyword">this</span>.value, <span class="keyword">this</span>.step) &gt; <span class="keyword">this</span>.max;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 精度</span></span></span><br><span class="line"><span class="undefined">      precision() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> &#123; value, step, getPrecision &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(getPrecision(value), getPrecision(step));</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮是否要显示于右侧</span></span></span><br><span class="line"><span class="undefined">      controlsAtRight() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.controlsPosition === <span class="string">'right'</span>;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// FormItem尺寸</span></span></span><br><span class="line"><span class="undefined">      _elFormItemSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算尺寸</span></span></span><br><span class="line"><span class="undefined">      inputNumberSize() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取禁用状态</span></span></span><br><span class="line"><span class="undefined">      inputNumberDisabled() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算精度</span></span></span><br><span class="line"><span class="undefined">      toPrecision(num, precision) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (precision === <span class="literal">undefined</span>) precision = <span class="keyword">this</span>.precision;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="built_in">parseFloat</span>(<span class="built_in">Number</span>(num).toFixed(precision)));</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取精度</span></span></span><br><span class="line"><span class="undefined">      getPrecision(value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> valueString = value.toString();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> dotPosition = valueString.indexOf(<span class="string">'.'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> precision = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (dotPosition !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="undefined">          precision = valueString.length - dotPosition - 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> precision;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取加法后的精度</span></span></span><br><span class="line"><span class="undefined">      _increase(val, step) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">'number'</span> &amp;&amp; val !== <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="keyword">this</span>.currentValue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> precisionFactor = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="keyword">this</span>.precision);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Solve the accuracy problem of JS decimal calculation by converting the value to integer.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取减法后的精度</span></span></span><br><span class="line"><span class="undefined">      _decrease(val, step) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">'number'</span> &amp;&amp; val !== <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="keyword">this</span>.currentValue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> precisionFactor = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="keyword">this</span>.precision);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 加法行为</span></span></span><br><span class="line"><span class="undefined">      increase() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.inputNumberDisabled || <span class="keyword">this</span>.maxDisabled) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> value = <span class="keyword">this</span>.value || <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> newVal = <span class="keyword">this</span>._increase(value, <span class="keyword">this</span>.step);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.setCurrentValue(newVal);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 减法行为</span></span></span><br><span class="line"><span class="undefined">      decrease() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.inputNumberDisabled || <span class="keyword">this</span>.minDisabled) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> value = <span class="keyword">this</span>.value || <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> newVal = <span class="keyword">this</span>._decrease(value, <span class="keyword">this</span>.step);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.setCurrentValue(newVal);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 处理 blur 和 focus</span></span></span><br><span class="line"><span class="undefined">      handleBlur(event) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'blur'</span>, event);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.input.setCurrentValue(<span class="keyword">this</span>.currentValue);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      handleFocus(event) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'focus'</span>, event);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置当前value</span></span></span><br><span class="line"><span class="undefined">      setCurrentValue(newVal) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> oldVal = <span class="keyword">this</span>.currentValue;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (newVal &gt;= <span class="keyword">this</span>.max) newVal = <span class="keyword">this</span>.max;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (newVal &lt;= <span class="keyword">this</span>.min) newVal = <span class="keyword">this</span>.min;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (oldVal === newVal) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 执行 el-input 中的 setCurrentValue 方法</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.input.setCurrentValue(<span class="keyword">this</span>.currentValue);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 触发事件，改变value</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, newVal, oldVal);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, newVal);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.currentValue = newVal;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 处理文本框变化</span></span></span><br><span class="line"><span class="undefined">      handleInputChange(value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> newVal = value === <span class="string">''</span> ? <span class="literal">undefined</span> : <span class="built_in">Number</span>(value);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(newVal) || value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.setCurrentValue(newVal);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    mounted() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更改 el-input 内部 input 的属性。</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> innerInput = <span class="keyword">this</span>.$refs.input.$refs.input;</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'role'</span>, <span class="string">'spinbutton'</span>);</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'aria-valuemax'</span>, <span class="keyword">this</span>.max);</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'aria-valuemin'</span>, <span class="keyword">this</span>.min);</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'aria-valuenow'</span>, <span class="keyword">this</span>.currentValue);</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'aria-disabled'</span>, <span class="keyword">this</span>.inputNumberDisabled);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    updated() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更改 el-input 内部 input 的属性。</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> innerInput = <span class="keyword">this</span>.$refs.input.$refs.input;</span></span><br><span class="line"><span class="javascript">      innerInput.setAttribute(<span class="string">'aria-valuenow'</span>, <span class="keyword">this</span>.currentValue);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看HTML，这个组件由两个span按钮当做加减按钮，一个 el-input 组件显示数字结果。但是，对于最后两个 template 的作用不是很明白，不知道何时使用。<br>再看JS，代码中导入了 el-input 组件、 Focus 方法和 RepeatClick 方法。这两个方法之后详述。看到代码中还是以props、inject、compute方法来处理传入的数据。和前三个组件不同的地方在于，一是引用了组件需要处理组件，在 mounted 和 updated 方法执行时修改 el-input 组件中 input 的属性；二是加入了加法和减法的方法逻辑：求精度、做加减法、处理最大最小值限制。<br>从CSS角度上来说，要处理加法、减法按钮的位置和样式等功能……SCSS方面的内容暂且一概不论。</p><p>顺便看看 Focus 和 RepeatClick 方法~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/directives/repeat-click.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; once, on &#125; <span class="keyword">from</span> <span class="string">'element-ui/src/utils/dom'</span>;</span><br><span class="line"><span class="comment">// on 添加监听事件</span></span><br><span class="line"><span class="comment">// once 监听一次事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  bind(el, binding, vnode) &#123;</span><br><span class="line">    <span class="keyword">let</span> interval = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> startTime;</span><br><span class="line">    <span class="comment">// 执行表达式方法</span></span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function"><span class="params">()</span> =&gt;</span> vnode.context[binding.expression].apply();</span><br><span class="line">    <span class="comment">// 清除interval</span></span><br><span class="line">    <span class="keyword">const</span> clear = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - startTime &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        handler();</span><br><span class="line">      &#125;</span><br><span class="line">      clearInterval(interval);</span><br><span class="line">      interval = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 mousedown 鼠标点击事件</span></span><br><span class="line">    on(el, <span class="string">'mousedown'</span>, (e) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.button !== <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">      startTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      once(<span class="built_in">document</span>, <span class="string">'mouseup'</span>, clear);</span><br><span class="line">      clearInterval(interval);</span><br><span class="line">      <span class="comment">// setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line">      interval = setInterval(handler, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中导入的on和once方法类似于vue的方法，on用于监听事件，once监听一次事件。监听 mousedown 事件。如果触发每 100 毫秒执行一次 handler，如果监听到 mousedown 判断时间间隔如果短于100毫秒，执行 handler 方法。取消计时器并清空 interval。从而实现了重复点击的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mixins/focus.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">ref</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      focus() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[ref].focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>很简单的方法，就是用于定位一个元素，执行它的 focus 方法。</p><p>所以说:<strong>src 中除了 locale 目录用于国际化和 utils 工具目录外，其他目录下都是用于组件的一些配置上的.</strong>如 mixins 目录用于 mixins 项,directives 目录下的用于 directives 项。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>额……由于对于 CSS 比较菜，所以暂且不误人子弟，待我学成后再补上这部分内容。<br>总结下几个组件给我的感觉：其实 UI 框架主要在 UI 二字上。所以其实讲 UI 框架重点应该放在 CSS 上。逻辑部分其实蛮简单的。毕竟是组件不是整个项目，组件就是要易用性、可扩展性。<br><strong>所以说组件的主要逻辑都是进行传参的处理和计算。</strong><br>element的组件模式上其实是定义好 <code>[component].vue</code> 组件文件，然后导入到用户项目 Vue 实例的 components 项中来使用，其实和自定义 component 基本原理差不多。<br>下一篇，来看看一些复杂的组件的代码逻辑实现~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上一篇博客中学习了项目的结构，这篇博客来学几个简单的组件的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上一篇博客中我们提到了组件的源码都是存放在 &lt;code&gt;packages&lt;/code&gt; 目录下的，所以我们从中挑一些组件来学习。先从简单的
      
    
    </summary>
    
    
      <category term="element源码学习" scheme="https://violetjack.github.io/tags/element%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>element 源码学习一 —— 认识框架</title>
    <link href="https://violetjack.github.io/2018/03/10/element-code-01/"/>
    <id>https://violetjack.github.io/2018/03/10/element-code-01/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2018-03-21T05:32:46.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于面试需要，先来几发 element 源码学习博客。Vue 源码还将继续更新。</p></blockquote><p>好，现在我们开始学习 element —— 最受欢迎的 Vue UI 框架。</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>我觉得要看一个前端项目，首先必须得看看 <code>package.json</code> 这个文件。</p><h2 id="编译入口"><a href="#编译入口" class="headerlink" title="编译入口"></a>编译入口</h2><p>来看看编译的入口</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  # 安装依赖</span><br><span class="line">  "bootstrap": "yarn || npm i",</span><br><span class="line">  # 构建文件</span><br><span class="line">  "build:file": "node build/bin/iconInit.js &amp; node build/bin/build-entry.js &amp; node build/bin/i18n.js &amp; node build/bin/version.js",</span><br><span class="line">  # 构建样式</span><br><span class="line">  "build:theme": "node build/bin/gen-cssfile &amp;&amp; gulp build --gulpfile packages/theme-chalk/gulpfile.js &amp;&amp; cp-cli packages/theme-chalk/lib lib/theme-chalk",</span><br><span class="line">  # 构建工具</span><br><span class="line">  "build:utils": "cross-env BABEL_ENV=utils babel src --out-dir lib --ignore src/index.js",</span><br><span class="line">  # 构建umd</span><br><span class="line">  "build:umd": "node build/bin/build-locale.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们以看源码的角度，先了解构建文件命令。其实就是 node 执行了几个 js 脚本。我们深入看下 <code>iconInit</code>、 <code>build-entry</code>、 <code>i18n</code>、 <code>version</code> 这些脚本文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/bin/build-all.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = <span class="built_in">require</span>(<span class="string">'../../components.json'</span>);</span><br><span class="line"><span class="keyword">const</span> execSync = <span class="built_in">require</span>(<span class="string">'child_process'</span>).execSync;</span><br><span class="line"><span class="keyword">const</span> existsSync = <span class="built_in">require</span>(<span class="string">'fs'</span>).existsSync;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> componentPaths = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> components.index;</span><br><span class="line"><span class="keyword">delete</span> components.font;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 components 的 key，找到相应 component 的路径，将路径保存到 componentPaths 数组</span></span><br><span class="line"><span class="built_in">Object</span>.keys(components).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.join(__dirname, <span class="string">`../../packages/<span class="subst">$&#123;key&#125;</span>/cooking.conf.js`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (existsSync(filePath)) &#123;</span><br><span class="line">    componentPaths.push(<span class="string">`packages/<span class="subst">$&#123;key&#125;</span>/cooking.conf.js`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pathA,pathB,pathC</span></span><br><span class="line"><span class="keyword">const</span> paths = componentPaths.join(<span class="string">','</span>);</span><br><span class="line"><span class="comment">// 拼接为 shell 命令，并调用 execSync 方法执行。</span></span><br><span class="line"><span class="keyword">const</span> cli = path.join(<span class="string">'node_modules'</span>, <span class="string">'.bin'</span>, <span class="string">'cooking'</span>) + <span class="string">` build -c <span class="subst">$&#123;paths&#125;</span> -p`</span>;</span><br><span class="line"></span><br><span class="line">execSync(cli, &#123;</span><br><span class="line">  stdio: <span class="string">'inherit'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上方法主要是获取所有组件名，然后拼接为 shell 命令，执行 shell 命令进行 build。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/bin/iconInit.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fontFile = fs.readFileSync(path.resolve(__dirname, <span class="string">'../../packages/theme-chalk/src/icon.scss'</span>), <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> nodes = postcss.parse(fontFile).nodes;</span><br><span class="line"><span class="keyword">var</span> classList = [];</span><br><span class="line"><span class="comment">// 遍历匹配正则，符合则传入到数组中</span></span><br><span class="line">nodes.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> selector = node.selector || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\.el-icon-([^:]+):before/</span>); <span class="comment">// 正则： .el-icon-(多个非:字符):before</span></span><br><span class="line">  <span class="keyword">var</span> arr = selector.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (arr &amp;&amp; arr[<span class="number">1</span>]) &#123;</span><br><span class="line">    classList.push(arr[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导出 icon.json 文件</span></span><br><span class="line">fs.writeFile(path.resolve(__dirname, <span class="string">'../../examples/icon.json'</span>), <span class="built_in">JSON</span>.stringify(classList));</span><br></pre></td></tr></table></figure><p>以上方法通过解析 icon.scss 最终导出 icon.json 文件，该文件保存了各种图标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/bin/i18n.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 获取 page.json</span></span><br><span class="line"><span class="keyword">var</span> langConfig = <span class="built_in">require</span>(<span class="string">'../../examples/i18n/page.json'</span>);</span><br><span class="line"></span><br><span class="line">langConfig.forEach(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取文件信息</span></span><br><span class="line">    fs.statSync(path.resolve(__dirname, <span class="string">`../../examples/pages/<span class="subst">$&#123; lang.lang &#125;</span>`</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// 创建文件夹</span></span><br><span class="line">    fs.mkdirSync(path.resolve(__dirname, <span class="string">`../../examples/pages/<span class="subst">$&#123; lang.lang &#125;</span>`</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历写入文件</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(lang.pages).forEach(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> templatePath = path.resolve(__dirname, <span class="string">`../../examples/pages/template/<span class="subst">$&#123; page &#125;</span>.tpl`</span>);</span><br><span class="line">    <span class="keyword">var</span> outputPath = path.resolve(__dirname, <span class="string">`../../examples/pages/<span class="subst">$&#123; lang.lang &#125;</span>/<span class="subst">$&#123; page &#125;</span>.vue`</span>);</span><br><span class="line">    <span class="keyword">var</span> content = fs.readFileSync(templatePath, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">var</span> pairs = lang.pages[page];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(pairs).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      content = content.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`&lt;%=\\s*<span class="subst">$&#123; key &#125;</span>\\s*&gt;`</span>, <span class="string">'g'</span>), pairs[key]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fs.writeFileSync(outputPath, content);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码是国际化的过程，最终将会在 <code>examples/pages/</code> 目录中生成不同语言的内容。国际化具体内容请参照 <a href="http://element-cn.eleme.io/#/zh-CN/component/i18n" target="_blank" rel="noopener">国际化</a>。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-5b0354332c689f31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成结果"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/bin/version.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> version = process.env.VERSION || <span class="built_in">require</span>(<span class="string">'../../package.json'</span>).version;</span><br><span class="line"><span class="keyword">var</span> content = &#123; <span class="string">'1.4.13'</span>: <span class="string">'1.4'</span>, <span class="string">'2.0.11'</span>: <span class="string">'2.0'</span>, <span class="string">'2.1.0'</span>: <span class="string">'2.1'</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (!content[version]) content[version] = <span class="string">'2.2'</span>;</span><br><span class="line">fs.writeFileSync(path.resolve(__dirname, <span class="string">'../../examples/versions.json'</span>), <span class="built_in">JSON</span>.stringify(content));</span><br></pre></td></tr></table></figure><p>获取 version，定义了一个 content，如果当前版本不在 content 中，那么再添加一个版本数据。由于我学习的版本是 <code>2.2.1</code>，最终生成的结果是:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"1.4.13"</span>:<span class="string">"1.4"</span>,<span class="attr">"2.0.11"</span>:<span class="string">"2.0"</span>,<span class="attr">"2.1.0"</span>:<span class="string">"2.1"</span>,<span class="attr">"2.2.1"</span>:<span class="string">"2.2"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>出现这几个版本号的原因么，看下官网就能发现端倪，应该是几个重要的稳定版本。</p><p><img src="https://upload-images.jianshu.io/upload_images/1987062-e863a98c9731821b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本号"></p><p>来看下 <code>build-entry.js</code> 文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/bin/build-entry.js</span></span><br><span class="line"><span class="keyword">var</span> Components = <span class="built_in">require</span>(<span class="string">'../../components.json'</span>); <span class="comment">// 组件数据</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); <span class="comment">// node文件系统</span></span><br><span class="line"><span class="keyword">var</span> render = <span class="built_in">require</span>(<span class="string">'json-templater/string'</span>);</span><br><span class="line"><span class="keyword">var</span> uppercamelcase = <span class="built_in">require</span>(<span class="string">'uppercamelcase'</span>); <span class="comment">// 驼峰大小写写法</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// node路径系统</span></span><br><span class="line"><span class="keyword">var</span> endOfLine = <span class="built_in">require</span>(<span class="string">'os'</span>).EOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路径</span></span><br><span class="line"><span class="keyword">var</span> OUTPUT_PATH = path.join(__dirname, <span class="string">'../../src/index.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入template、安装组件template、主要template</span></span><br><span class="line"><span class="keyword">var</span> IMPORT_TEMPLATE = <span class="string">'import &#123;&#123;name&#125;&#125; from \'../packages/&#123;&#123;package&#125;&#125;/index.js\';'</span>;</span><br><span class="line"><span class="keyword">var</span> INSTALL_COMPONENT_TEMPLATE = <span class="string">'  &#123;&#123;name&#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> MAIN_TEMPLATE = <span class="string">`/* Automatically generated by './build/bin/build-entry.js' */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#123;include&#125;&#125;</span></span><br><span class="line"><span class="string">import locale from 'element-ui/src/locale';</span></span><br><span class="line"><span class="string">import CollapseTransition from 'element-ui/src/transitions/collapse-transition';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const components = [</span></span><br><span class="line"><span class="string">&#123;&#123;install&#125;&#125;,</span></span><br><span class="line"><span class="string">  CollapseTransition</span></span><br><span class="line"><span class="string">];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const install = function(Vue, opts = &#123;&#125;) &#123;</span></span><br><span class="line"><span class="string">  locale.use(opts.locale);</span></span><br><span class="line"><span class="string">  locale.i18n(opts.i18n);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  components.map(component =&gt; &#123;</span></span><br><span class="line"><span class="string">    Vue.component(component.name, component);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Vue.use(Loading.directive);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  const ELEMENT = &#123;&#125;;</span></span><br><span class="line"><span class="string">  ELEMENT.size = opts.size || '';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Vue.prototype.$loading = Loading.service;</span></span><br><span class="line"><span class="string">  Vue.prototype.$msgbox = MessageBox;</span></span><br><span class="line"><span class="string">  Vue.prototype.$alert = MessageBox.alert;</span></span><br><span class="line"><span class="string">  Vue.prototype.$confirm = MessageBox.confirm;</span></span><br><span class="line"><span class="string">  Vue.prototype.$prompt = MessageBox.prompt;</span></span><br><span class="line"><span class="string">  Vue.prototype.$notify = Notification;</span></span><br><span class="line"><span class="string">  Vue.prototype.$message = Message;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Vue.prototype.$ELEMENT = ELEMENT;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* istanbul ignore if */</span></span><br><span class="line"><span class="string">if (typeof window !== 'undefined' &amp;&amp; window.Vue) &#123;</span></span><br><span class="line"><span class="string">  install(window.Vue);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.exports = &#123;</span></span><br><span class="line"><span class="string">  version: '&#123;&#123;version&#125;&#125;',</span></span><br><span class="line"><span class="string">  locale: locale.use,</span></span><br><span class="line"><span class="string">  i18n: locale.i18n,</span></span><br><span class="line"><span class="string">  install,</span></span><br><span class="line"><span class="string">  CollapseTransition,</span></span><br><span class="line"><span class="string">  Loading,</span></span><br><span class="line"><span class="string">&#123;&#123;list&#125;&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.exports.default = module.exports;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> Components.font;</span><br><span class="line"><span class="comment">// 组件名</span></span><br><span class="line"><span class="keyword">var</span> ComponentNames = <span class="built_in">Object</span>.keys(Components);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> includeComponentTemplate = [];</span><br><span class="line"><span class="keyword">var</span> installTemplate = [];</span><br><span class="line"><span class="keyword">var</span> listTemplate = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历组件名解析template</span></span><br><span class="line">ComponentNames.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> componentName = uppercamelcase(name); <span class="comment">// 驼峰命名</span></span><br><span class="line"></span><br><span class="line">  includeComponentTemplate.push(render(IMPORT_TEMPLATE, &#123;</span><br><span class="line">    name: componentName,</span><br><span class="line">    package: name</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ([<span class="string">'Loading'</span>, <span class="string">'MessageBox'</span>, <span class="string">'Notification'</span>, <span class="string">'Message'</span>].indexOf(componentName) === <span class="number">-1</span>) &#123;</span><br><span class="line">    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, &#123;</span><br><span class="line">      name: componentName,</span><br><span class="line">      component: name</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (componentName !== <span class="string">'Loading'</span>) listTemplate.push(<span class="string">`  <span class="subst">$&#123;componentName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 主要template</span></span><br><span class="line"><span class="keyword">var</span> template = render(MAIN_TEMPLATE, &#123;</span><br><span class="line">  include: includeComponentTemplate.join(endOfLine),</span><br><span class="line">  install: installTemplate.join(<span class="string">','</span> + endOfLine),</span><br><span class="line">  version: process.env.VERSION || <span class="built_in">require</span>(<span class="string">'../../package.json'</span>).version,</span><br><span class="line">  list: listTemplate.join(<span class="string">','</span> + endOfLine)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导出文件</span></span><br><span class="line">fs.writeFileSync(OUTPUT_PATH, template);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[build entry] DONE:'</span>, OUTPUT_PATH);</span><br></pre></td></tr></table></figure></p><p>以上代码中，先是定义了三个 template，然后使用 render 方法来渲染这些 template。最后生成一个主要 template 导出为文件。render 函数中的第二个参数为 template 中 <code></code> 的数据。<br>这个 render 方法来自 <a href="https://www.npmjs.com/package/json-templater" target="_blank" rel="noopener">json-templater</a> 库，这个库可以将字符串编译为 js 代码。</p><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p>看看 element 都 depend 了些什么？下面对 element 的依赖作了注释。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">  // 异步验证器</span><br><span class="line">  "async-validator": "~1.8.1",</span><br><span class="line">  // vue和jsx合并参数的语法转译器？</span><br><span class="line">  "babel-helper-vue-jsx-merge-props": "^2.0.0",</span><br><span class="line">  // 深入合并</span><br><span class="line">  "deepmerge": "^1.2.0",</span><br><span class="line">  // 鼠标滚轮在多个浏览器之间的标准化。</span><br><span class="line">  "normalize-wheel": "^1.0.1",</span><br><span class="line">  // 方法的 Throttle/debounce？ https://www.npmjs.com/package/throttle-debounce</span><br><span class="line">  "throttle-debounce": "^1.0.1"</span><br><span class="line">&#125;,</span><br><span class="line">"peerDependencies": &#123;</span><br><span class="line">  // vue核心源码</span><br><span class="line">  "vue": "^2.5.2"</span><br><span class="line">&#125;,</span><br><span class="line">"devDependencies": &#123;</span><br><span class="line">  // 一个托管的全文、数字和分面搜索引擎，能够在第一次按键时提供实时结果。</span><br><span class="line">  "algoliasearch": "^3.24.5",</span><br><span class="line">  // babel</span><br><span class="line">  "babel-cli": "^6.14.0",</span><br><span class="line">  "babel-core": "^6.14.0",</span><br><span class="line">  "babel-loader": "^6.2.5",</span><br><span class="line">  "babel-plugin-add-module-exports": "^0.2.1",</span><br><span class="line">  "babel-plugin-module-resolver": "^2.2.0",</span><br><span class="line">  "babel-plugin-syntax-jsx": "^6.8.0",</span><br><span class="line">  "babel-plugin-transform-vue-jsx": "^3.3.0",</span><br><span class="line">  "babel-preset-es2015": "^6.14.0",</span><br><span class="line">  // chai断言库</span><br><span class="line">  "chai": "^3.5.0",</span><br><span class="line">  // 为服务器专门设计的核心jQuery的快速、灵活、精益的实现。</span><br><span class="line">  "cheerio": "^0.18.0",</span><br><span class="line">  // node fs工具</span><br><span class="line">  "chokidar": "^1.7.0",</span><br><span class="line">  // cooking前端构建工具</span><br><span class="line">  "cooking": "^1.5.4",</span><br><span class="line">  "cooking-lint": "0.1.3",</span><br><span class="line">  // 继承vue2配置项的cooking插件</span><br><span class="line">  "cooking-vue2": "^0.3.3",</span><br><span class="line">  // 复制webpack插件</span><br><span class="line">  "copy-webpack-plugin": "^4.1.1",</span><br><span class="line">  // 代码测试覆盖率</span><br><span class="line">  "coveralls": "^2.11.14",</span><br><span class="line">  // 跨平台支持UNIX命令</span><br><span class="line">  "cp-cli": "^1.0.2",</span><br><span class="line">  // 运行在平台上设置和使用环境变量的脚本。</span><br><span class="line">  "cross-env": "^3.1.3",</span><br><span class="line">  // css 加载器</span><br><span class="line">  "css-loader": "^0.28.7",</span><br><span class="line">  // es6 promise支持</span><br><span class="line">  "es6-promise": "^4.0.5",</span><br><span class="line">  // eslint语法检测</span><br><span class="line">  "eslint": "4.14.0",</span><br><span class="line">  "eslint-config-elemefe": "0.1.1",</span><br><span class="line">  "eslint-loader": "^1.9.0",</span><br><span class="line">  "eslint-plugin-html": "^4.0.1",</span><br><span class="line">  "eslint-plugin-json": "^1.2.0",</span><br><span class="line">  "extract-text-webpack-plugin": "^3.0.1",</span><br><span class="line">  // 文件加载和保存</span><br><span class="line">  "file-loader": "^1.1.5",</span><br><span class="line">  "file-save": "^0.2.0",</span><br><span class="line">  // 将文件发布到github的 gh-pages 分支</span><br><span class="line">  "gh-pages": "^0.11.0",</span><br><span class="line">  // gulp打包</span><br><span class="line">  "gulp": "^3.9.1",</span><br><span class="line">  "gulp-autoprefixer": "^4.0.0",</span><br><span class="line">  "gulp-cssmin": "^0.1.7",</span><br><span class="line">  "gulp-postcss": "^6.1.1",</span><br><span class="line">  "gulp-sass": "^3.1.0",</span><br><span class="line">  // js 高亮</span><br><span class="line">  "highlight.js": "^9.3.0",</span><br><span class="line">  // html加载器</span><br><span class="line">  "html-loader": "^0.5.1",</span><br><span class="line">  // html webpack插件</span><br><span class="line">  "html-webpack-plugin": "^2.30.1",</span><br><span class="line">  // A Webpack loader for injecting code into modules via their dependencies</span><br><span class="line">  "inject-loader": "^3.0.1",</span><br><span class="line">  // isparta instrumenter loader for webpack，用于测试</span><br><span class="line">  "isparta-loader": "^2.0.0",</span><br><span class="line">  // json加载器</span><br><span class="line">  "json-loader": "^0.5.7",</span><br><span class="line">  // json和js的模板生成工具</span><br><span class="line">  "json-templater": "^1.0.4",</span><br><span class="line">  // karma测试库</span><br><span class="line">  "karma": "^1.3.0",</span><br><span class="line">  "karma-chrome-launcher": "^2.2.0",</span><br><span class="line">  "karma-coverage": "^1.1.1",</span><br><span class="line">  "karma-mocha": "^1.2.0",</span><br><span class="line">  "karma-sinon-chai": "^1.2.4",</span><br><span class="line">  "karma-sourcemap-loader": "^0.3.7",</span><br><span class="line">  "karma-spec-reporter": "0.0.26",</span><br><span class="line">  "karma-webpack": "^1.8.0",</span><br><span class="line">  // 用于管理具有多个包的JavaScript项目的工具。</span><br><span class="line">  "lerna": "^2.0.0-beta.32",</span><br><span class="line">  // 模拟时间工具</span><br><span class="line">  "lolex": "^1.5.1",</span><br><span class="line">  // markdown解析器</span><br><span class="line">  "markdown-it": "^6.1.1",</span><br><span class="line">  "markdown-it-anchor": "^2.5.0",</span><br><span class="line">  "markdown-it-container": "^2.0.0",</span><br><span class="line">  // mocha测试库</span><br><span class="line">  "mocha": "^3.1.1",</span><br><span class="line">  // node.js 的 sass</span><br><span class="line">  "node-sass": "^4.5.3",</span><br><span class="line">  // 视差滚动 https://perspective.js.org/#/zh-cn/</span><br><span class="line">  "perspective.js": "^1.0.0",</span><br><span class="line">  // postcss</span><br><span class="line">  "postcss": "^5.1.2",</span><br><span class="line">  "postcss-loader": "0.11.1",</span><br><span class="line">  "postcss-salad": "^1.0.8",</span><br><span class="line">  // node深度删除模块</span><br><span class="line">  "rimraf": "^2.5.4",</span><br><span class="line">  // sass加载器</span><br><span class="line">  "sass-loader": "^6.0.6",</span><br><span class="line">  // sinon测试框架</span><br><span class="line">  "sinon": "^1.17.6",</span><br><span class="line">  "sinon-chai": "^2.8.0",</span><br><span class="line">  // 样式加载器</span><br><span class="line">  "style-loader": "^0.19.0",</span><br><span class="line">  // utf-8 字符转换</span><br><span class="line">  "transliteration": "^1.1.11",</span><br><span class="line">  // 驼峰写法</span><br><span class="line">  "uppercamelcase": "^1.1.0",</span><br><span class="line">  "url-loader": "^0.6.2",</span><br><span class="line">  // vue</span><br><span class="line">  "vue": "^2.5.2",</span><br><span class="line">  "vue-loader": "^13.3.0",</span><br><span class="line">  "vue-markdown-loader": "1",</span><br><span class="line">  "vue-router": "2.7.0",</span><br><span class="line">  "vue-template-compiler": "^2.5.2",</span><br><span class="line">  "vue-template-es2015-compiler": "^1.6.0",</span><br><span class="line">  // webpack</span><br><span class="line">  "webpack": "^3.7.1",</span><br><span class="line">  "webpack-dev-server": "^2.9.1",</span><br><span class="line">  "webpack-node-externals": "^1.6.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阿西吧，这依赖库真心多~~不知道他们如何找到这么多库的。</p><h1 id="src目录"><a href="#src目录" class="headerlink" title="src目录"></a>src目录</h1><p>再来看看项目结构部分。按常理源码肯定是放在 <code>src</code> 目录中的，我们找到 <code>src/index.js</code>。代码有点长，只贴出 <code>install</code> 方法部分了。说下都干了什么：导入所有组件，定义安装方法，判断环境执行 <code>install</code> 方法，最后整体导出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  locale.use(opts.locale);</span><br><span class="line">  locale.i18n(opts.i18n);</span><br><span class="line"></span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历将组件加入到Vue中</span></span><br><span class="line">    Vue.component(component.name, component);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载中</span></span><br><span class="line">  Vue.use(Loading.directive);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ELEMENT = &#123;&#125;;</span><br><span class="line">  ELEMENT.size = opts.size || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义Vue的原型 prototype</span></span><br><span class="line">  Vue.prototype.$loading = Loading.service;</span><br><span class="line">  Vue.prototype.$msgbox = MessageBox;</span><br><span class="line">  Vue.prototype.$alert = MessageBox.alert;</span><br><span class="line">  Vue.prototype.$confirm = MessageBox.confirm;</span><br><span class="line">  Vue.prototype.$prompt = MessageBox.prompt;</span><br><span class="line">  Vue.prototype.$notify = Notification;</span><br><span class="line">  Vue.prototype.$message = Message;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$ELEMENT = ELEMENT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore if */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从组件的导入 <code>import Button from &#39;../packages/button/index.js&#39;;</code> 可以看到所有组件都是在 packages 目录下的。这部分我们会在之后重点学习。<br>那么问题来了，既然组件都在 <code>packages</code> 中了，那么 <code>src</code> 目录下都干了些什么呢？来看看各个目录的功能：</p><ul><li>directive 实现滚轮优化和避免重复点击。</li><li>locale 用于 i18n 国际化功能。</li><li>mixins 看样子应该是用于混合到 Vue 实例的 options 中的。</li><li>transition 在渲染是操作style做过渡效果处理。</li><li>utils 工具文件夹。</li></ul><p>主要目的是项目结构，就不深入展开了。如有需要后面再讲。</p><h1 id="其他目录"><a href="#其他目录" class="headerlink" title="其他目录"></a>其他目录</h1><p>上面说过，package 目录中存放了所有 component 组件的代码。另外也存放了组件的样式 <code>.scss</code> 文件。<br>而对于type目录中，存放的 <code>.ts</code> 文件。都是 TypeScript 文件。但是有个问题，我不太清楚这些 <code>.ts</code> 都用在何处。而且在 package.json 中也未导入 TypeScript 的库，只是在更新日志中有 <code>新增 TypeScript 类型声明</code> 这么一句话。这点有所疑惑。<br>test 目录下是各个组件的单元测试用例，这部分是学习单元测试写法的很好的参考代码（我学习测试框架就是在这里学的）。需要学习单元测试的可以深入看看。<br>example 目录下是 element 的示例项目。我们的目的是学习源码，所以这部分先忽略~</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>简单了解了下项目的编译、项目的依赖库情况、项目的机构。下一篇开始学习一些组件的实现。逐步深入扒开element的神秘面纱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于面试需要，先来几发 element 源码学习博客。Vue 源码还将继续更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好，现在我们开始学习 element —— 最受欢迎的 Vue UI 框架。&lt;/p&gt;
&lt;h1 id=&quot;package-jso
      
    
    </summary>
    
    
      <category term="element源码学习" scheme="https://violetjack.github.io/tags/element%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习八 —— HTML解析细节学习</title>
    <link href="https://violetjack.github.io/2018/03/04/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AB%20%E2%80%94%E2%80%94%20HTML%E8%A7%A3%E6%9E%90%E7%BB%86%E8%8A%82%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/03/04/Vue.js源码学习八 —— HTML解析细节学习/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-07T02:03:20.107Z</updated>
    
    <content type="html"><![CDATA[<p>从上一篇博客中，我们知道了template编译的整体逻辑和template编译后用在了哪里。本文着重讲下HTML的解析过程。</p><h1 id="parse-方法"><a href="#parse-方法" class="headerlink" title="parse 方法"></a>parse 方法</h1><p>所有解析的起点就在 parse 方法中，parse方法最终将返回为一个 AST 语法树元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  warn = options.warn || baseWarn</span><br><span class="line"></span><br><span class="line">  platformIsPreTag = options.isPreTag || no</span><br><span class="line">  platformMustUseProp = options.mustUseProp || no</span><br><span class="line">  platformGetTagNamespace = options.getTagNamespace || no</span><br><span class="line"></span><br><span class="line">  transforms = pluckModuleFunction(options.modules, <span class="string">'transformNode'</span>)</span><br><span class="line">  preTransforms = pluckModuleFunction(options.modules, <span class="string">'preTransformNode'</span>)</span><br><span class="line">  postTransforms = pluckModuleFunction(options.modules, <span class="string">'postTransformNode'</span>)</span><br><span class="line"></span><br><span class="line">  delimiters = options.delimiters</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">const</span> preserveWhitespace = options.preserveWhitespace !== <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> root</span><br><span class="line">  <span class="keyword">let</span> currentParent</span><br><span class="line">  <span class="keyword">let</span> inVPre = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> inPre = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> warned = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">warnOnce</span>(<span class="params">msg</span>)</span>&#123;...&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeElement</span>(<span class="params">element</span>)</span>&#123;...&#125;</span><br><span class="line">  parseHTML(...)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，除了 <code>parseHTML</code>  方法外，其他都是定义变量、方法的行为。因此只需深入看 parseHTML 行为就好。<br>于是我们在 <code>src/core/compiler/parser/html-parser.js</code> 文件中找到 parseHTML 方法。</p><h1 id="parseHTML-中的几个方法"><a href="#parseHTML-中的几个方法" class="headerlink" title="parseHTML 中的几个方法"></a>parseHTML 中的几个方法</h1><p>在源码中可以看到，parseHTML 中有四个方法，我们来一一解读。</p><h2 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推进。向前推进n个字符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">advance</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  index += n</span><br><span class="line">  html = html.substring(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将index的值向后移动n位，然后从第n个字符开始截取 HTML 内容字符串。</p><h1 id="parseStartTag"><a href="#parseStartTag" class="headerlink" title="parseStartTag"></a>parseStartTag</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析开始标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseStartTag</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> start = html.match(startTagOpen)</span><br><span class="line">  <span class="keyword">if</span> (start) &#123;</span><br><span class="line">    <span class="keyword">const</span> match = &#123;</span><br><span class="line">      tagName: start[<span class="number">1</span>],</span><br><span class="line">      attrs: [],</span><br><span class="line">      start: index</span><br><span class="line">    &#125;</span><br><span class="line">    advance(start[<span class="number">0</span>].length)</span><br><span class="line">    <span class="keyword">let</span> end, attr</span><br><span class="line">    <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(attribute))) &#123;</span><br><span class="line">      advance(attr[<span class="number">0</span>].length)</span><br><span class="line">      match.attrs.push(attr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end) &#123;</span><br><span class="line">      match.unarySlash = end[<span class="number">1</span>]</span><br><span class="line">      advance(end[<span class="number">0</span>].length)</span><br><span class="line">      match.end = index</span><br><span class="line">      <span class="keyword">return</span> match</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法使用正则匹配获取HTML开始标签，并且将开始标签中的属性都保存到一个数组中。最终返回标签结果：标签名、标签属性和标签起始结束位置。例如标签为 <code>&lt;button v-on:click=&quot;hey&quot;&gt;</code> 返回结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">" v-on:click='hey'"</span>,</span><br><span class="line">            <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="string">"="</span>,</span><br><span class="line">            <span class="string">"hey"</span>,</span><br><span class="line">            <span class="string">"undefined"</span>,</span><br><span class="line">            <span class="string">"undefined"</span>,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"end"</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">"tagName"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"unarySlash"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="handleStartTag"><a href="#handleStartTag" class="headerlink" title="handleStartTag"></a>handleStartTag</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理开始标签，将开始标签中的属性提取出来。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleStartTag</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagName = match.tagName</span><br><span class="line">  <span class="keyword">const</span> unarySlash = match.unarySlash</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析结束标签</span></span><br><span class="line">  <span class="keyword">if</span> (expectHTML) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastTag === <span class="string">'p'</span> &amp;&amp; isNonPhrasingTag(tagName)) &#123;</span><br><span class="line">      parseEndTag(lastTag)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canBeLeftOpenTag(tagName) &amp;&amp; lastTag === tagName) &#123;</span><br><span class="line">      parseEndTag(tagName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unary = isUnaryTag(tagName) || !!unarySlash</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析开始标签的属性名和属性值</span></span><br><span class="line">  <span class="keyword">const</span> l = match.attrs.length</span><br><span class="line">  <span class="keyword">const</span> attrs = <span class="keyword">new</span> <span class="built_in">Array</span>(l)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = match.attrs[i]</span><br><span class="line">    <span class="comment">// hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778</span></span><br><span class="line">    <span class="keyword">if</span> (IS_REGEX_CAPTURING_BROKEN &amp;&amp; args[<span class="number">0</span>].indexOf(<span class="string">'""'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">3</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">3</span>] &#125;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">4</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">4</span>] &#125;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">5</span>] === <span class="string">''</span>) &#123; <span class="keyword">delete</span> args[<span class="number">5</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> value = args[<span class="number">3</span>] || args[<span class="number">4</span>] || args[<span class="number">5</span>] || <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> shouldDecodeNewlines = tagName === <span class="string">'a'</span> &amp;&amp; args[<span class="number">1</span>] === <span class="string">'href'</span></span><br><span class="line">      ? options.shouldDecodeNewlinesForHref</span><br><span class="line">      : options.shouldDecodeNewlines</span><br><span class="line">    attrs[i] = &#123;</span><br><span class="line">      name: args[<span class="number">1</span>],</span><br><span class="line">      value: decodeAttr(value, shouldDecodeNewlines)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将标签及其属性推如堆栈中</span></span><br><span class="line">  <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">    stack.push(&#123; <span class="attr">tag</span>: tagName, <span class="attr">lowerCasedTag</span>: tagName.toLowerCase(), <span class="attr">attrs</span>: attrs &#125;)</span><br><span class="line">    lastTag = tagName</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发 options.start 方法。</span></span><br><span class="line">  <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">    options.start(tagName, attrs, unary, match.start, match.end)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于处理开始标签。如果是可以直接结束的标签，直接解析结束标签；然后遍历查找属性的属性值 value 传入数组；将开始标签的标签名、小写标签名、属性值传入堆栈中；将当前标签变为最后标签；最后触发 options.start 方法。<br>最后推入堆栈的数据如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"lowerCasedTag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"hey"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="parseEndTag"><a href="#parseEndTag" class="headerlink" title="parseEndTag"></a>parseEndTag</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析结束TAG</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseEndTag</span> (<span class="params">tagName, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pos, lowerCasedTagName</span><br><span class="line">  <span class="keyword">if</span> (start == <span class="literal">null</span>) start = index</span><br><span class="line">  <span class="keyword">if</span> (end == <span class="literal">null</span>) end = index</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">    lowerCasedTagName = tagName.toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到同类的开始 TAG 在堆栈中的位置</span></span><br><span class="line">  <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">    <span class="keyword">for</span> (pos = stack.length - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; pos--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (stack[pos].lowerCasedTag === lowerCasedTagName) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If no tag name is provided, clean shop</span></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对堆栈中的大于等于 pos 的开始标签使用 options.end 方法。</span></span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Close all the open elements, up the stack</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = stack.length - <span class="number">1</span>; i &gt;= pos; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">        (i &gt; pos || !tagName) &amp;&amp;</span><br><span class="line">        options.warn</span><br><span class="line">      ) &#123;</span><br><span class="line">        options.warn(</span><br><span class="line">          <span class="string">`tag &lt;<span class="subst">$&#123;stack[i].tag&#125;</span>&gt; has no matching end tag.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (options.end) &#123;</span><br><span class="line">        options.end(stack[i].tag, start, end)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the open elements from the stack</span></span><br><span class="line">    <span class="comment">// 从栈中移除元素，并标记为 lastTag</span></span><br><span class="line">    stack.length = pos</span><br><span class="line">    lastTag = pos &amp;&amp; stack[pos - <span class="number">1</span>].tag</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">'br'</span>) &#123;</span><br><span class="line">    <span class="comment">// 回车标签</span></span><br><span class="line">    <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">      options.start(tagName, [], <span class="literal">true</span>, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">'p'</span>) &#123;</span><br><span class="line">    <span class="comment">// 段落标签</span></span><br><span class="line">    <span class="keyword">if</span> (options.start) &#123;</span><br><span class="line">      options.start(tagName, [], <span class="literal">false</span>, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.end) &#123;</span><br><span class="line">      options.end(tagName, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析结束标签。先是获取开始结束位置、小写标签名；然后遍历堆栈找到同类开始 TAG 的位置；对找到的 TAG 位置后的所有标签都执行 options.end 方法；将 pos 后的所有标签从堆栈中移除，并修改最后标签为当前堆栈最后一个标签的标签名；如果是br标签，执行 option.start 方法；如果是 p 标签，执行 options.start 和options.end 方法。（最后两个操作让我猜想 start 和 end 方法用于标签的开始和结束行为中。）</p><h1 id="parseHTML-的整体逻辑"><a href="#parseHTML-的整体逻辑" class="headerlink" title="parseHTML 的整体逻辑"></a>parseHTML 的整体逻辑</h1><p>之前所说的 options.start 等方法，其实在 parseHTML 的传参中传入的 start、end、chars、comment 这四个方法，这些方法会在parseHTML 方法特定的地方被使用，而这些方法中的逻辑下一节再讲。<br>这里先来看看在 parseHTML 方法的整体逻辑：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/html-parser.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parseHTML</span> (<span class="params">html, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">const</span> expectHTML = options.expectHTML</span><br><span class="line">  <span class="keyword">const</span> isUnaryTag = options.isUnaryTag || no</span><br><span class="line">  <span class="keyword">const</span> canBeLeftOpenTag = options.canBeLeftOpenTag || no</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> last, lastTag</span><br><span class="line">  <span class="keyword">while</span> (html) &#123;</span><br><span class="line">    last = html</span><br><span class="line">    <span class="comment">// 如果没有lastTag，并确保我们不是在一个纯文本内容元素中：script、style、textarea</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTag || !isPlainTextElement(lastTag)) &#123;</span><br><span class="line">      <span class="comment">// 文本结束，通过&lt;查找。</span></span><br><span class="line">      <span class="keyword">let</span> textEnd = html.indexOf(<span class="string">'&lt;'</span>)</span><br><span class="line">      <span class="comment">// 文本结束位置在第一个字符，即第一个标签为&lt;</span></span><br><span class="line">      <span class="keyword">if</span> (textEnd === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 注释匹配</span></span><br><span class="line">        <span class="keyword">if</span> (comment.test(html)) &#123;</span><br><span class="line">          <span class="keyword">const</span> commentEnd = html.indexOf(<span class="string">'--&gt;'</span>)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (commentEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果需要保留注释，执行 option.comment 方法</span></span><br><span class="line">            <span class="keyword">if</span> (options.shouldKeepComment) &#123;</span><br><span class="line">              options.comment(html.substring(<span class="number">4</span>, commentEnd))</span><br><span class="line">            &#125;</span><br><span class="line">            advance(commentEnd + <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment</span></span><br><span class="line">        <span class="comment">// 条件注释</span></span><br><span class="line">        <span class="keyword">if</span> (conditionalComment.test(html)) &#123;</span><br><span class="line">          <span class="keyword">const</span> conditionalEnd = html.indexOf(<span class="string">']&gt;'</span>)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (conditionalEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            advance(conditionalEnd + <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Doctype:</span></span><br><span class="line">        <span class="keyword">const</span> doctypeMatch = html.match(doctype)</span><br><span class="line">        <span class="keyword">if</span> (doctypeMatch) &#123;</span><br><span class="line">          advance(doctypeMatch[<span class="number">0</span>].length)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End tag: 结束标签</span></span><br><span class="line">        <span class="keyword">const</span> endTagMatch = html.match(endTag)</span><br><span class="line">        <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">          <span class="keyword">const</span> curIndex = index</span><br><span class="line">          advance(endTagMatch[<span class="number">0</span>].length)</span><br><span class="line">          <span class="comment">// 解析结束标签</span></span><br><span class="line">          parseEndTag(endTagMatch[<span class="number">1</span>], curIndex, index)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start tag: 开始标签</span></span><br><span class="line">        <span class="keyword">const</span> startTagMatch = parseStartTag()</span><br><span class="line">        <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">          handleStartTag(startTagMatch)</span><br><span class="line">          <span class="keyword">if</span> (shouldIgnoreFirstNewline(lastTag, html)) &#123;</span><br><span class="line">            advance(<span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// &lt; 标签位置大于等于0，即标签中有内容</span></span><br><span class="line">      <span class="keyword">let</span> text, rest, next</span><br><span class="line">      <span class="keyword">if</span> (textEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 截取从 0 - textEnd 的字符串</span></span><br><span class="line">        rest = html.slice(textEnd)</span><br><span class="line">        <span class="comment">// 获取在普通字符串中的&lt;字符，而不是开始标签、结束标签、注释、条件注释</span></span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">          !endTag.test(rest) &amp;&amp;</span><br><span class="line">          !startTagOpen.test(rest) &amp;&amp;</span><br><span class="line">          !comment.test(rest) &amp;&amp;</span><br><span class="line">          !conditionalComment.test(rest)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// &lt; in plain text, be forgiving and treat it as text</span></span><br><span class="line">          next = rest.indexOf(<span class="string">'&lt;'</span>, <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span> (next &lt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">          textEnd += next</span><br><span class="line">          rest = html.slice(textEnd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终截取字符串内容</span></span><br><span class="line">        text = html.substring(<span class="number">0</span>, textEnd)</span><br><span class="line">        advance(textEnd)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (textEnd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        text = html</span><br><span class="line">        html = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 绘制文本内容，使用 options.char 方法。</span></span><br><span class="line">      <span class="keyword">if</span> (options.chars &amp;&amp; text) &#123;</span><br><span class="line">        options.chars(text)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果lastTag 为 script、style、textarea</span></span><br><span class="line">      <span class="keyword">let</span> endTagLength = <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> stackedTag = lastTag.toLowerCase()</span><br><span class="line">      <span class="keyword">const</span> reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'([\\s\\S]*?)(&lt;/'</span> + stackedTag + <span class="string">'[^&gt;]*&gt;)'</span>, <span class="string">'i'</span>))</span><br><span class="line">      <span class="keyword">const</span> rest = html.replace(reStackedTag, <span class="function"><span class="keyword">function</span> (<span class="params">all, text, endTag</span>) </span>&#123;</span><br><span class="line">        endTagLength = endTag.length</span><br><span class="line">        <span class="keyword">if</span> (!isPlainTextElement(stackedTag) &amp;&amp; stackedTag !== <span class="string">'noscript'</span>) &#123;</span><br><span class="line">          text = text</span><br><span class="line">            .replace(<span class="regexp">/&lt;!\--([\s\S]*?)--&gt;/g</span>, <span class="string">'$1'</span>) <span class="comment">// &lt;!--xxx--&gt; </span></span><br><span class="line">            .replace(<span class="regexp">/&lt;!\[CDATA\[([\s\S]*?)]]&gt;/g</span>, <span class="string">'$1'</span>) <span class="comment">//&lt;!CDATAxxx&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldIgnoreFirstNewline(stackedTag, text)) &#123;</span><br><span class="line">          text = text.slice(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理文本内容，并使用 options.char 方法。</span></span><br><span class="line">        <span class="keyword">if</span> (options.chars) &#123;</span><br><span class="line">          options.chars(text)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">      &#125;)</span><br><span class="line">      index += html.length - rest.length</span><br><span class="line">      html = rest</span><br><span class="line">      <span class="comment">// 解析结束tag</span></span><br><span class="line">      parseEndTag(stackedTag, index - endTagLength, index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// html文本到最后</span></span><br><span class="line">    <span class="keyword">if</span> (html === last) &#123;</span><br><span class="line">      <span class="comment">// 执行 options.chars</span></span><br><span class="line">      options.chars &amp;&amp; options.chars(html)</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !stack.length &amp;&amp; options.warn) &#123;</span><br><span class="line">        options.warn(<span class="string">`Mal-formatted tag at end of template: "<span class="subst">$&#123;html&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清理所有残留标签</span></span><br><span class="line">  parseEndTag()</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的解析都写在注释里面了。<br>其实就是利用正则循环处理 html 文本内容，最后使用 advance 方法来截取后一段 html 文本。在解析过程中执行了 options 中的一些方法。<br>下面我们来看看传入的方法都做了些什么？</p><h1 id="parseHTML-传参的几个方法"><a href="#parseHTML-传参的几个方法" class="headerlink" title="parseHTML 传参的几个方法"></a>parseHTML 传参的几个方法</h1><h2 id="warn"><a href="#warn" class="headerlink" title="warn"></a>warn</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/compiler/parser/index.js</span></span><br><span class="line">warn = options.warn || baseWarn</span><br></pre></td></tr></table></figure><p>如果options中有 warn 方法，使用该方法。否则调用 baseWarn 方法。</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">start (tag, attrs, unary) &#123;</span><br><span class="line">  <span class="comment">// 确定命名空间</span></span><br><span class="line">  <span class="keyword">const</span> ns = (currentParent &amp;&amp; currentParent.ns) || platformGetTagNamespace(tag)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 IE 的 SVG bug</span></span><br><span class="line">  <span class="keyword">if</span> (isIE &amp;&amp; ns === <span class="string">'svg'</span>) &#123;</span><br><span class="line">    attrs = guardIESVGBug(attrs)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取AST元素</span></span><br><span class="line">  <span class="keyword">let</span> element: ASTElement = createASTElement(tag, attrs, currentParent)</span><br><span class="line">  <span class="keyword">if</span> (ns) &#123;</span><br><span class="line">    element.ns = ns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isForbiddenTag(element) &amp;&amp; !isServerRendering()) &#123;</span><br><span class="line">    element.forbidden = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历执行 preTransforms 方法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; preTransforms.length; i++) &#123;</span><br><span class="line">    element = preTransforms[i](element, options) || element</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理各种方法</span></span><br><span class="line">  <span class="keyword">if</span> (!inVPre) &#123;</span><br><span class="line">    <span class="comment">// v-pre</span></span><br><span class="line">    processPre(element)</span><br><span class="line">    <span class="keyword">if</span> (element.pre) &#123;</span><br><span class="line">      inVPre = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (platformIsPreTag(element.tag)) &#123;</span><br><span class="line">    inPre = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inVPre) &#123;</span><br><span class="line">    <span class="comment">// 处理原始属性</span></span><br><span class="line">    processRawAttrs(element)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!element.processed) &#123;</span><br><span class="line">    <span class="comment">// v-for v-if v-once</span></span><br><span class="line">    processFor(element)</span><br><span class="line">    processIf(element)</span><br><span class="line">    processOnce(element)</span><br><span class="line">    <span class="comment">// 元素填充？</span></span><br><span class="line">    processElement(element, options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查根节点约束</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkRootConstraints</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.tag === <span class="string">'slot'</span> || el.tag === <span class="string">'template'</span>) &#123;</span><br><span class="line">        warnOnce(</span><br><span class="line">          <span class="string">`Cannot use &lt;<span class="subst">$&#123;el.tag&#125;</span>&gt; as component root element because it may `</span> +</span><br><span class="line">          <span class="string">'contain multiple nodes.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (el.attrsMap.hasOwnProperty(<span class="string">'v-for'</span>)) &#123;</span><br><span class="line">        warnOnce(</span><br><span class="line">          <span class="string">'Cannot use v-for on stateful component root element because '</span> +</span><br><span class="line">          <span class="string">'it renders multiple elements.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 语法树树管理</span></span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="comment">// 无root</span></span><br><span class="line">    root = element</span><br><span class="line">    checkRootConstraints(root)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!stack.length) &#123;</span><br><span class="line">    <span class="comment">// 允许有 v-if, v-else-if 和 v-else 的根元素</span></span><br><span class="line">    <span class="keyword">if</span> (root.if &amp;&amp; (element.elseif || element.else)) &#123;</span><br><span class="line">      checkRootConstraints(element)</span><br><span class="line">      <span class="comment">// 添加 if 条件</span></span><br><span class="line">      addIfCondition(root, &#123;</span><br><span class="line">        exp: element.elseif,</span><br><span class="line">        block: element</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warnOnce(</span><br><span class="line">        <span class="string">`Component template should contain exactly one root element. `</span> +</span><br><span class="line">        <span class="string">`If you are using v-if on multiple elements, `</span> +</span><br><span class="line">        <span class="string">`use v-else-if to chain them instead.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (currentParent &amp;&amp; !element.forbidden) &#123;</span><br><span class="line">    <span class="comment">// v-else-if v-else</span></span><br><span class="line">    <span class="keyword">if</span> (element.elseif || element.else) &#123;</span><br><span class="line">      <span class="comment">// 处理 if 条件</span></span><br><span class="line">      processIfConditions(element, currentParent)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.slotScope) &#123; <span class="comment">// slot-scope</span></span><br><span class="line">      currentParent.plain = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">const</span> name = element.slotTarget || <span class="string">'"default"'</span></span><br><span class="line">      ;(currentParent.scopedSlots || (currentParent.scopedSlots = &#123;&#125;))[name] = element</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将元素插入 children 数组中</span></span><br><span class="line">      currentParent.children.push(element)</span><br><span class="line">      element.parent = currentParent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">    currentParent = element</span><br><span class="line">    stack.push(element)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭元素</span></span><br><span class="line">    closeElement(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其实start方法就是处理 element 元素的过程。确定命名空间；创建AST元素 element；执行预处理；定义root；处理各类 v- 标签的逻辑；最后更新 root、currentParent、stack 的结果。<br>其中关键点在于 createASTElement 方法。可以看到该方法传递了 tag、attrs和currentParent。其中前两个参数是不是很熟悉？就是我们在 parseHTML 的 handleStartTag 方法中传给堆栈数组中的数据对象。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"lowerCasedTag"</span>: <span class="string">"button"</span>,</span><br><span class="line">    <span class="attr">"attrs"</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"v-on:click"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"hey"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终通过 createASTElement 方法定义了一个新的 AST 对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AST元素</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  attrs: Array&lt;Attr&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent: ASTElement | void</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="number">1</span>,</span><br><span class="line">    tag,</span><br><span class="line">    attrsList: attrs,</span><br><span class="line">    attrsMap: makeAttrsMap(attrs),</span><br><span class="line">    parent,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">end () &#123;</span><br><span class="line">  <span class="comment">// 删除尾随空格</span></span><br><span class="line">  <span class="keyword">const</span> element = stack[stack.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> lastNode = element.children[element.children.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (lastNode &amp;&amp; lastNode.type === <span class="number">3</span> &amp;&amp; lastNode.text === <span class="string">' '</span> &amp;&amp; !inPre) &#123;</span><br><span class="line">    element.children.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 退栈</span></span><br><span class="line">  stack.length -= <span class="number">1</span></span><br><span class="line">  currentParent = stack[stack.length - <span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 关闭元素</span></span><br><span class="line">  closeElement(element)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>end方法就很简单了，就是一个清理结束的过程。<br>从这里可以看到，stack中存的是个有序的数组，数组最后一个值永远是父级元素；currentParent表示当前的父级元素。其实也很好理解，收集HTML元素的时候是从最外层元素向内收集的，处理HTML内容的时候是从最内部元素向外处理的。所以，当最内部元素处理完后，将元素从对线中移除，开始处理当前最内部的元素。</p><h2 id="chars"><a href="#chars" class="headerlink" title="chars"></a>chars</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">chars (text: string) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!currentParent) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// IE textarea placeholder bug</span></span><br><span class="line">  <span class="keyword">if</span> (isIE &amp;&amp;</span><br><span class="line">    currentParent.tag === <span class="string">'textarea'</span> &amp;&amp;</span><br><span class="line">    currentParent.attrsMap.placeholder === text</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取元素 children</span></span><br><span class="line">  <span class="keyword">const</span> children = currentParent.children</span><br><span class="line">  <span class="comment">// 获取文本内容</span></span><br><span class="line">  text = inPre || text.trim()</span><br><span class="line">    ? isTextTag(currentParent) ? text : decodeHTMLCached(text)</span><br><span class="line">    <span class="comment">// only preserve whitespace if its not right after a starting tag</span></span><br><span class="line">    : preserveWhitespace &amp;&amp; children.length ? <span class="string">' '</span> : <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (text) &#123;</span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="comment">// inVPre 是判断 v-pre 的</span></span><br><span class="line">    <span class="keyword">if</span> (!inVPre &amp;&amp; text !== <span class="string">' '</span> &amp;&amp; (res = parseText(text, delimiters))) &#123;</span><br><span class="line">      <span class="comment">// 表达式，会转为 _s(message) 表达式</span></span><br><span class="line">      children.push(&#123;</span><br><span class="line">        type: <span class="number">2</span>,</span><br><span class="line">        expression: res.expression,</span><br><span class="line">        tokens: res.tokens,</span><br><span class="line">        text</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text !== <span class="string">' '</span> || !children.length || children[children.length - <span class="number">1</span>].text !== <span class="string">' '</span>) &#123;</span><br><span class="line">      <span class="comment">// 纯文本内容</span></span><br><span class="line">      children.push(&#123;</span><br><span class="line">        type: <span class="number">3</span>,</span><br><span class="line">        text</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>chars方法用来处理非HTML标签的文本。如果是表达式，通过 parseText 方法解析文本内容并传递给当前元素的 children；如果是普通文本直接传递给当前元素的 children。</p><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">comment (text: string) &#123;</span><br><span class="line">  currentParent.children.push(&#123;</span><br><span class="line">    type: <span class="number">3</span>,</span><br><span class="line">    text,</span><br><span class="line">    isComment: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>comment方法用来保存需要保存在语法树中的注释。它与保存普通文本类似，只是多了 <code>isComment: true</code>。</p><h1 id="生成语法树"><a href="#生成语法树" class="headerlink" title="生成语法树"></a>生成语法树</h1><p>我这里写了个demo，并且抓取了AST元素最后生成结果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hey<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- this is vue parse demo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"hey"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">"Hey Vue.js"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                hey() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.message = <span class="string">"Hey Button"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/1987062-d7068bf059b179ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AST对象"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后整理理一下思路:</p><ul><li>parseHTML 中的方法用于处理HTML开始和结束标签。</li><li>parseHTML 方法的整体逻辑是用正则判断各种情况，进行不同的处理。其中调用到了 options 中的自定义方法。</li><li>options 中的自定义方法用于处理AST语法树，最终返回出整个AST语法树对象。</li></ul><p>可以这么说，parseHTML 方法中仅仅是使用正则解析 HTML 的行为，options 中的方法则用于自定义方法和处理 AST 语法树对象。</p><p>OK！HTML的解析部分就讲解完啦~配合着之前的那篇<a href="https://www.jianshu.com/p/0734cc319aa3" target="_blank" rel="noopener">学习Vue中那些正则表达式</a>，顺着我的思路，相信一定可以顺利GET解析过程的。</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从上一篇博客中，我们知道了template编译的整体逻辑和template编译后用在了哪里。本文着重讲下HTML的解析过程。&lt;/p&gt;
&lt;h1 id=&quot;parse-方法&quot;&gt;&lt;a href=&quot;#parse-方法&quot; class=&quot;headerlink&quot; title=&quot;parse 
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习七 —— template 解析过程学习</title>
    <link href="https://violetjack.github.io/2018/03/04/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%83%20%E2%80%94%E2%80%94%20template%20%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/03/04/Vue.js源码学习七 —— template 解析过程学习/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-07T02:02:05.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这次，来学习下Vue是如何解析HTML代码的。</p></blockquote><h1 id="template-解析用在哪"><a href="#template-解析用在哪" class="headerlink" title="template 解析用在哪"></a>template 解析用在哪</h1><p>从之前学习 Render 的过程中我们知道，template 的编译在 <code>$mount</code> 方法中出现过。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/entry-runtime-with-compiler.js</span></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          <span class="comment">// 首字母为#号，看作是ID。</span></span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        <span class="comment">// 为真实 DOM，直接获取html</span></span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      <span class="comment">// 获取 HTML</span></span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">// 进行编译并赋值给 vm.$options</span></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>)</span><br><span class="line">      <span class="comment">// 渲染函数</span></span><br><span class="line">      options.render = render</span><br><span class="line">      <span class="comment">// 静态渲染方法</span></span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实以上代码总结起来就4步：</p><ol><li>获取el元素。</li><li>判断el是否为body或者html。</li><li>为$options编译render函数。</li><li>执行之前的mount函数。</li></ol><p>关键在于第三步，编译 render 函数上。先获取 template，即获取HTML内容，然后执行 compileToFunctions 来编译，最后将 render 和 staticRenderFns 传给 vm.$options 对象。<br>顺便看看这两个方法都用在哪里？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render-helpers/render-static.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderStatic</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  index: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  isInFor: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cached = <span class="keyword">this</span>._staticTrees || (<span class="keyword">this</span>._staticTrees = [])</span><br><span class="line">  <span class="keyword">let</span> tree = cached[index]</span><br><span class="line">  <span class="keyword">if</span> (tree &amp;&amp; !isInFor) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// otherwise, render a fresh tree.</span></span><br><span class="line">  tree = cached[index] = <span class="keyword">this</span>.$options.staticRenderFns[index].call(</span><br><span class="line">    <span class="keyword">this</span>._renderProxy,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">this</span> </span><br><span class="line">  )</span><br><span class="line">  markStatic(tree, <span class="string">`__static__<span class="subst">$&#123;index&#125;</span>`</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，template 编译生成的方法都用在了渲染行为中。</p><h1 id="编译-template-的整体逻辑"><a href="#编译-template-的整体逻辑" class="headerlink" title="编译 template 的整体逻辑"></a>编译 template 的整体逻辑</h1><p>下面我们顺着编译代码往下找。在 mount 方法中执行了 <code>compileToFunctions</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">  shouldDecodeNewlines,</span><br><span class="line">  shouldDecodeNewlinesForHref,</span><br><span class="line"> delimiters: options.delimiters,</span><br><span class="line"> comments: options.comments</span><br><span class="line">&#125;, <span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></p><p>找到方法的所在之处：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/compiler/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; compile, compileToFunctions &#125; = createCompiler(baseOptions)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCompiler = createCompilerCreator(<span class="function"><span class="keyword">function</span> <span class="title">baseCompile</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">CompiledResult</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将template转为AST语法树对象</span></span><br><span class="line">  <span class="keyword">const</span> ast = parse(template.trim(), options)</span><br><span class="line">  <span class="keyword">if</span> (options.optimize !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 优化</span></span><br><span class="line">    optimize(ast, options)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成渲染代码</span></span><br><span class="line">  <span class="keyword">const</span> code = generate(ast, options)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ast,</span><br><span class="line">    render: code.render,</span><br><span class="line">    staticRenderFns: code.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>先看里面的 baseCompile 方法，其作用为将 HTML 字符串转为 AST 抽象语法树对象，并进行优化，最后生成渲染代码。返回值中 render 为渲染字符串，staticRenderFns 为渲染字符串数组。<br>之后再来看看 createCompilerCreator 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/create-compiler.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompilerCreator</span> (<span class="params">baseCompile: Function</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompiler</span> (<span class="params">baseOptions: CompilerOptions</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compile</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">      options?: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>): <span class="title">CompiledResult</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> finalOptions = <span class="built_in">Object</span>.create(baseOptions)</span><br><span class="line">      <span class="keyword">const</span> errors = []</span><br><span class="line">      <span class="keyword">const</span> tips = []</span><br><span class="line">      finalOptions.warn = <span class="function">(<span class="params">msg, tip</span>) =&gt;</span> &#123;</span><br><span class="line">        (tip ? tips : errors).push(msg)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (options) &#123;</span><br><span class="line">        <span class="comment">// merge custom modules</span></span><br><span class="line">        <span class="keyword">if</span> (options.modules) &#123;</span><br><span class="line">          finalOptions.modules =</span><br><span class="line">            (baseOptions.modules || []).concat(options.modules)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// merge custom directives</span></span><br><span class="line">        <span class="keyword">if</span> (options.directives) &#123;</span><br><span class="line">          finalOptions.directives = extend(</span><br><span class="line">            <span class="built_in">Object</span>.create(baseOptions.directives || <span class="literal">null</span>),</span><br><span class="line">            options.directives</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// copy other options</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">          <span class="keyword">if</span> (key !== <span class="string">'modules'</span> &amp;&amp; key !== <span class="string">'directives'</span>) &#123;</span><br><span class="line">            finalOptions[key] = options[key]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 执行传入的编译方法，并返回结果对象</span></span><br><span class="line">      <span class="keyword">const</span> compiled = baseCompile(template, finalOptions)</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        errors.push.apply(errors, detectErrors(compiled.ast))</span><br><span class="line">      &#125;</span><br><span class="line">      compiled.errors = errors</span><br><span class="line">      compiled.tips = tips</span><br><span class="line">      <span class="keyword">return</span> compiled</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      compile,</span><br><span class="line">      compileToFunctions: createCompileToFunctionFn(compile)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>来看 compile 方法：合并 option 配置参数，然后执行外部传入的 baseCompile 方法，返回方法执行的返回结果。最终返回 <code>{ compile, compileToFunctions }</code>，<br>createCompileToFunctionFn 代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createCompileToFunctionFn</span> (<span class="params">compile: Function</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义缓存</span></span><br><span class="line">  <span class="keyword">const</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">compileToFunctions</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">    options?: CompilerOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">CompiledFunctionResult</span> </span>&#123;</span><br><span class="line">    options = extend(&#123;&#125;, options)</span><br><span class="line">    <span class="keyword">const</span> warn = options.warn || baseWarn</span><br><span class="line">    <span class="keyword">delete</span> options.warn</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确认缓存，有缓存直接返回</span></span><br><span class="line">    <span class="keyword">const</span> key = options.delimiters</span><br><span class="line">      ? <span class="built_in">String</span>(options.delimiters) + template</span><br><span class="line">      : template</span><br><span class="line">    <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compile</span></span><br><span class="line">    <span class="keyword">const</span> compiled = compile(template, options)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// turn code into functions</span></span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> fnGenErrors = []</span><br><span class="line">    <span class="comment">// 生成 render 和 staticRenderFns 方法</span></span><br><span class="line">    res.render = createFunction(compiled.render, fnGenErrors)</span><br><span class="line">    res.staticRenderFns = compiled.staticRenderFns.map(<span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> createFunction(code, fnGenErrors)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 返回方法并缓存</span></span><br><span class="line">    <span class="keyword">return</span> (cache[key] = res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就找到了我们在 mount 方法中看到的 render 和 staticRenderFns 方法了。createCompileToFunctionFn 方法其实就是将传入的 render 和 staticRenderFns 字符串转为真实方法。</p><p>至此，捋一下思路：<br>template的编译用于render渲染行为中，所以template最后生成渲染函数。<br>template 的解析过程中</p><ul><li>通过 baseCompile 方法进行编译；</li><li>通过 createCompilerCreator 中的 compile 方法合并配置参数并返回 baseCompile 方法执行结果；</li><li>createCompilerCreator 返回 compile 方法和 compileToFunctions 方法；</li><li>compileToFunctions 方法用于将方法字符串生成真实方法。</li></ul><p>其实 <code>const { compile, compileToFunctions } = createCompiler(baseOptions)</code> 就是 createCompilerCreator 的返回结果。所以，在 mount 中使用的 compileToFunctions 方法就是 createCompileToFunctionFn 方法生成的。</p><p><img src="http://upload-images.jianshu.io/upload_images/1987062-61c14118fb4d28d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="逻辑图"></p><h1 id="baseCompile"><a href="#baseCompile" class="headerlink" title="baseCompile"></a>baseCompile</h1><p>整体思路滤清了，来看看关键的 baseCompile 方法。该方法进行了三步操作：</p><ul><li>parse 将HTML解析为 AST 元素。</li><li>optimize 渲染优化。</li><li>generate 解析成基本的 render 函数。</li></ul><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>先来讲讲AST抽象语法树。维基百科的解释是：</p><blockquote><p>在计算机科学中，抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。</p></blockquote><p>parse 方法的最终目的就是将 template 解析为 AST 元素对象。在 parse 解析方法中，用到了大量的正则。正则的具体用法之前写过一篇文章：<a href="https://www.jianshu.com/p/0734cc319aa3" target="_blank" rel="noopener">一起来理解正则表达式</a>。代码量很多，考虑了各种解析的情况。这里不赘述太多，找一条主线来学习，其他内容我将在<a href="https://github.com/violetjack/VueStudyDemos/tree/master/VueCodes/vue" target="_blank" rel="noopener">项目</a>中注释。</p><p>来看看 parse 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  template: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ASTElement</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义了各种参数和方法</span></span><br><span class="line">  parseHTML(template, &#123;</span><br><span class="line">    warn,</span><br><span class="line">    expectHTML: options.expectHTML,</span><br><span class="line">    isUnaryTag: options.isUnaryTag,</span><br><span class="line">    canBeLeftOpenTag: options.canBeLeftOpenTag,</span><br><span class="line">    shouldDecodeNewlines: options.shouldDecodeNewlines,</span><br><span class="line">    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,</span><br><span class="line">    shouldKeepComment: options.comments,</span><br><span class="line">    start (tag, attrs, unary) &#123;&#125;,</span><br><span class="line">    end () &#123;&#125;</span><br><span class="line">    chars (text: string) &#123;&#125;,</span><br><span class="line">    comment (text: string) &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上 parse 就是 parseHTML 的过程，最后返回AST元素对象。其中，传入的 options 配置对象中，start、end、chars、comment方法都会在 parseHTML 方法中用到。其实类似于生命周期钩子，在某个阶段执行。<br>parseHTML 方法是正则解析HTML的过程，这部分我将在之后的博客中单独说下，也可以看项目的注释，将不定时更新项目注释。</p><h2 id="optimize"><a href="#optimize" class="headerlink" title="optimize"></a>optimize</h2><p>该方法只是做了些标记静态节点的行为，目的是为了在重新渲染时不重复渲染静态节点，以达到性能优化的目的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">optimize</span> (<span class="params">root: ?ASTElement, options: CompilerOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span></span><br><span class="line">  isStaticKey = genStaticKeysCached(options.staticKeys || <span class="string">''</span>)</span><br><span class="line">  isPlatformReservedTag = options.isReservedTag || no</span><br><span class="line">  <span class="comment">// 标记所有非静态节点</span></span><br><span class="line">  markStatic(root)</span><br><span class="line">  <span class="comment">// 标记静态根节点</span></span><br><span class="line">  markStaticRoots(root, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>generate 方法用于将 AST 元素生成 render 渲染字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  ast: ASTElement | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: CompilerOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">CodegenResult</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="keyword">new</span> CodegenState(options)</span><br><span class="line">  <span class="keyword">const</span> code = ast ? genElement(ast, state) : <span class="string">'_c("div")'</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    render: <span class="string">`with(this)&#123;return <span class="subst">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class="line">    staticRenderFns: state.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后生成如下这样的渲染字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with(this)&#123;return _c(&apos;div&apos;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&apos;button&apos;,&#123;on:&#123;&quot;click&quot;:hey&#125;&#125;,[_v(_s(message))])])&#125;</span><br></pre></td></tr></table></figure></p><p>其中的 _c _v _s 等方法在哪里呢~这个我们之前说起过:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js</span></span><br><span class="line"><span class="comment">// 创建vnode元素</span></span><br><span class="line">vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// src/core/instance/render-helper/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">installRenderHelpers</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">  target._o = markOnce</span><br><span class="line">  target._n = toNumber</span><br><span class="line">  target._s = toString</span><br><span class="line">  target._l = renderList</span><br><span class="line">  target._t = renderSlot</span><br><span class="line">  target._q = looseEqual</span><br><span class="line">  target._i = looseIndexOf</span><br><span class="line">  target._m = renderStatic</span><br><span class="line">  target._f = resolveFilter</span><br><span class="line">  target._k = checkKeyCodes</span><br><span class="line">  target._b = bindObjectProps</span><br><span class="line">  target._v = createTextVNode</span><br><span class="line">  target._e = createEmptyVNode</span><br><span class="line">  target._u = resolveScopedSlots</span><br><span class="line">  target._g = bindObjectListeners</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其实template部分真的内容展开超级多，之后会展开细说。原本计划大前天就把博客写出来的，结果看代码看着看着绕进去了。所以，还是那句话，看代码得抓住主线，带着问题去看，不要在意细枝末节。<br>这也算是我的经验教训了，以后每次看代码，牢记待着明确的问题去看去解决。想一次看懂整个项目的代码是不可行的。<br>下期预告，parseHTML 细节解析</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这次，来学习下Vue是如何解析HTML代码的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;template-解析用在哪&quot;&gt;&lt;a href=&quot;#template-解析用在哪&quot; class=&quot;headerlink&quot; title=&quot;templa
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习六 —— VNode虚拟DOM学习</title>
    <link href="https://violetjack.github.io/2018/02/22/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%85%AD%20%E2%80%94%E2%80%94%20VNode%E8%99%9A%E6%8B%9FDOM%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/22/Vue.js源码学习六 —— VNode虚拟DOM学习/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-03-07T03:19:09.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初六和家人出去玩，没写完博客。跳票了~</p></blockquote><p>所谓虚拟DOM，是一个用于表示真实 DOM 结构和属性的 JavaScript 对象，这个对象用于对比虚拟 DOM 和当前真实 DOM 的差异化，然后进行局部渲染从而实现性能上的优化。在Vue.js 中虚拟 DOM 的 JavaScript 对象就是 VNode。<br>接下来我们一步步分析：</p><h1 id="VNode-是什么？"><a href="#VNode-是什么？" class="headerlink" title="VNode 是什么？"></a>VNode 是什么？</h1><hr><p>既然是虚拟 DOM 的作用是转为真实的 DOM，那这就是一个渲染的过程。所以我们看看 render 方法。在之前的学习中我们知道了，vue 的渲染函数 <code>_render</code> 方法返回的就是一个 VNode 对象。而在 <code>initRender</code> 初始化渲染的方法中定义的 <code>vm._c</code> 和 <code>vm.$createElement</code> 方法中，<code>createElement</code> 最终也是返回 VNode 对象。所以 VNode 是渲染的关键所在。<br>话不多说，来看看这个VNode为何方神圣。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/vnode.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  tag: string | <span class="keyword">void</span>;</span><br><span class="line">  data: VNodeData | <span class="keyword">void</span>;</span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</span><br><span class="line">  text: string | <span class="keyword">void</span>;</span><br><span class="line">  elm: Node | <span class="keyword">void</span>;</span><br><span class="line">  ns: string | <span class="keyword">void</span>;</span><br><span class="line">  context: Component | <span class="keyword">void</span>; <span class="comment">// rendered in this component's scope</span></span><br><span class="line">  key: string | number | <span class="keyword">void</span>;</span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>;</span><br><span class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// strictly internal</span></span><br><span class="line">  raw: boolean; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  isStatic: boolean; <span class="comment">// hoisted static node</span></span><br><span class="line">  isRootInsert: boolean; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  isComment: boolean; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  isCloned: boolean; <span class="comment">// is a cloned node?</span></span><br><span class="line">  isOnce: boolean; <span class="comment">// is a v-once node?</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="keyword">void</span>; <span class="comment">// async component factory function</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  fnContext: Component | <span class="keyword">void</span>; <span class="comment">// real context vm for functional nodes</span></span><br><span class="line">  fnOptions: ?ComponentOptions; <span class="comment">// for SSR caching</span></span><br><span class="line">  fnScopeId: ?string; <span class="comment">// functioanl scope id support</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag <span class="comment">// 当前节点标签名</span></span><br><span class="line">    <span class="keyword">this</span>.data = data <span class="comment">// 当前节点数据（VNodeData类型）</span></span><br><span class="line">    <span class="keyword">this</span>.children = children <span class="comment">// 当前节点子节点</span></span><br><span class="line">    <span class="keyword">this</span>.text = text <span class="comment">// 当前节点文本</span></span><br><span class="line">    <span class="keyword">this</span>.elm = elm <span class="comment">// 当前节点对应的真实DOM节点</span></span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span> <span class="comment">// 当前节点命名空间</span></span><br><span class="line">    <span class="keyword">this</span>.context = context <span class="comment">// 当前节点上下文</span></span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span> <span class="comment">// 函数化组件上下文</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span> <span class="comment">// 函数化组件配置项</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span> <span class="comment">// 函数化组件ScopeId</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key <span class="comment">// 子节点key属性</span></span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions <span class="comment">// 组件配置项 </span></span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span> <span class="comment">// 组件实例</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span> <span class="comment">// 当前节点父节点</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span> <span class="comment">// 是否为原生HTML或只是普通文本</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span> <span class="comment">// 静态节点标志 keep-alive</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span> <span class="comment">// 是否作为根节点插入</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span> <span class="comment">// 是否为注释节点</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span> <span class="comment">// 是否为克隆节点</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span> <span class="comment">// 是否为v-once节点</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory <span class="comment">// 异步工厂方法 </span></span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span> <span class="comment">// 异步Meta</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span> <span class="comment">// 是否为异步占位</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 容器实例向后兼容的别名</span></span><br><span class="line">  get child (): Component | <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是一个普通的 JavaScript Class 类，中间有各种数据用于描述虚拟 DOM，下面用一个例子来看看VNode 是如何表现 DOM 的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item of list"</span> <span class="attr">class</span>=<span class="string">"item-cls"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">'hello Vue.js'</span>,</span></span><br><span class="line"><span class="javascript">            list: [<span class="string">'jack'</span>, <span class="string">'rose'</span>, <span class="string">'james'</span>]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个例子最终结果如图：<img src="http://upload-images.jianshu.io/upload_images/1987062-fa2929532dc88449.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTML显示结果"><br>简化后的VNode对象结果如图：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"div"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"attr"</span>: &#123; <span class="attr">"id"</span>: <span class="string">"app"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"span"</span>,</span><br><span class="line">            <span class="attr">"children"</span>: [</span><br><span class="line">                &#123; <span class="attr">"text"</span>: <span class="string">"hello Vue.js"</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"ul"</span>,</span><br><span class="line">            <span class="attr">"children"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"jack"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"rose"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"tag"</span>: <span class="string">"li"</span>,</span><br><span class="line">                    <span class="attr">"data"</span>: &#123; <span class="attr">"staticClass"</span>: <span class="string">"item-cls"</span> &#125;,</span><br><span class="line">                    <span class="attr">"children"</span>: [</span><br><span class="line">                        &#123; <span class="attr">"text"</span>: <span class="string">"james"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"context"</span>: <span class="string">"$Vue$3"</span>,</span><br><span class="line">    <span class="attr">"elm"</span>: <span class="string">"div#app"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看VNode的时候小结以下几点：</p><ul><li>所有对象的 <code>context</code> 选项都指向了 Vue 实例。</li><li><code>elm</code> 属性则指向了其相对应的真实 DOM 节点。</li><li>DOM 中的文本内容被当做了一个只有 <code>text</code> 没有 <code>tag</code> 的节点。</li><li>像 class、id 等HTML属性都放在了 <code>data</code> 中</li></ul><p>我们了解了VNode 是如何描述 DOM 之后，来学习如何将虚拟<br> DOM 变为真实的 DOM。</p><h1 id="patch-——-Virtual-DOM-的核心"><a href="#patch-——-Virtual-DOM-的核心" class="headerlink" title="patch —— Virtual DOM 的核心"></a>patch —— Virtual DOM 的核心</h1><hr><p>从之前的文章中可以知道，Vue的渲染过程（无论是初始化视图还是更新视图）最终都将走到 <code>_update</code> 方法中，再来看看这个 <code>_update</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">    callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">  <span class="keyword">const</span> prevActiveInstance = activeInstance</span><br><span class="line">  activeInstance = vm</span><br><span class="line">  vm._vnode = vnode</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// 初始化渲染</span></span><br><span class="line">    vm.$el = vm.__patch__(</span><br><span class="line">      vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>,</span><br><span class="line">      vm.$options._parentElm,</span><br><span class="line">      vm.$options._refElm</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// no need for the ref nodes after initial patch</span></span><br><span class="line">    <span class="comment">// this prevents keeping a detached DOM tree in memory (#5851)</span></span><br><span class="line">    vm.$options._parentElm = vm.$options._refElm = <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新渲染</span></span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  activeInstance = prevActiveInstance</span><br><span class="line">  <span class="comment">// update __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">    prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = vm</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if parent is an HOC, update its $el as well</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">    vm.$parent.$el = vm.$el</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class="line">  <span class="comment">// updated in a parent's updated hook.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现更新试图都是使用了 <code>vm.__patch__</code> 方法，我们继续往下跟。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/runtime/index.js</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br></pre></td></tr></table></figure></p><p>这里啰嗦一句，要找vue的全局方法，如 <code>vm.aaa</code> ,直接查找 <code>Vue.prototype.aaa</code> 即可。<br>继续找下去：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/runtime/patch.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> patch: <span class="built_in">Function</span> = createPatchFunction(&#123; nodeOps, modules &#125;)</span><br></pre></td></tr></table></figure></p><p>找到 <code>createPatchFunction</code> 方法~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createPatchFunction</span> (<span class="params">backend</span>) </span>&#123;</span><br><span class="line">  ……</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly, parentElm, refElm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当前 VNode 未定义、老的 VNode 定义了，调用销毁钩子。</span></span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">      <span class="comment">// 老的 VNode 未定义，初始化。</span></span><br><span class="line">      isInitialPatch = <span class="literal">true</span></span><br><span class="line">      createElm(vnode, insertedVnodeQueue, parentElm, refElm)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 当前 VNode 和老 VNode 都定义了，执行更新操作</span></span><br><span class="line">      <span class="comment">// DOM 的 nodeType http://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span></span><br><span class="line">      <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType) <span class="comment">// 是否为真实 DOM 元素</span></span><br><span class="line">      <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">        <span class="comment">// patch existing root node</span></span><br><span class="line">        <span class="comment">// 修改已有根节点</span></span><br><span class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 已有真实 DOM 元素，处理 oldVnode</span></span><br><span class="line">        <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">          <span class="comment">// 挂载一个真实元素，确认是否为服务器渲染环境或者是否可以执行成功的合并到真实 DOM 中</span></span><br><span class="line">          <span class="keyword">if</span> (oldVnode.nodeType === <span class="number">1</span> &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123;</span><br><span class="line">            oldVnode.removeAttribute(SSR_ATTR)</span><br><span class="line">            hydrating = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isTrue(hydrating)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">              <span class="comment">// 调用 insert 钩子</span></span><br><span class="line">              <span class="comment">// inserted：被绑定元素插入父节点时调用 </span></span><br><span class="line">              invokeInsertHook(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">              <span class="keyword">return</span> oldVnode</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 不是服务器渲染或者合并到真实 DOM 失败，创建一个空节点替换原有节点</span></span><br><span class="line">          oldVnode = emptyNodeAt(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换已有元素</span></span><br><span class="line">        <span class="keyword">const</span> oldElm = oldVnode.elm</span><br><span class="line">        <span class="keyword">const</span> parentElm = nodeOps.parentNode(oldElm)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新节点</span></span><br><span class="line">        createElm(</span><br><span class="line">          vnode,</span><br><span class="line">          insertedVnodeQueue,</span><br><span class="line">          oldElm._leaveCb ? <span class="literal">null</span> : parentElm,</span><br><span class="line">          nodeOps.nextSibling(oldElm)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归更新父级占位节点元素，</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(vnode.parent)) &#123;</span><br><span class="line">          <span class="keyword">let</span> ancestor = vnode.parent</span><br><span class="line">          <span class="keyword">const</span> patchable = isPatchable(vnode)</span><br><span class="line">          <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">              cbs.destroy[i](ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor.elm = vnode.elm</span><br><span class="line">            <span class="keyword">if</span> (patchable) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">                cbs.create[i](emptyNode, ancestor)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">const</span> insert = ancestor.data.hook.insert</span><br><span class="line">              <span class="keyword">if</span> (insert.merged) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; insert.fns.length; i++) &#123;</span><br><span class="line">                  insert.fns[i]()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              registerRef(ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor = ancestor.parent</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁旧节点</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(parentElm)) &#123;</span><br><span class="line">          removeVnodes(parentElm, [oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.tag)) &#123;</span><br><span class="line">          invokeDestroyHook(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用 insert 钩子</span></span><br><span class="line">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">    <span class="keyword">return</span> vnode.elm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体解析看代码注释~抛开调用生命周期钩子和销毁就节点不谈，我们发现代码中的关键在于 <code>createElm</code> 和 <code>patchVnode</code> 方法。</p><h2 id="createElm"><a href="#createElm" class="headerlink" title="createElm"></a>createElm</h2><p>先看 <code>createElm</code> 方法，这个方法创建了真实 DOM 元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vnode,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm,</span></span></span><br><span class="line"><span class="function"><span class="params">  refElm,</span></span></span><br><span class="line"><span class="function"><span class="params">  nested,</span></span></span><br><span class="line"><span class="function"><span class="params">  ownerArray,</span></span></span><br><span class="line"><span class="function"><span class="params">  index</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDef(vnode.elm) &amp;&amp; isDef(ownerArray)) &#123;</span><br><span class="line">    vnode = ownerArray[index] = cloneVNode(vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode.isRootInsert = !nested <span class="comment">// for transition enter check</span></span><br><span class="line">  <span class="comment">// 创建组件</span></span><br><span class="line">  <span class="keyword">if</span> (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = vnode.data</span><br><span class="line">  <span class="keyword">const</span> children = vnode.children</span><br><span class="line">  <span class="keyword">const</span> tag = vnode.tag</span><br><span class="line">  <span class="keyword">if</span> (isDef(tag)) &#123;</span><br><span class="line">    vnode.elm = vnode.ns</span><br><span class="line">      ? nodeOps.createElementNS(vnode.ns, tag)</span><br><span class="line">      : nodeOps.createElement(tag, vnode)</span><br><span class="line">    setScope(vnode)</span><br><span class="line"></span><br><span class="line">    createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">      invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">    &#125;</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isTrue(vnode.isComment)) &#123;</span><br><span class="line">    vnode.elm = nodeOps.createComment(vnode.text)</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vnode.elm = nodeOps.createTextNode(vnode.text)</span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点关注代码中的方法执行。代码太多，就不贴出来了，简单说说用途。</p><ul><li><code>cloneVNode</code> 用于克隆当前 vnode 对象。</li><li><code>createComponent</code> 用于创建组件，在调用了组件初始化钩子之后，初始化组件，并且重新激活组件。在重新激活组件中使用 <code>insert</code> 方法操作 DOM。</li><li><code>nodeOps.createElementNS</code> 和 <code>nodeOps.createElement</code> 方法，其实是真实 DOM 的方法。</li><li><code>setScope</code> 用于为 scoped CSS 设置作用域 ID 属性</li><li><code>createChildren</code> 用于创建子节点，如果子节点是数组，则遍历执行 <code>createElm</code> 方法，如果子节点的 text 属性有数据，则使用 <code>nodeOps.appendChild(...)</code> 在真实 DOM 中插入文本内容。</li><li><code>insert</code> 用于将元素插入真实 DOM 中。</li></ul><p>所以，这里的 <code>nodeOps</code> 指的肯定就是真实的 DOM 节点了。最终，这些所有的方法都调用了 <code>nodeOps</code> 中的方法来操作 DOM 元素。</p><blockquote><p>这里顺便科普下 DOM 的<a href="http://www.w3school.com.cn/jsref/dom_obj_all.asp" target="_blank" rel="noopener">属性和方法</a>。下面把源码中用到的几个方法列出来便于学习：</p><ul><li>appendChild: 向元素添加新的子节点，作为最后一个子节点。</li><li>insertBefore: 在指定的已有的子节点之前插入新节点。</li><li>tagName: 返回元素的标签名。</li><li>removeChild: 从元素中移除子节点。</li><li>createElementNS: 创建带有指定命名空间的元素节点。</li><li>createElement: 创建元素节点。</li><li>createComment: 创建注释节点。</li><li>createTextNode: 创建文本节点。</li><li>setAttribute: 把指定属性设置或更改为指定值。</li><li>nextSibling: 返回位于相同节点树层级的下一个节点。</li><li>parentNode: 返回元素父节点。</li><li>setTextContent: 获取文本内容（这个未在w3school中找到，不过应该就是这个意思了）。</li></ul></blockquote><p>OK，知道以上方法就比较好理解了，<code>createElm</code> 方法的最终目的就是创建真实的 DOM 对象。</p><h2 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h2><p>看过了创建真实 DOM 后，我们来学习虚拟 DOM 如何实现 DOM 的更新。这才是虚拟 DOM 的存在意义 —— 比对并局部更新 DOM 以达到性能优化的目的。<br>看代码~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 补丁 vnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新旧 vnode 相等</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> elm = vnode.elm = oldVnode.elm</span><br><span class="line">  <span class="comment">// 异步占位</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(oldVnode.isAsyncPlaceholder)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.asyncFactory.resolved)) &#123;</span><br><span class="line">      hydrate(oldVnode.elm, vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode.isAsyncPlaceholder = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果新旧 vnode 为静态；新旧 vnode key相同；</span></span><br><span class="line">  <span class="comment">// 新 vnode 是克隆所得；新 vnode 有 v-once 的属性</span></span><br><span class="line">  <span class="comment">// 则新 vnode 的 componentInstance 用老的 vnode 的。</span></span><br><span class="line">  <span class="comment">// 即 vnode 的 componentInstance 保持不变。</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(vnode.isStatic) &amp;&amp;</span><br><span class="line">    isTrue(oldVnode.isStatic) &amp;&amp;</span><br><span class="line">    vnode.key === oldVnode.key &amp;&amp;</span><br><span class="line">    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))</span><br><span class="line">  ) &#123;</span><br><span class="line">    vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> data = vnode.data</span><br><span class="line">  <span class="comment">// 执行 data.hook.prepatch 钩子。</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(i = data.hook) &amp;&amp; isDef(i = i.prepatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children</span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isPatchable(vnode)) &#123;</span><br><span class="line">    <span class="comment">// 遍历 cbs，执行 update 方法</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)</span><br><span class="line">    <span class="comment">// 执行 data.hook.update 钩子</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 旧 vnode 的 text 选项为 undefined</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 新旧 vnode 都有 children，且不同，执行 updateChildren 方法。</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 清空文本，添加 vnode</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 移除 vnode</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 如果新旧 vnode 都是 undefined，清空文本</span></span><br><span class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="comment">// 有不同文本内容，更新文本内容</span></span><br><span class="line">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">    <span class="comment">// 执行 data.hook.postpatch 钩子，表明 patch 完毕</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.postpatch)) i(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码中添加了一些注释便于理解，来理一下逻辑。</p><ol><li>如果两个vnode相等，不需要 patch，退出。</li><li>如果是异步占位，执行 hydrate 方法或者定义 isAsyncPlaceholder 为 true，然后退出。</li><li>如果两个vnode都为静态，不用更新，所以讲以前的 componentInstance 实例传给当前 vnode，并退出。</li><li>执行 prepatch 钩子。</li><li>遍历调用 update 回调，并执行 update 钩子。</li><li>如果两个 vnode 都有 children，且 vnode 没有 text、两个 vnode 不相等，执行 updateChildren 方法。这是虚拟 DOM 的关键。</li><li>如果新 vnode 有 children，而老的没有，清空文本，并添加 vnode 节点。</li><li>如果老 vnode 有 children，而新的没哟，清空文本，并移除 vnode 节点。</li><li>如果两个 vnode 都没有 children，老 vnode 有 text ，新 vnode 没有 text ，则清空 DOM 文本内容。</li><li>如果老 vnode 和新 vnode 的 text 不同，更新 DOM 元素文本内容。</li><li>调用 postpatch 钩子。</li></ol><p>其中，<code>addVnodes</code> 方法和 <code>removeVnodes</code> 都比较简单，很好理解。这里我们来看看关键代码 <code>updateChildren</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeOnly 是一个只用于 &lt;transition-group&gt; 的特殊标签，</span></span><br><span class="line">  <span class="comment">// 确保移除元素过程中保持一个正确的相对位置。</span></span><br><span class="line">  <span class="keyword">const</span> canMove = !removeOnly</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    checkDuplicateKeys(newCh)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 开始老 vnode 向右一位</span></span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 结束老 vnode 向左一位</span></span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧开始 vnode 相似，进行pacth。开始 vnode 向右一位</span></span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧结束 vnode 相似，进行patch。结束 vnode 向左一位</span></span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">      <span class="comment">// 新结束 vnode 和老开始 vnode 相似，进行patch。</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      <span class="comment">// 老开始 vnode 插入到真实 DOM 中，老开始 vnode 向右一位，新结束 vnode 向左一位</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">      <span class="comment">// 老结束 vnode 和新开始 vnode 相似，进行 patch。</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      <span class="comment">// 老结束 vnode 插入到真实 DOM 中，老结束 vnode 向左一位，新开始 vnode 向右一位</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获取老 Idx 的 key</span></span><br><span class="line">      <span class="keyword">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      <span class="comment">// 给老 idx 赋值</span></span><br><span class="line">      idxInOld = isDef(newStartVnode.key)</span><br><span class="line">        ? oldKeyToIdx[newStartVnode.key]</span><br><span class="line">        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123;</span><br><span class="line">        <span class="comment">// 如果老 idx 为 undefined，说明没有这个元素，创建新 DOM 元素。</span></span><br><span class="line">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 vnode</span></span><br><span class="line">        vnodeToMove = oldCh[idxInOld]</span><br><span class="line">        <span class="keyword">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">          <span class="comment">// 如果生成的 vnode 和新开始 vnode 相似，执行 patch。</span></span><br><span class="line">          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)</span><br><span class="line">          <span class="comment">// 赋值 undefined，插入 vnodeToMove 元素</span></span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">          canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 相同的key不同的元素，视为新元素</span></span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 新开始 vnode 向右一位</span></span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果老开始 idx 大于老结束 idx，如果是有效数据则添加 vnode 到新 vnode 中。</span></span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">    refElm = isUndef(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].elm</span><br><span class="line">    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">    <span class="comment">// 移除 vnode</span></span><br><span class="line">    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示已看晕……让我们慢慢捋一捋……</p><ol><li>看参数，其中 oldCh 和 newCh 即表示了新旧 vnode 数组，两组数组通过比对的方式来差异化更新 DOM。</li><li>定义了一些变量：开始索引值、结束索引值、开始vnode、结束vnode等等……</li><li>进行循环遍历，遍历条件为 oldStartIdx &lt;= oldEndIdx 和 newStartIdx &lt;= newEndIdx，在遍历过程中，oldStartIdx 和 newStartIdx 递增，oldEndIdx 和 newEndIdx 递减。当条件不符合跳出遍历循环。</li><li>如果 oldStartVnode 和 newStartVnode 相似，执行 patch。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-3c53cb4442d3fc58?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果 oldEndVnode 和 newEndVnode 相似，执行 patch。</li><li>如果 oldStartVnode 和 newEndVnode 相似，执行 patch，并且将该节点移动到 vnode 数组末一位。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-0b47f3cb7f762873?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果 oldEndVnode 和 newStartVnode 相似，执行 patch，并且将该节点移动到 vnode 数组第一位。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-f6203babe1e15791?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果没有相同的 idx，执行 createElm 方法创建元素。</li><li>如果如有相同的 idx，如果两个 vnode 相似，执行 patch，并且将该节点移动到 vnode 数组第一位。如果两个 vnode 不相似，视为新元素，执行 createElm 创建。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-2a6b908889782ac4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果老 vnode 数组的开始索引大于结束索引，说明新 node 数组长度大于老 vnode 数组，执行 addVnodes 方法添加这些新 vnode 到 DOM 中。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-d353c99c30bb5f25?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>如果老 vnode 数组的开始索引小于结束索引，说明老 node 数组长度大于新 vnode 数组，执行 removeVnodes 方法从 DOM 中移除老 vnode 数组中多余的 vnode。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-c8aa456d7f2839da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li></ol><p>嗯……就是这样！</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>毕竟是Vue的核心功能之一，虽然省略了不少代码，但博客篇幅很长。写了两天才写完。不过写完博客后感觉对于 Vue 的理解又加深了很多。<br>在下一篇博客中，我们一起来学习template的解析。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue官网</a></li><li><a href="https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">VirtualDOM与diff(Vue实现)</a>.MarkDown)</li><li><a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Vue2.1.7源码学习</a></li><li><a href="http://www.w3school.com.cn/index.html" target="_blank" rel="noopener">w3school</a></li></ul><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;初六和家人出去玩，没写完博客。跳票了~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓虚拟DOM，是一个用于表示真实 DOM 结构和属性的 JavaScript 对象，这个对象用于对比虚拟 DOM 和当前真实 DOM 的差异化，然后进行局部渲染从而
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码学习五 —— provide 和 inject 学习</title>
    <link href="https://violetjack.github.io/2018/02/20/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%94%20%E2%80%94%E2%80%94%20provide%20%E5%92%8C%20inject%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/20/Vue.js源码学习五 —— provide 和 inject 学习/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早上好！继续开始学习Vue源码吧~</p></blockquote><p>在 Vue.js 的 <code>2.2.0+</code> 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。<br>下面我们来看看源码~</p><h1 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h1><p>和之前一样，初始化的方法都是在 Vue 的 <code>_init</code> 方法中的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js</span></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">  ……</span><br><span class="line">  vm._self = vm</span><br><span class="line">  initLifecycle(vm)</span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">  initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm)</span><br><span class="line">  initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">'created'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里找到 <code>initInjections</code> 和 <code>initProvide</code> 方法，这就是 <code>provide</code> 和 <code>inject</code> 的初始化方法了。这两个方法都是在 <code>src/core/instance/inject.js</code> 中。</p><h1 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h1><blockquote><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p></blockquote><p>先看源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/inject.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>provide 是向下传递数据的选项。这里先拿到 provide 选项中的内容，如果有 provide 选项，将 provide 选项传递给 <code>vm._provided</code> 变为 Vue 实例全局数据。<br>这里看一下例子更清楚，下例中传入数据 <code>foo</code>，数据内容为 <code>bar</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h1><blockquote><p>inject 选项应该是一个字符串数组或一个对象，该对象的 key 代表了本地绑定的名称，value 为其 key (字符串或 Symbol) 以在可用的注入中搜索。</p></blockquote><p>源码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/inject.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm)</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    observerState.shouldConvert = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(result).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      defineReactive(vm, key, result[key])</span><br><span class="line">    &#125;)</span><br><span class="line">    observerState.shouldConvert = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后的源码可以看到，首先通过 <code>resolveInject</code> 方法获取 inject 选项搜索结果，如果有搜索结果，遍历搜索结果并为其中的数据添加 setter 和 getter。<br>接着来看下 <code>resolveInject</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject: any, vm: Component</span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="comment">// inject 是 :any 类型因为流没有智能到能够指出缓存</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 获取 inject 选项的 key 数组</span></span><br><span class="line">    <span class="keyword">const</span> keys = hasSymbol</span><br><span class="line">      ? <span class="built_in">Reflect</span>.ownKeys(inject).filter(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(inject, key).enumerable</span><br><span class="line">      &#125;)</span><br><span class="line">      : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; provideKey <span class="keyword">in</span> source._provided) &#123;</span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'default'</span> <span class="keyword">in</span> inject[key]) &#123;</span><br><span class="line">          <span class="keyword">const</span> provideDefault = inject[key].default</span><br><span class="line">          result[key] = <span class="keyword">typeof</span> provideDefault === <span class="string">'function'</span></span><br><span class="line">            ? provideDefault.call(vm)</span><br><span class="line">            : provideDefault</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">`Injection "<span class="subst">$&#123;key&#125;</span>" not found`</span>, vm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取 inject 选项的 key 数组，遍历 key 数组，通过向上冒泡来查找 provide 中是否有 key 与 inject 选项中 from 属性同名的，如果有，则将这个数据传递给 result；如果没有，检查 inject 是否有 default 选项设定默认值或者默认方法，如果有则将默认值返传给 result，最终返回 result 对象。<br>所以，inject 的写法应该是有 default 默认值的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123; <span class="attr">default</span>: <span class="string">'foo'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者是有 from 查找键和 default 默认值的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'bar'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'foo'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者为 default 默认值设定一个工厂方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'bar'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好吧，我承认这就是引用的官网的三个例子~ 不过意思到就好啦。<br>这里我有个疑问，既然在源码中主动去识别了 from 和 default，官网上说是</p><blockquote><p>在 <code>2.5.0+</code> 的注入可以通过设置默认值使其变成可选项：</p></blockquote><p>那么如下写法还可用吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为此，我们去查查 <code>2.2.0</code> 版本的Vue是怎么写的？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">const</span> inject: any = vm.$options.inject</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="comment">// inject is :any because flow is not smart enough to figure out cached</span></span><br><span class="line">    <span class="comment">// isArray here</span></span><br><span class="line">    <span class="keyword">const</span> isArray = <span class="built_in">Array</span>.isArray(inject)</span><br><span class="line">    <span class="keyword">const</span> keys = isArray</span><br><span class="line">      ? inject</span><br><span class="line">      : hasSymbol</span><br><span class="line">        ? <span class="built_in">Reflect</span>.ownKeys(inject)</span><br><span class="line">        : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = isArray ? key : inject[key]</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; source._provided[provideKey]) &#123;</span><br><span class="line">          vm[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从中可以看到，在这个版本 provide 和 inject 是一起初始化的。之后，将 provide 传给 vm._provide ，在获取 inject 选项的时候代码判断了 inject 是否为数组，如果是数组直接遍历数组，之后查找 provide 的代码差不多。<br>所以我推测： <strong>在 <code>2.5.0+</code> 之后不能再使用数组形式的 inject 来搜索 provide 了。</strong><br>PS：这里没有去代码验证，如有问题，欢迎指出，谢谢！</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至此，provide 和 inject 的源码学习完毕啦~ 如果有任何问题和建议，欢迎联系我！谢谢！<br>预告：明天学习 Vue 的 VDOM、VNode 相关知识。欢迎继续关注~</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早上好！继续开始学习Vue源码吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Vue.js 的 &lt;code&gt;2.2.0+&lt;/code&gt; 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。&lt;br&gt;下面
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习四 —— 渲染 Render 初始化过程学习</title>
    <link href="https://violetjack.github.io/2018/02/19/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B%20%E2%80%94%E2%80%94%20%E6%B8%B2%E6%9F%93%20Render%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/19/Vue.js源码学习四 —— 渲染 Render 初始化过程学习/</id>
    <published>2018-02-18T16:00:00.000Z</published>
    <updated>2018-03-07T03:20:10.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天我们来学习下Vue的渲染 Render 源码~</p></blockquote><p>还是从初始化方法开始找代码，在 <code>src/core/instance/index.js</code> 中，先执行了 <code>renderMixin</code> 方法，然后在Vue实例化的时候执行了 <code>vm._init</code> 方法，在这个 <code>vm._init</code> 方法中执行了 <code>initRender</code> 方法。<code>renderMixin</code> 和 <code>initRender</code> 都在 <code>src/core/instance/render.js</code> 中，我们来看看代码：</p><h1 id="renderMixin"><a href="#renderMixin" class="headerlink" title="renderMixin"></a>renderMixin</h1><p>首先来跟一下 <code>renderMixin</code> 的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  installRenderHelpers(Vue.prototype)</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$nextTick = <span class="function"><span class="keyword">function</span> (<span class="params">fn: Function</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextTick(fn, <span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// vm.$options.render &amp; vm.$options._parentVnode</span></span><br><span class="line">    <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vm.$vnode = _parentVnode</span><br><span class="line">    <span class="keyword">let</span> vnode</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行 vue 实例的 render 方法</span></span><br><span class="line">      vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.$options.renderError) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            handleError(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">            vnode = vm._vnode</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回空vnode避免render方法报错退出</span></span><br><span class="line">    <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">      vnode = createEmptyVNode()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 父级Vnode</span></span><br><span class="line">    vnode.parent = _parentVnode</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码执行了 <code>installRenderHelpers</code> 方法，然后定义了 Vue 的 <code>$nextTick</code> 和 <code>_render</code> 方法。<br>先来看看 <code>installRenderHelpers</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">installRenderHelpers</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">  target._o = markOnce</span><br><span class="line">  target._n = toNumber <span class="comment">// 数字</span></span><br><span class="line">  target._s = toString <span class="comment">// 字符串</span></span><br><span class="line">  target._l = renderList <span class="comment">// 列表</span></span><br><span class="line">  target._t = renderSlot</span><br><span class="line">  target._q = looseEqual</span><br><span class="line">  target._i = looseIndexOf</span><br><span class="line">  target._m = renderStatic</span><br><span class="line">  target._f = resolveFilter</span><br><span class="line">  target._k = checkKeyCodes</span><br><span class="line">  target._b = bindObjectProps</span><br><span class="line">  target._v = createTextVNode</span><br><span class="line">  target._e = createEmptyVNode</span><br><span class="line">  target._u = resolveScopedSlots</span><br><span class="line">  target._g = bindObjectListeners</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是 Vue 的各类渲染方法了，从字面意思中可以知道一些方法的用途，这些方法用在Vue生成的渲染函数中。具体各个渲染函数的实现先不提~之后会专门写博客学习。<br>在 <code>$nextTick</code> 函数中执行了 <code>nextTick</code> 函数，找到该函数源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span> (<span class="params">cb?: Function, ctx?: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  callbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, ctx, <span class="string">'nextTick'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (useMacroTask) &#123;</span><br><span class="line">      macroTimerFunc()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      microTimerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在来说关键的 <code>_render</code> 方法，关键在这个 try…catch 方法中，执行了Vue实例中的 render 方法生成一个vnode。如果生成失败，会试着生成 renderError 方法。如果vnode为空，则为vnode传一个空的VNode，最后返回vnode对象。</p><h1 id="initRender"><a href="#initRender" class="headerlink" title="initRender"></a>initRender</h1><p>接下来看下 render 的初始化过程：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span> <span class="comment">// the root of the child tree</span></span><br><span class="line">  vm._staticTrees = <span class="literal">null</span> <span class="comment">// v-once cached trees</span></span><br><span class="line">  <span class="keyword">const</span> options = vm.$options</span><br><span class="line">  <span class="keyword">const</span> parentVnode = vm.$vnode = options._parentVnode <span class="comment">// the placeholder node in parent tree</span></span><br><span class="line">  <span class="keyword">const</span> renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class="line">  vm.$slots = resolveSlots(options._renderChildren, renderContext)</span><br><span class="line">  vm.$scopedSlots = emptyObject</span><br><span class="line">  <span class="comment">// 将 createElement 方法绑定到这个实例，这样我们就可以在其中得到适当的 render context。</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 规范化一直应用于公共版本，用于用户编写的 render 函数。</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 父级组件数据</span></span><br><span class="line">  <span class="keyword">const</span> parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">  defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 initRender 方法中，为Vue的实例方法添加了几个属性值，最后定义了 <code>$attrs</code> 和 <code>$listeners</code> 的监听方法。<br>看下 <code>createElement</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-element.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  alwaysNormalize: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data) || isPrimitive(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isTrue(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = ALWAYS_NORMALIZE</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _createElement(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里执行了 <code>_createElement</code> 方法，由于该方法太长，就不贴出来费篇幅了，代码看<a href="https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-element.js#L47" target="_blank" rel="noopener">这里</a>。最终返回一个 VNode 对象，VNode 对象由 <code>createEmptyVNode</code> 或 <code>createComponent</code> 方法得到的。<br><code>createEmptyVNode</code> 创建了一个空的 VNode<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/vnode.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createEmptyVNode = <span class="function">(<span class="params">text: string = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> VNode()</span><br><span class="line">  node.text = text</span><br><span class="line">  node.isComment = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>createComponent</code> 创建了一个组件，最终也将返回一个 VNode 对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/create-component.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isUndef(Ctor)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> baseCtor = context.$options._base</span><br><span class="line">  <span class="keyword">if</span> (isObject(Ctor)) &#123;</span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> asyncFactory</span><br><span class="line">  <span class="keyword">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class="line">    asyncFactory = Ctor</span><br><span class="line">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context)</span><br><span class="line">    <span class="keyword">if</span> (Ctor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> createAsyncPlaceholder(</span><br><span class="line">        asyncFactory,</span><br><span class="line">        data,</span><br><span class="line">        context,</span><br><span class="line">        children,</span><br><span class="line">        tag</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data = data || &#123;&#125;</span><br><span class="line">  resolveConstructorOptions(Ctor)</span><br><span class="line">  <span class="keyword">if</span> (isDef(data.model)) &#123;</span><br><span class="line">    transformModel(Ctor.options, data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> propsData = extractPropsFromVNodeData(data, Ctor, tag)</span><br><span class="line">  <span class="keyword">if</span> (isTrue(Ctor.options.functional)) &#123;</span><br><span class="line">    <span class="keyword">return</span> createFunctionalComponent(Ctor, propsData, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> listeners = data.on</span><br><span class="line">  data.on = data.nativeOn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isTrue(Ctor.options.abstract)) &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = data.slot</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (slot) &#123;</span><br><span class="line">      data.slot = slot</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mergeHooks(data)</span><br><span class="line">  <span class="comment">// 创建组件的 VNode</span></span><br><span class="line">  <span class="keyword">const</span> name = Ctor.options.name || tag</span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">    <span class="string">`vue-component-<span class="subst">$&#123;Ctor.cid&#125;</span><span class="subst">$&#123;name ? <span class="string">`-<span class="subst">$&#123;name&#125;</span>`</span> : <span class="string">''</span>&#125;</span>`</span>,</span><br><span class="line">    data, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, context,</span><br><span class="line">    &#123; Ctor, propsData, listeners, tag, children &#125;,</span><br><span class="line">    asyncFactory</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="初次渲染过程"><a href="#初次渲染过程" class="headerlink" title="初次渲染过程"></a>初次渲染过程</h1><p>既然是初次渲染，肯定会触发 <code>mounted</code> 生命周期钩子。所以我们从 <code>mount</code> 找起。在源码中定义了两次 <code>$mount</code> 方法，第一次返回了 <code>mountComponent</code> 方法；第二次定义了 Vue 实例的 <code>$options</code> 选项中的一些数据，然后再执行第一次的 <code>$mount</code> 方法，即执行 <code>mountComponent</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/runtime/index.js</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/platforms/web/entry-runtime-with-compiler.js</span></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是 <code>compileToFunctions</code> 方法，该方法的作用是将 template 编译为 render 函数。<br><code>compileToFunctions</code> 方法是一个编译的过程，暂且不论。抓住主线，看渲染。所以去看看 <code>mountComponent</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updateComponent</span><br><span class="line">  updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, <span class="literal">null</span>, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line">  hydrating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span></span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，在 beforeMount 和 mounted 生命周期之间的代码：创建一个更新方法，然后创建一个Watcher监听该方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  vm._update(vm._render(), hydrating)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(vm, updateComponent, noop, <span class="literal">null</span>, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br></pre></td></tr></table></figure></p><p>在 <code>new Watcher</code> 监听了 updateComponent 方法后，会立即执行 <code>updateComponent</code> 方法。在 <code>updateComponent</code> 方法中，我们之前提到 _render 方法最终返回一个编译过的 VNode 对象，即虚拟 DOM，这里我们就看看 _update 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">    callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">  <span class="keyword">const</span> prevActiveInstance = activeInstance</span><br><span class="line">  activeInstance = vm</span><br><span class="line">  vm._vnode = vnode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// initial render</span></span><br><span class="line">    vm.$el = vm.__patch__(</span><br><span class="line">      vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>,</span><br><span class="line">      vm.$options._parentElm,</span><br><span class="line">      vm.$options._refElm</span><br><span class="line">    )</span><br><span class="line">    vm.$options._parentElm = vm.$options._refElm = <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// updates</span></span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  activeInstance = prevActiveInstance</span><br><span class="line">  <span class="comment">// update __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">    prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = vm</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">    vm.$parent.$el = vm.$el</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从注释可以看出，初次渲染会走到 <code>vm.__patch__</code> 方法中，这个方法就是比对虚拟 DOM ，局部更新 DOM 的方法，关于虚拟 DOM 和 VNode 节点，之后再聊。</p><h1 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h1><ul><li>通过 <code>renderMixin</code> 方法来定义一些渲染属性。</li><li><code>initRender</code> 定义了各类渲染选项，并且对一些属性进行监听。</li><li><code>$mount</code> 方法执行了 <code>mountComponent</code> 方法，监听<br><code>updateComponent</code> 方法并执行 <code>_update</code> 方法。</li><li><code>_update</code> 方法中执行 <code>__patch__</code> 方法渲染 VNode。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这里简单理了理 <code>render</code> 渲染的代码流程，更深入的关于虚拟 DOM 的内容在下一篇中继续研究~<br>这里再提出几个问题，之后学习和解决：</p><ul><li>template 的具体编译细节</li><li>已知 data 数据监测，如何在改变数据后对改变界面的显示。</li><li>深入理解虚拟 DOM 的原理</li><li>学习全局 API 的源码</li><li>了解各类工具类</li><li>了解 AST 语法树是什么~</li></ul><p>计划3月底完成Vue源码的系统学习，之后转战vue-router、vuex、vuxt、 devtools、webpack、vue-loader，今年目标把Vue全家老小、亲戚朋友都学习一遍！加油！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天我们来学习下Vue的渲染 Render 源码~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是从初始化方法开始找代码，在 &lt;code&gt;src/core/instance/index.js&lt;/code&gt; 中，先执行了 &lt;code&gt;renderMi
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习三 —— 事件 Event 学习</title>
    <link href="https://violetjack.github.io/2018/02/17/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89%20%E2%80%94%E2%80%94%20%E4%BA%8B%E4%BB%B6%20Event%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/17/Vue.js源码学习三 —— 事件 Event 学习/</id>
    <published>2018-02-16T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早上好！继续学习Vue源码~这次我们来学习 event 事件。</p></blockquote><h1 id="源码简析"><a href="#源码简析" class="headerlink" title="源码简析"></a>源码简析</h1><p>其实看了前两篇的同学已经知道源码怎么找了，这里再提一下。<br>先找到Vue核心源码index方法 <code>src/core/instance/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure></p><p>index方法中定义了一个Vue的构造函数执行 <code>_init</code> 方法初始化，然后执行了多个 <code>xxxMixin</code> 方法，这些方法是为Vue 的构造函数定义各类属性的。比如我们今天关注的事件，Vue的几个事件方法都是在 <code>eventsMixin</code> 中定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export function eventsMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype.$on = function (event: string | Array&lt;string&gt;, fn: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$once = function (event: string, fn: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$off = function (event?: string | Array&lt;string&gt;, fn?: Function): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$emit = function (event: string): Component &#123;</span><br><span class="line">    ……</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外要注意的是，<code>initMixin</code> 方法中定义了Vue的初始化方法 <code>_init</code>，该方法中对Vue各类属性进行了初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class="line">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initProxy(vm)</span><br><span class="line">    vm._self = vm</span><br><span class="line">    initLifecycle(vm)</span><br><span class="line">    initEvents(vm)</span><br><span class="line">    initRender(vm)</span><br><span class="line">    callHook(vm, &apos;beforeCreate&apos;)</span><br><span class="line">    initInjections(vm) // resolve injections before data/props</span><br><span class="line">    initState(vm)</span><br><span class="line">    initProvide(vm) // resolve provide after data/props</span><br><span class="line">    callHook(vm, &apos;created&apos;)</span><br><span class="line">    if (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，在本篇博客中只需要关注 <code>initEvents</code> 和 <code>eventsMixin</code> 方法即可</p><h1 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h1><p>初始化过程很简单，清空数据，并初始化连接父级的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">export function initEvents (vm: Component) &#123;</span><br><span class="line">  vm._events = Object.create(null)</span><br><span class="line">  vm._hasHookEvent = false</span><br><span class="line">  // init parent attached events</span><br><span class="line">  const listeners = vm.$options._parentListeners</span><br><span class="line">  if (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我深入看了下 <code>updateComponentListeners</code> 方法，最终走到了 <code>src/core/vdom/helpers/update-listeners.js</code> 的 <code>updateListeners</code> 方法中，因为并没有传 <code>oldOn</code> 参数，所以我简化了下代码，简化代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// src/core/vdom/helpers/update-listeners.js</span><br><span class="line">export function updateListeners (</span><br><span class="line">  on: Object,</span><br><span class="line">  oldOn: Object,</span><br><span class="line">  add: Function,</span><br><span class="line">  remove: Function,</span><br><span class="line">  vm: Component</span><br><span class="line">) &#123;</span><br><span class="line">  let name, def, cur, old, event</span><br><span class="line">  for (name in on) &#123;</span><br><span class="line">    def = cur = on[name]</span><br><span class="line">    old = oldOn[name]</span><br><span class="line">    event = normalizeEvent(name)</span><br><span class="line"></span><br><span class="line">    if (isUndef(old)) &#123;</span><br><span class="line">      if (isUndef(cur.fns)) &#123;</span><br><span class="line">        cur = on[name] = createFnInvoker(cur)</span><br><span class="line">      &#125;</span><br><span class="line">      add(event.name, cur, event.once, event.capture, event.passive, event.params)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中这个add方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">// target 临时引用vm，用完后即变为undefined</span><br><span class="line">var target;</span><br><span class="line"></span><br><span class="line">function add (event, fn, once) &#123;</span><br><span class="line">  if (once) &#123;</span><br><span class="line">    target.$once(event, fn);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    target.$on(event, fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整理下来就是将父级的事件定义到当前vm中。</p><h1 id="on"><a href="#on" class="headerlink" title="$on"></a>$on</h1><blockquote><p>监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。</p></blockquote><p>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$on = function (event: string | Array&lt;string&gt;, fn: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (Array.isArray(event)) &#123;</span><br><span class="line">    for (let i = 0, l = event.length; i &lt; l; i++) &#123;</span><br><span class="line">      this.$on(event[i], fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    (vm._events[event] || (vm._events[event] = [])).push(fn)</span><br><span class="line">    // 通过使用标记为注册而不是散列查找的布尔标记来优化钩子 hook: 事件成本。</span><br><span class="line">    if (hookRE.test(event)) &#123;</span><br><span class="line">      vm._hasHookEvent = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 event 是数组则遍历执行 $on 方法（2.2.0+ 中支持）；<br>否则 向 vm._events[event] 中传递回调函数 fn，这里既然 vm._events[event] 是一个数组，那么我猜想一个 event 可以执行多个回调函数咯？<br>如果是 event 字符串中有 <code>hook:</code>，修改 <code>vm._hasHookEvent</code> 的状态。如果 <code>_hasHookEvent</code> 为 true，那么在触发各类生命周期钩子的时候会触发如 <code>hook:created</code> 事件，这只是一种优化方式，与我们主题关系不大，具体请看代码~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">export function callHook (vm: Component, hook: string) &#123;</span><br><span class="line">  const handlers = vm.$options[hook]</span><br><span class="line">  if (handlers) &#123;</span><br><span class="line">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        handlers[i].call(vm)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="once"><a href="#once" class="headerlink" title="$once"></a>$once</h1><blockquote><p>监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。</p></blockquote><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$once = function (event: string, fn: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  function on () &#123;</span><br><span class="line">    vm.$off(event, on)</span><br><span class="line">    fn.apply(vm, arguments)</span><br><span class="line">  &#125;</span><br><span class="line">  on.fn = fn</span><br><span class="line">  vm.$on(event, on)</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就简单了，定义一个 $on 事件监听，回调函数中使用 $off 方法取消事件监听，并执行回调函数。</p><h1 id="off"><a href="#off" class="headerlink" title="$off"></a>$off</h1><blockquote><p>移除自定义事件监听器。</p><ul><li>如果没有提供参数，则移除所有的事件监听器；</li><li>如果只提供了事件，则移除该事件所有的监听器；</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器。</li></ul></blockquote><p>代码如下，分析见注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$off = function (event?: string | Array&lt;string&gt;, fn?: Function): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  // 如果没有参数，关闭全部事件监听器</span><br><span class="line">  if (!arguments.length) &#123;</span><br><span class="line">    vm._events = Object.create(null)</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 关闭数组中的事件监听器</span><br><span class="line">  if (Array.isArray(event)) &#123;</span><br><span class="line">    for (let i = 0, l = event.length; i &lt; l; i++) &#123;</span><br><span class="line">      this.$off(event[i], fn)</span><br><span class="line">    &#125;</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 具体某个事件监听</span><br><span class="line">  const cbs = vm._events[event]</span><br><span class="line">  // 没有这个监听事件，直接返回vm</span><br><span class="line">  if (!cbs) &#123;</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 没有 fn，将事件监听器变为null，返回vm</span><br><span class="line">  if (!fn) &#123;</span><br><span class="line">    vm._events[event] = null</span><br><span class="line">    return vm</span><br><span class="line">  &#125;</span><br><span class="line">  // 有回调函数</span><br><span class="line">  if (fn) &#123;</span><br><span class="line">    // specific handler</span><br><span class="line">    let cb</span><br><span class="line">    let i = cbs.length</span><br><span class="line">    while (i--) &#123;</span><br><span class="line">      // cbs = vm._events[event] 是一个数组</span><br><span class="line">      cb = cbs[i]</span><br><span class="line">      if (cb === fn || cb.fn === fn) &#123;</span><br><span class="line">        // 移除 fn 这个事件监听器</span><br><span class="line">        cbs.splice(i, 1)</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><blockquote><p>触发当前实例上的事件。附加参数都会传给监听器回调。</p></blockquote><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/events.js</span><br><span class="line">Vue.prototype.$emit = function (event: string): Component &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  let cbs = vm._events[event]</span><br><span class="line">  if (cbs) &#123;</span><br><span class="line">    cbs = cbs.length &gt; 1 ? toArray(cbs) : cbs</span><br><span class="line">    const args = toArray(arguments, 1)</span><br><span class="line">    for (let i = 0, l = cbs.length; i &lt; l; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        cbs[i].apply(vm, args)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `event handler for &quot;$&#123;event&#125;&quot;`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码分析：首先获取 vm._events[event] ，之前我们说过这玩意是个数组；如果有这个事件监听器，从第二个参数开始获取作为触发方法的传参 args，遍历事件监听器数组传参执行回调函数。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>就这么多啦~其实事件还是很简单的。明后天研究研究渲染这个难点！我们后天见！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早上好！继续学习Vue源码~这次我们来学习 event 事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;源码简析&quot;&gt;&lt;a href=&quot;#源码简析&quot; class=&quot;headerlink&quot; title=&quot;源码简析&quot;&gt;&lt;/a&gt;源码简析&lt;/h1
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码学习二 —— 生命周期 LifeCycle 学习</title>
    <link href="https://violetjack.github.io/2018/02/16/Vue.js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C%20%E2%80%94%E2%80%94%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20LifeCycle%20%E5%AD%A6%E4%B9%A0/"/>
    <id>https://violetjack.github.io/2018/02/16/Vue.js源码学习二 —— 生命周期 LifeCycle 学习/</id>
    <published>2018-02-15T16:00:00.000Z</published>
    <updated>2018-03-07T02:52:09.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>春节继续写博客~加油！</p></blockquote><p>这次来学习一下Vue的生命周期，看看生命周期是怎么回事。</p><h1 id="callHook"><a href="#callHook" class="headerlink" title="callHook"></a>callHook</h1><p>生命周期主要就是在源码某个时间点执行这个 <code>callHook</code> 方法来调用 <code>vm.$options</code> 的生命周期钩子方法（如果定义了生命周期钩子方法的话）。<br>我们来看看 callHook 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export function callHook (vm: Component, hook: string) &#123;</span><br><span class="line">  const handlers = vm.$options[hook] // 获取Vue选项中的生命周期钩子函数</span><br><span class="line">  if (handlers) &#123;</span><br><span class="line">    for (let i = 0, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        handlers[i].call(vm) // 执行生命周期函数</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, vm, `$&#123;hook&#125; hook`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(&apos;hook:&apos; + hook)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如触发 <code>mounted</code> 钩子的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callHook(vm, &apos;mounted&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><p>先上一张图看下Vue的生命周期，我们可以在相应的生命周期中定义一些事件。<br><img src="http://upload-images.jianshu.io/upload_images/1987062-4e8074eee45c60a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Vue生命周期"></p><h2 id="beforeCreate-amp-created"><a href="#beforeCreate-amp-created" class="headerlink" title="beforeCreate &amp; created"></a>beforeCreate &amp; created</h2><p>先看看这两个方法调用的时间。</p><blockquote><p><strong>beforeCreate</strong><br>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。<br><strong>created</strong><br>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p></blockquote><p>具体代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/init.js</span><br><span class="line">Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">  ……</span><br><span class="line">  initLifecycle(vm) // 初始化生命周期</span><br><span class="line">  initEvents(vm) // 初始化事件</span><br><span class="line">  initRender(vm) // 初始化渲染</span><br><span class="line">  callHook(vm, &apos;beforeCreate&apos;)</span><br><span class="line">  initInjections(vm) // 初始化Inject</span><br><span class="line">  initState(vm) // 初始化数据</span><br><span class="line">  initProvide(vm) // 初始化Provide</span><br><span class="line">  callHook(vm, &apos;created&apos;)</span><br><span class="line">  ……</span><br><span class="line">  if (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el) // 如果有el属性，将内容挂载到el中去。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="beforeMount-amp-mounted"><a href="#beforeMount-amp-mounted" class="headerlink" title="beforeMount &amp; mounted"></a>beforeMount &amp; mounted</h2><blockquote><p><strong>beforeMount</strong><br>在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。<br><strong>mounted</strong><br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p></blockquote><p>贴出代码逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">// 挂载组件的方法</span><br><span class="line">export function mountComponent (</span><br><span class="line">  vm: Component,</span><br><span class="line">  el: ?Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  if (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, &apos;beforeMount&apos;)</span><br><span class="line"></span><br><span class="line">  let updateComponent</span><br><span class="line">  updateComponent = () =&gt; &#123;</span><br><span class="line">    vm._update(vm._render(), hydrating)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  vm._watcher = new Watcher(vm, updateComponent, noop)</span><br><span class="line">  hydrating = false</span><br><span class="line"></span><br><span class="line">  if (vm.$vnode == null) &#123;</span><br><span class="line">    vm._isMounted = true</span><br><span class="line">    callHook(vm, &apos;mounted&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  return vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么这个 <code>mountComponent</code> 在哪里用了呢？就是在Vue的 $mount 方法中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// src/platforms/web/runtime/index.js</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class="line">  return mountComponent(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后会在Vue初始化的时候，判断是否有 el，如果有则执行 $mount 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/init.js</span><br><span class="line">if (vm.$options.el) &#123;</span><br><span class="line">  vm.$mount(vm.$options.el) // 如果有el属性，将内容挂载到el中去。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此生命周期逻辑应该是 beforeCreate - created - beforeMount -mounted</p><h2 id="beforeUpdate-amp-updated"><a href="#beforeUpdate-amp-updated" class="headerlink" title="beforeUpdate &amp; updated"></a>beforeUpdate &amp; updated</h2><blockquote><p><strong>beforeUpdate</strong><br>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br><strong>updated</strong><br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p></blockquote><p>找代码逻辑~ beforeUpdate 和 updated 在两个地方调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class="line">    const vm: Component = this</span><br><span class="line">    // 如果是已经挂载的，就触发beforeUpdate方法。</span><br><span class="line">    if (vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, &apos;beforeUpdate&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">    // updated hook is called by the scheduler to ensure that children are</span><br><span class="line">    // updated in a parent&apos;s updated hook.</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在执行 <code>_update</code> 方法的时候，如果 DOM 已经挂载了，则调用 <code>beforeUpdate</code> 方法。<br>在 _update 方法的最后作者也注视了调用 updated hook 的位置：<em><code>updated</code> 钩子由 <code>scheduler</code> 调用来确保子组件在一个父组件的 <code>update</code> 钩子中</em>。<br>我们找到 <code>scheduler</code>，发现有个 <code>callUpdateHooks</code> 方法，该方法遍历了 <code>watcher</code> 数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// src/core/observer/scheduler.js</span><br><span class="line">function callUpdatedHooks (queue) &#123;</span><br><span class="line">  let i = queue.length</span><br><span class="line">  while (i--) &#123;</span><br><span class="line">    const watcher = queue[i]</span><br><span class="line">    const vm = watcher.vm</span><br><span class="line">    if (vm._watcher === watcher &amp;&amp; vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, &apos;updated&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个 <code>callUpdatedHooks</code> 在 <code>flushSchedulerQueue</code> 方法中调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 刷新队列并运行watcher</span><br><span class="line"> */</span><br><span class="line">function flushSchedulerQueue () &#123;</span><br><span class="line">  flushing = true</span><br><span class="line">  let watcher, id</span><br><span class="line">  queue.sort((a, b) =&gt; a.id - b.id)</span><br><span class="line"></span><br><span class="line">  for (index = 0; index &lt; queue.length; index++) &#123;</span><br><span class="line">    watcher = queue[index]</span><br><span class="line">    id = watcher.id</span><br><span class="line">    has[id] = null</span><br><span class="line">    watcher.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const activatedQueue = activatedChildren.slice()</span><br><span class="line">  const updatedQueue = queue.slice()</span><br><span class="line"></span><br><span class="line">  resetSchedulerState()</span><br><span class="line"></span><br><span class="line">  // 调用组件的updated和activated生命周期</span><br><span class="line">  callActivatedHooks(activatedQueue)</span><br><span class="line">  callUpdatedHooks(updatedQueue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续找下去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export function queueWatcher (watcher: Watcher) &#123;</span><br><span class="line">  const id = watcher.id</span><br><span class="line">  if (has[id] == null) &#123;</span><br><span class="line">    has[id] = true // 此参数用于判断watcher的ID是否存在</span><br><span class="line">    ……</span><br><span class="line">    if (!waiting) &#123;</span><br><span class="line">      waiting = true</span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终在 <code>watcher.js</code> 找到 <code>update</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// src/core/observer/watcher.js</span><br><span class="line">update () &#123;</span><br><span class="line">  // lazy 懒加载</span><br><span class="line">  // sync 组件数据双向改变</span><br><span class="line">  if (this.lazy) &#123;</span><br><span class="line">    this.dirty = true</span><br><span class="line">  &#125; else if (this.sync) &#123;</span><br><span class="line">    this.run()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    queueWatcher(this) // 排队watcher</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等于是队列执行完 Watcher 数组的 <code>update</code> 方法后调用了 <code>updated</code> 钩子函数。</p><h2 id="beforeDestroy-amp-destroyed"><a href="#beforeDestroy-amp-destroyed" class="headerlink" title="beforeDestroy &amp; destroyed"></a>beforeDestroy &amp; destroyed</h2><blockquote><p><strong>beforeDestroy</strong><br>实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。<br><strong>destroyed</strong><br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p></blockquote><p>看代码~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">// 销毁方法</span><br><span class="line">Vue.prototype.$destroy = function () &#123;</span><br><span class="line">  const vm: Component = this</span><br><span class="line">  if (vm._isBeingDestroyed) &#123;</span><br><span class="line">    // 已经被销毁</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, &apos;beforeDestroy&apos;)</span><br><span class="line">  vm._isBeingDestroyed = true</span><br><span class="line">  // 销毁过程</span><br><span class="line">  // remove self from parent</span><br><span class="line">  const parent = vm.$parent</span><br><span class="line">  if (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) &#123;</span><br><span class="line">    remove(parent.$children, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  // teardown watchers</span><br><span class="line">  if (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  let i = vm._watchers.length</span><br><span class="line">  while (i--) &#123;</span><br><span class="line">    vm._watchers[i].teardown()</span><br><span class="line">  &#125;</span><br><span class="line">  // remove reference from data ob</span><br><span class="line">  // frozen object may not have observer.</span><br><span class="line">  if (vm._data.__ob__) &#123;</span><br><span class="line">    vm._data.__ob__.vmCount--</span><br><span class="line">  &#125;</span><br><span class="line">  // call the last hook...</span><br><span class="line">  vm._isDestroyed = true</span><br><span class="line">  // invoke destroy hooks on current rendered tree</span><br><span class="line">  vm.__patch__(vm._vnode, null)</span><br><span class="line">  // 触发 destroyed 钩子</span><br><span class="line">  callHook(vm, &apos;destroyed&apos;)</span><br><span class="line">  // turn off all instance listeners.</span><br><span class="line">  vm.$off()</span><br><span class="line">  // remove __vue__ reference</span><br><span class="line">  if (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个销毁 Vue 实例的过程，将各种配置清空和移除。</p><h2 id="activated-amp-deactivated"><a href="#activated-amp-deactivated" class="headerlink" title="activated &amp; deactivated"></a>activated &amp; deactivated</h2><blockquote><p><strong>activated</strong><br>keep-alive 组件激活时调用。<br><strong>deactivated</strong><br>keep-alive 组件停用时调用。</p></blockquote><p>找到实现代码的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/lifecycle.js</span><br><span class="line">export function activateChildComponent (vm: Component, direct?: boolean) &#123;</span><br><span class="line">  if (direct) &#123;</span><br><span class="line">    vm._directInactive = false</span><br><span class="line">    if (isInInactiveTree(vm)) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (vm._directInactive) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (vm._inactive || vm._inactive === null) &#123;</span><br><span class="line">    vm._inactive = false</span><br><span class="line">    for (let i = 0; i &lt; vm.$children.length; i++) &#123;</span><br><span class="line">      activateChildComponent(vm.$children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    callHook(vm, &apos;activated&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function deactivateChildComponent (vm: Component, direct?: boolean) &#123;</span><br><span class="line">  if (direct) &#123;</span><br><span class="line">    vm._directInactive = true</span><br><span class="line">    if (isInInactiveTree(vm)) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!vm._inactive) &#123;</span><br><span class="line">    vm._inactive = true</span><br><span class="line">    for (let i = 0; i &lt; vm.$children.length; i++) &#123;</span><br><span class="line">      deactivateChildComponent(vm.$children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    callHook(vm, &apos;deactivated&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上两个方法关键就是修改了 <code>vm._inactive</code> 的值，并且乡下遍历子组件，最后触发钩子方法。</p><h2 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h2><blockquote><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p></blockquote><p>这是 2.5 以上版本有的一个钩子，用于处理错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// src/core/util/error.js</span><br><span class="line">export function handleError (err: Error, vm: any, info: string) &#123;</span><br><span class="line">  if (vm) &#123;</span><br><span class="line">    let cur = vm</span><br><span class="line">    // 向上冒泡遍历</span><br><span class="line">    while ((cur = cur.$parent)) &#123;</span><br><span class="line">      // 获取钩子函数</span><br><span class="line">      const hooks = cur.$options.errorCaptured</span><br><span class="line">      if (hooks) &#123;</span><br><span class="line">        for (let i = 0; i &lt; hooks.length; i++) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            // 执行 errorCaptured 钩子函数</span><br><span class="line">            const capture = hooks[i].call(cur, err, vm, info) === false</span><br><span class="line">            if (capture) return</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            globalHandleError(e, cur, &apos;errorCaptured hook&apos;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  globalHandleError(err, vm, info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码很简单，看代码即可~</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>除了生命周期钩子外，vue还提供了生命周期方法来直接调用。</p><h2 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h2><blockquote><p>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。<br>如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。<br>这个方法返回实例自身，因而可以链式调用其它实例方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = function (</span><br><span class="line">  el?: string | Element,</span><br><span class="line">  hydrating?: boolean</span><br><span class="line">): Component &#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  if (el === document.body || el === document.documentElement) &#123;</span><br><span class="line">    return this</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const options = this.$options</span><br><span class="line">  // resolve template/el and convert to render function</span><br><span class="line">  if (!options.render) &#123;</span><br><span class="line">    // 获取template</span><br><span class="line">    let template = options.template</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      if (typeof template === &apos;string&apos;) &#123;</span><br><span class="line">        if (template.charAt(0) === &apos;#&apos;) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return this</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    // 编译template</span><br><span class="line">    if (template) &#123;</span><br><span class="line">      const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, this)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 执行 $mount 方法</span><br><span class="line">  return mount.call(this, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实很简单，先获取html代码，然后执行 <code>compileToFunctions</code> 方法执行编译过程（具体编译过程在学习Render的时候再说）。</p><h2 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate"></a>vm.$forceUpdate</h2><blockquote><p>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Vue.prototype.$forceUpdate = function () &#123;</span><br><span class="line">  var vm = this;</span><br><span class="line">  if (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是强制更新方法，执行了 <code>vm._watcher.update()</code> 方法。</p><h2 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h2><blockquote><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p></blockquote><p>找了找 <code>vm.$nextTick</code> 的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// src/core/instance/render.js</span><br><span class="line">Vue.prototype.$nextTick = function (fn: Function) &#123;</span><br><span class="line">  return nextTick(fn, this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>找到这个 <code>nextTick</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// src/core/util/next-tick.js</span><br><span class="line">export function nextTick (cb?: Function, ctx?: Object) &#123;</span><br><span class="line">  let _resolve</span><br><span class="line">  callbacks.push(() =&gt; &#123;</span><br><span class="line">    if (cb) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        cb.call(ctx)</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        handleError(e, ctx, &apos;nextTick&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (_resolve) &#123;</span><br><span class="line">      _resolve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  if (!pending) &#123;</span><br><span class="line">    pending = true</span><br><span class="line">    if (useMacroTask) &#123;</span><br><span class="line">      macroTimerFunc()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      microTimerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // $flow-disable-line</span><br><span class="line">  if (!cb &amp;&amp; typeof Promise !== &apos;undefined&apos;) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体功能逻辑等学习完 <code>render</code> 再更新……</p><h2 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy"></a>vm.$destroy</h2><blockquote><p>完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。<br>触发 beforeDestroy 和 destroyed 的钩子。</p></blockquote><p>关于$destroy 我们之前再说 destroyed 钩子的时候提到过了，这里就不再赘述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$destroy = function () &#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>首先说下过年博客计划，过年学习Vue各个模块的源码，并发布相应博客。另外还会发布一些前端知识的整理，便于下个月找工作~<br>然后，小结下自己看源码的一些小技巧：</p><ul><li>重点关注方法的执行、对象的实例化、对象属性的修改。</li><li>忽略开发版本提示逻辑、内部变量赋值。</li><li>有目标的看代码，根据主线目标进行源码学习。 </li></ul><p>OK，今天就这么多~ 明天去学习下Vue的事件源码！加油！明天见！</p><h1 id="Vue-js学习系列"><a href="#Vue-js学习系列" class="headerlink" title="Vue.js学习系列"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p><h1 id="Vue-js学习系列项目地址"><a href="#Vue-js学习系列项目地址" class="headerlink" title="Vue.js学习系列项目地址"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href="https://github.com/violetjack/VueStudyDemos" target="_blank" rel="noopener">https://github.com/violetjack/VueStudyDemos</a></p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p><p>新浪微博： <a href="http://weibo.com/u/2640909603" target="_blank" rel="noopener">http://weibo.com/u/2640909603</a><br>掘金：<a href="https://gold.xitu.io/user/571d953d39b0570068145cd1" target="_blank" rel="noopener">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href="http://blog.csdn.net/violetjack0808" target="_blank" rel="noopener">http://blog.csdn.net/violetjack0808</a><br>简书： <a href="http://www.jianshu.com/users/54ae4af3a98d/latest_articles" target="_blank" rel="noopener">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href="https://github.com/violetjack" target="_blank" rel="noopener">https://github.com/violetjack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;春节继续写博客~加油！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次来学习一下Vue的生命周期，看看生命周期是怎么回事。&lt;/p&gt;
&lt;h1 id=&quot;callHook&quot;&gt;&lt;a href=&quot;#callHook&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Vue.js源码学习" scheme="https://violetjack.github.io/tags/Vue-js%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建博客笔记</title>
    <link href="https://violetjack.github.io/2018/02/07/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <id>https://violetjack.github.io/2018/02/07/用hexo搭建博客笔记/</id>
    <published>2018-02-06T16:00:00.000Z</published>
    <updated>2018-04-03T01:50:38.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想有个自己的 Github.io 博客，感觉逼格能够上升一大截。</p></blockquote><p>很久之前就看到网上各种博客搭建的文章，但是从内心中总感觉好像是个很麻烦的事情。所以，一直没有动手去做。</p><p>昨天，趁着年前工作不忙，搭建了个博客，这里记录下过程。<br>其实，搭建hexo博客是非常简单的事情。</p><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>Mac安装前提</p><ul><li>Xcode</li><li>Node.js</li><li>Git</li></ul><p>这三个玩意儿对于我们开发者基本都是有的，没有装个就好。</p><h1 id="创建博客的过程"><a href="#创建博客的过程" class="headerlink" title="创建博客的过程"></a>创建博客的过程</h1><p>简单的几条 bash 命令就好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init [文件夹名]</span><br><span class="line">$ cd [文件夹名]</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>以上步骤就已经安装完毕了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 新建文章 layout为模板，title为文章名</span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">// 启动本地服务器看hexo博客，地址为 `http://localhost:4000/`</span><br><span class="line">$ hexo server</span><br><span class="line">// 生成静态文件</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br><span class="line">// 部署建站</span><br><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br><span class="line">// 去除缓存文件</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>这几个命令就能应付常用博客发布了。</p><h1 id="创建Github-io"><a href="#创建Github-io" class="headerlink" title="创建Github.io"></a>创建Github.io</h1><p>在我的Github中创建 [github名].github.io这个项目，比如像我的 <a href="https://github.com/violetjack/violetjack.github.io" target="_blank" rel="noopener">violetjack.github.io</a> 。</p><h1 id="上传博客配置"><a href="#上传博客配置" class="headerlink" title="上传博客配置"></a>上传博客配置</h1><p>如果是通过git开源发布的，那么只需要在hexo项目根目录的 <code>_config.yml</code> 文件中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [github.io 仓库]</span><br><span class="line">  branch: [发布的分支]</span><br><span class="line">  message: [发布消息]</span><br></pre></td></tr></table></figure></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>hexo搭建的博客有很多的主题样式，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a> 查看选择。安装过程里面都会说。</p><p>比如我们安装 <code>Ada</code> 主题，首先用git克隆下仓库。这里，可以在hexo博客项目中去执行克隆行为，直接下载到hexo项目的themes目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/shuiRong/hexo-theme-Ada.git themes/Ada</span><br></pre></td></tr></table></figure></p><p>有些主题需要安装依赖库，在hexo项目根目录中安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-jade --save</span><br></pre></td></tr></table></figure></p><p>最后，修改hexo项目根目录下 <code>_config.yml</code> 中的 theme 选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Ada</span><br></pre></td></tr></table></figure></p><p>这就完成了主题的修改。<br>主题的配置工作呢，在 <code>./themes/Ada/_config.yml</code> 中，具体修改看相应的 Github README。<br>其实如果有任何对主题不满意的地方可以直接去主题中修改，代码并不难，如果只是想改几个文本全局搜一下就能搜到了。</p><h1 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h1><p>样式中一般只有首页和文章两个标签可用，如果我们想添加其他标签，如 关于我，该怎么办呢？<br>创建 关于我 页面（添加 layout 选项，默认为post）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure></p><p>这样，项目中就多了 about 这个文件夹，修改其中的 md 文件即可编辑关于我页面。<br>然后将主题的配置 <code>./themes/Ada/_config.yml</code> 中的页面链接指向 about 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:</span><br><span class="line">  首页: /</span><br><span class="line">  文章: /archives</span><br><span class="line">  关于: /about</span><br></pre></td></tr></table></figure></p><p>好啦，这里就简单介绍下Hexo的用法~主要是记录下搭建的过程。整理下步骤：</p><ul><li>搭建环境</li><li>创建 Github.io，或者说GithubPage</li><li>使用hexo搭建博客</li><li>选择样式，添加页面、添加文章内容。</li><li>发布</li></ul><p>就这么多啦~快去选择一个喜欢的样式做一个自己的博客，提升逼格把~<br><strong>最后展示一下我的博客：</strong><a href="https://violetjack.github.io/">Vue实验室</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo中文网</a><br><a href="https://pages.github.com/" target="_blank" rel="noopener">github page</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一直想有个自己的 Github.io 博客，感觉逼格能够上升一大截。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久之前就看到网上各种博客搭建的文章，但是从内心中总感觉好像是个很麻烦的事情。所以，一直没有动手去做。&lt;/p&gt;
&lt;p&gt;昨天，趁着年前工作
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://violetjack.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
